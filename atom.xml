<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vincent&#39;s Home</title>
  
  <subtitle>欢迎访问！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wysh.site/"/>
  <updated>2019-04-26T17:11:16.000Z</updated>
  <id>http://wysh.site/</id>
  
  <author>
    <name>吴勇胜（Vincent）</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python爬虫：爬取自己个人网站的所有文章</title>
    <link href="http://wysh.site/2019/04/27/python%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E8%87%AA%E5%B7%B1%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E7%AB%A0/"/>
    <id>http://wysh.site/2019/04/27/python爬虫：爬取自己个人网站的所有文章/</id>
    <published>2019-04-26T16:15:54.000Z</published>
    <updated>2019-04-26T17:11:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从去年年初开始，就一直在参与公司爬虫大数据的项目，爬取的是各个工商信用网站的数据，我主要负责数据的验证以及部分网站数据的解析工作。最近突然想把自己的个人网站上所有的文章都爬取下来，于是就有了这篇文章。</p></blockquote><p>源代码已上传至GitHub：<br><a href="https://github.com/wuyongsheng/spider-for-personal-website/blob/master/mySpider" target="_blank" rel="noopener">https://github.com/wuyongsheng/spider-for-personal-website/blob/master/mySpider</a></p><h3 id="思路及分析"><a href="#思路及分析" class="headerlink" title="思路及分析"></a>思路及分析</h3><p>想爬取网站上所有的文章，首先得获取每一篇文章的 url ，然后通过 url 发起 http 请求，接着对响应数据的 html 页面源码使用python的爬虫工具库进行解析，从中提取出文章的相关信息。</p><p>So，在编写爬虫程序之前，我们必须熟悉相关的爬虫工具库，同时对目标网站的结构也应该有所了解。</p><h3 id="使用的技术"><a href="#使用的技术" class="headerlink" title="使用的技术"></a>使用的技术</h3><p>这里使用 python + BeautifulSoup4（网页装载与解析） + urllib（发起请求）+ 字符串处理函数（字符替换及去掉字符串中的空白字符等） + codecs（写入文件）+ MongoDB （写入 MongoDB）+ urlretrieve（下载网页上的图片到本地）</p><h3 id="网站及页面结构"><a href="#网站及页面结构" class="headerlink" title="网站及页面结构"></a>网站及页面结构</h3><ul><li>网站首页</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-6a5ffffba40916ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网站首页.png"></p><p>从上图中，我们可以看到网站的首页的 url 是：<a href="http://wysh.site/">http://wysh.site/</a> ，点击下方分页栏中的页码可跳转至指定的分页</p><ul><li>网站总页面数<br>按下键盘的 F12 键，可以看到网页标签的 DOM 结构，下图红框中的标签显示了分页的总数</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-49712cc9cbdb9b30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="总页面数png.png"></p><ul><li>其他分页</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-84bf663ca315c15f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="其他分页.png"></p><p>从上图中可以看出，除首页以外，其他分页的 url 是：<br><a href="http://wysh.site/page/page_num/">http://wysh.site/page/page_num/</a>  ,其中 page_num 代表分页的数字</p><ul><li>首页及分页中文章的 url</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-68bba5d6c3f277f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章标签.png"></p><p>从上图中，我们可以看出，首页及每个分页都对应着该分页的 5 篇文章标签，每个文章标签里面都有该文章的 url 属性</p><ul><li>文章内容标签</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-c5e2a3fa323c7679.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章内容部分.png"></p><p>上图显示了文章内容的标签，其中文章的正文标签都是 class 为 post-body han-init-context 的直接子节点</p><h3 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h3><p>进行了上述网站及页面结构的分析，接下来就可以写爬虫代码了。</p><p>代码逻辑如下：</p><ol><li>请求首页，从响应信息中提取出分页的总数，从而可以推断出各分页的 url</li><li>请求首页及个分页的 url，从响应信息中提取出首页及各分页中的文章的 url，加入到列表中，完成之后，可以得到包含所有文章的 url 的列表</li><li>使用文章列表中的每一篇文章的 url 发起 http 请求，对请求的响应信息的 html 页面源码进行解析，提取出文章信息，将其写入文件及 MongoDB 中（同时将文章中的图片保存至本地）</li><li>针对请求过程中可能出现的异常（比如网络不稳定导致请求识别）进行失败重试（键代码中的 post-body han-init-context 方法）</li></ol><h3 id="爬虫程序执行后的结果"><a href="#爬虫程序执行后的结果" class="headerlink" title="爬虫程序执行后的结果"></a>爬虫程序执行后的结果</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-edaf7c91782fdaec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章及图片.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a3b5bb8d3968752b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章内容.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-4846e0188177e328.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="存入MongoDB中的数据.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>在线的源码中，我进行了详解的注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlretrieve</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="comment">#建立MongoDB的连接，插入数据时会自动创建指定的数据库及集合</span></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"spider"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"article"</span>]</span><br><span class="line"><span class="comment">#指定爬取的文件导出路径</span></span><br><span class="line">filePath = <span class="string">r"c:/spider/"</span></span><br><span class="line"><span class="comment">#判断路径是否存在，不存在则创建路径</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filePath):</span><br><span class="line">    os.makedirs(filePath)</span><br><span class="line"><span class="comment">#个人网站根路径</span></span><br><span class="line">url = <span class="string">"http://wysh.site"</span></span><br><span class="line"><span class="comment">#article_list 存放网站文章的url，初始为空</span></span><br><span class="line">article_list = []</span><br><span class="line"><span class="comment">#设置一个用户代理，模拟浏览器</span></span><br><span class="line">user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line"><span class="comment">#通过 urllib 发送 http 请求</span></span><br><span class="line">req = urllib.request.Request(url, headers=&#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网页链接，针对请求发送过程中可能产生的异常</span></span><br><span class="line"><span class="comment"># （比如网络不稳定导致请求发送失败）进行异常补捕获并重试，最多重试10次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">openlink_and_retry</span><span class="params">(req)</span>:</span></span><br><span class="line">    maNum = <span class="number">10</span></span><br><span class="line">    <span class="keyword">for</span> tries <span class="keyword">in</span> range(maNum):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = urllib.request.urlopen(req)</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">if</span> tries &lt; (maNum):</span><br><span class="line">                print(<span class="string">"retry!!!"</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"Has tried %d times , all failed!"</span>, maNum)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 请求网站首页的页面数据</span></span><br><span class="line">print(<span class="string">'发送首页的页面网络请求: '</span> + url)</span><br><span class="line">response = openlink_and_retry(req)</span><br><span class="line">content = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment">#使用 BeautifulSoup 对响应数据进行解析</span></span><br><span class="line">soup = BeautifulSoup(content, <span class="string">"lxml"</span>)</span><br><span class="line">spans = soup.select(<span class="string">'span.space'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 获取页面数量</span></span><br><span class="line">total_page = spans.nextSibling.get_text()</span><br><span class="line">print(<span class="string">"total_page is :"</span> + total_page)</span><br><span class="line"><span class="comment">#除首页外，其他页面的公共部分</span></span><br><span class="line">urlBase = <span class="string">"http://wysh.site/page/"</span></span><br><span class="line"><span class="comment">#页面索引</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line">total_page = int(total_page)</span><br><span class="line"><span class="comment">#依次遍历对网站的每一个分页进行遍历，获取分页中所有文章的 url</span></span><br><span class="line"><span class="keyword">while</span> index &lt;= total_page:</span><br><span class="line">    <span class="comment"># 索引大于 1 的时候需要重新指定 url</span></span><br><span class="line">    <span class="keyword">if</span> index &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 拼装成每页的 url</span></span><br><span class="line">        url = urlBase + str(index)</span><br><span class="line">        req = urllib.request.Request(url, headers=&#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        print(<span class="string">'发送页面网络请求 : '</span> + url)</span><br><span class="line">    response = openlink_and_retry(req)</span><br><span class="line">    content = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">"lxml"</span>)</span><br><span class="line">    articles = soup.select(<span class="string">".post-block"</span>)</span><br><span class="line">    <span class="comment">#遍历分页中的每一篇文章</span></span><br><span class="line">    <span class="keyword">for</span> article <span class="keyword">in</span> articles:</span><br><span class="line">        <span class="comment"># 从页面中提取出每一篇文章的 url</span></span><br><span class="line">        article_url = article.select(<span class="string">"link"</span>)[<span class="number">0</span>].attrs[<span class="string">'href'</span>]</span><br><span class="line">        print(article_url)</span><br><span class="line">        <span class="comment"># 将文章的 url 添加到文章列表中</span></span><br><span class="line">        article_list.append(article_url)</span><br><span class="line">    <span class="comment"># 每循环一次后，索引加一，指向下一页</span></span><br><span class="line">    index = index + <span class="number">1</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="comment"># 依次从文章列表中取出每一篇文章的 url ，通过BeautifulSoup 提取该文章的相关信息</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> article_list:</span><br><span class="line">    print(i)</span><br><span class="line">    <span class="comment"># url中有中文，因此我们需要使用 urllib.request.quote(link)</span></span><br><span class="line">    <span class="comment"># 来把链接中的中文编码成 url 中的正确编码</span></span><br><span class="line">    trans_url = urllib.request.quote(i)</span><br><span class="line">    <span class="comment"># 这里会把: 也转码了，转换成 % 3</span></span><br><span class="line">    <span class="comment"># 因此，转换之后，我们还需要还原为:</span></span><br><span class="line">    urlMain = trans_url.replace(<span class="string">'%3A'</span>, <span class="string">':'</span>)</span><br><span class="line">    print(urlMain)</span><br><span class="line">    req = urllib.request.Request(urlMain, headers=&#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    response = openlink_and_retry(req)</span><br><span class="line">    content = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    soup = BeautifulSoup(content, <span class="string">"lxml"</span>)</span><br><span class="line">    <span class="comment"># 获取文章的标题</span></span><br><span class="line">    heading = soup.h1.string</span><br><span class="line">    heading1 = <span class="string">"标题是 ："</span> + heading</span><br><span class="line">    rep = soup.select(<span class="string">"#posts &gt; article &gt; div &gt; header &gt; div &gt; span.post-time &gt; time"</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">    <span class="comment">#去掉首位空格、回车、换行</span></span><br><span class="line">    rep = rep.strip().replace(<span class="string">"\n"</span>, <span class="string">""</span>).replace(<span class="string">"\r"</span>, <span class="string">""</span>)</span><br><span class="line">    <span class="comment"># 获取发布时间</span></span><br><span class="line">    rep1 = <span class="string">"\n"</span> + <span class="string">"发表于："</span> + rep</span><br><span class="line">    print(heading1)</span><br><span class="line">    print(rep1)</span><br><span class="line">    print(str(j))</span><br><span class="line">    <span class="comment"># 获取文章的分类标签列表，一篇文章可能属于多个分类</span></span><br><span class="line">    cata_tag = soup.find_all(<span class="string">"span"</span>, itemprop=<span class="string">"about"</span>, itemscope=<span class="string">""</span>, itemtype=<span class="string">"http://schema.org/Thing"</span>)</span><br><span class="line">    <span class="comment">#标签名称列表</span></span><br><span class="line">    cata_list = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cata_tag:</span><br><span class="line">        <span class="comment"># 将标签名称添加到标签名称列表里面</span></span><br><span class="line">        cata_list.append(c.text.strip().replace(<span class="string">"\n"</span>, <span class="string">""</span>).replace(<span class="string">"\r"</span>, <span class="string">""</span>))</span><br><span class="line">    <span class="comment">#将标签名称列表转化为字符串</span></span><br><span class="line">    cata_name = <span class="string">"，"</span>.join(cata_list)</span><br><span class="line">    cata_name1 = <span class="string">"\n"</span> + <span class="string">"分类于： "</span> + cata_name</span><br><span class="line">    print(cata_name1)</span><br><span class="line">    <span class="comment"># 获取文章字数</span></span><br><span class="line">    word_count = soup.find(<span class="string">"span"</span>, title=<span class="string">"字数统计"</span>).text.strip().replace(<span class="string">"\n"</span>, <span class="string">""</span>).replace(<span class="string">"\r"</span>, <span class="string">""</span>)</span><br><span class="line">    word_count1 = <span class="string">"\n"</span> + <span class="string">"字数是： "</span> + word_count</span><br><span class="line">    print(word_count)</span><br><span class="line">    j = j + <span class="number">1</span></span><br><span class="line">    <span class="comment">#获取文章正文</span></span><br><span class="line">    body = soup.select(<span class="string">"#posts &gt; article &gt; div &gt; div.post-body.han-init-context"</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#获取正文最前面的引文</span></span><br><span class="line">    blockquote = body.blockquote</span><br><span class="line">    <span class="comment">#获取引文信息</span></span><br><span class="line">    <span class="keyword">if</span> blockquote != <span class="keyword">None</span>:</span><br><span class="line">        quote = blockquote.text.strip()</span><br><span class="line">        quote1 = <span class="string">"\n"</span> + <span class="string">"引文是 ： "</span> + quote</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        quote = <span class="keyword">None</span></span><br><span class="line">        quote1 = <span class="string">"\n"</span> + <span class="string">"引文为空"</span></span><br><span class="line">    print(quote1)</span><br><span class="line">    <span class="comment">#正文的内容初始值为空</span></span><br><span class="line">    content = <span class="string">''</span></span><br><span class="line">    <span class="comment"># 对正文的孩子节点（直接子节点）进行遍历，获取正文内容</span></span><br><span class="line">    <span class="keyword">for</span> nextTag <span class="keyword">in</span> body.children:</span><br><span class="line">        <span class="comment">#如果正文的子节点有 text 属性，则获取其文本</span></span><br><span class="line">        <span class="keyword">if</span> (hasattr(nextTag, <span class="string">'text'</span>)):</span><br><span class="line">            tagContent = nextTag.text.strip()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tagContent = <span class="string">"没有 text 属性 ！！！"</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        print(tagContent)</span><br><span class="line">        <span class="comment">#如果正文的子节点是一号标题</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.name == <span class="string">'h1'</span>:</span><br><span class="line">            tagContent = <span class="string">"一号标题： "</span> + tagContent + <span class="string">'\n'</span></span><br><span class="line">            content = content + tagContent</span><br><span class="line">            <span class="comment"># file.write("一号标题： " + tagContent + '\n')</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 如果正文的子节点是二号标题</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.name == <span class="string">'h2'</span>:</span><br><span class="line">            tagContent = <span class="string">"二号标题： "</span> + tagContent + <span class="string">'\n'</span></span><br><span class="line">            content = content + tagContent</span><br><span class="line">            <span class="comment"># file.write("二号标题：" + tagContent + '\n')</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 如果正文的子节点是三号标题</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.name == <span class="string">'h3'</span>:</span><br><span class="line">            tagContent = <span class="string">"三号标题： "</span> + tagContent + <span class="string">'\n'</span></span><br><span class="line">            content = content + tagContent</span><br><span class="line">            <span class="comment"># file.write("三号标题：" + tagContent + '\n')</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 如果正文的子节点是四号标题</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.name == <span class="string">'h4'</span>:</span><br><span class="line">            tagContent = <span class="string">"四号标题： "</span> + tagContent + <span class="string">'\n'</span></span><br><span class="line">            content = content + tagContent</span><br><span class="line">            <span class="comment"># file.write("四号标题：" + tagContent + '\n')</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 如果正文的子节点是代码块</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.select(<span class="string">'figure'</span>).__len__() &gt; <span class="number">0</span> <span class="keyword">or</span> nextTag.name == <span class="string">'figure'</span>:</span><br><span class="line">            <span class="comment"># 如果 select 的 length 大于 0 则表示这个元素包含 figure 的元素</span></span><br><span class="line">            <span class="keyword">if</span> nextTag.select(<span class="string">'figure'</span>).__len__() &gt; <span class="number">0</span>:</span><br><span class="line">                nextTag = nextTag.select(<span class="string">'figure'</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">#代码内容，初始值为空</span></span><br><span class="line">            codeLine = <span class="string">''</span></span><br><span class="line">            <span class="comment">#依次读取并添加每一行代码内容</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> nextTag.table.tr.find(<span class="string">'td'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'code'</span>&#125;).find_all(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'line'</span>&#125;):</span><br><span class="line">                codeLine += line.text.strip() + <span class="string">'\n'</span></span><br><span class="line">            codeLine  = <span class="string">"代码块： "</span>+ <span class="string">"\n"</span> + codeLine</span><br><span class="line">            content = content + codeLine</span><br><span class="line">            print(codeLine)</span><br><span class="line">            <span class="comment"># file.write("代码块： "+ codeLine )</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 如果正文的子节点是无序列表</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.name == <span class="string">'ul'</span>:</span><br><span class="line">            <span class="comment">#列表内容初始值为空</span></span><br><span class="line">            li_text = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> li <span class="keyword">in</span> nextTag.find_all(<span class="string">'li'</span>):</span><br><span class="line">                li_text = li_text + <span class="string">'- '</span> + li.text.strip() + <span class="string">'\n'</span></span><br><span class="line">                <span class="comment"># file.write('- ' + li.text.strip() + '\n')</span></span><br><span class="line">            content = content + li_text</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 如果正文的子节点是有序列表</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.name == <span class="string">'ol'</span>:</span><br><span class="line">            olIndex = <span class="number">1</span></span><br><span class="line">            li_text = <span class="string">''</span></span><br><span class="line">            <span class="keyword">for</span> li <span class="keyword">in</span> nextTag.find_all(<span class="string">'li'</span>):</span><br><span class="line">                li_text = li_text + str(olIndex) + <span class="string">'. '</span> + li.text.strip() + <span class="string">'\n'</span></span><br><span class="line">                <span class="comment"># file.write(str(olIndex) + '. ' + li.text.strip() + '\n')</span></span><br><span class="line">                olIndex += <span class="number">1</span></span><br><span class="line">            content = content + li_text</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment">#如果正文的子节点是段落</span></span><br><span class="line">        <span class="keyword">if</span> nextTag.name == <span class="string">'p'</span>:</span><br><span class="line">            tagContent = nextTag.text.strip()</span><br><span class="line">            <span class="comment"># 为空表示是图片</span></span><br><span class="line">            <span class="keyword">if</span> tagContent == <span class="string">''</span>:</span><br><span class="line">                <span class="comment">#获取图片的 url</span></span><br><span class="line">                pic_url = nextTag.find(<span class="string">'img'</span>)[<span class="string">'src'</span>]</span><br><span class="line">                content =  content + pic_url</span><br><span class="line">                <span class="comment"># file.write(pic_url)</span></span><br><span class="line">                <span class="comment">#获取图片的名称</span></span><br><span class="line">                pic_name = nextTag.find(<span class="string">'img'</span>)[<span class="string">'alt'</span>]</span><br><span class="line">                urlretrieve(pic_url, filePath + heading + <span class="string">'__'</span> + pic_name)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                links = nextTag.find_all(<span class="string">'a'</span>)</span><br><span class="line">                <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">                    tagContent = tagContent.replace(link.text, link[<span class="string">'href'</span>])</span><br><span class="line">                content = content + tagContent</span><br><span class="line">                <span class="comment"># file.write(tagContent + '\n')</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    i1 = <span class="string">'文章的 url 是 ： '</span> + i</span><br><span class="line">    file = codecs.open(filePath + <span class="string">'/'</span> + heading + <span class="string">'.txt'</span>, <span class="string">"w"</span>, encoding=<span class="string">'utf8'</span>)  <span class="comment"># 指定文件的编码格式</span></span><br><span class="line">    <span class="comment">#将文章的标题、url 、发布时间、字数、引文、正文信息写入文件</span></span><br><span class="line">    file.writelines(heading1)</span><br><span class="line">    file.writelines(i1)</span><br><span class="line">    file.writelines(rep1)</span><br><span class="line">    file.writelines(cata_name1)</span><br><span class="line">    file.writelines(word_count1)</span><br><span class="line">    file.writelines(quote1)</span><br><span class="line">    file.writelines(content)</span><br><span class="line">    <span class="comment"># 使用urlretrieve下载文章中的图片到本地</span></span><br><span class="line">    file.close()</span><br><span class="line">    post = &#123;<span class="string">"heading"</span>:heading,<span class="string">"url"</span>:i,<span class="string">"reportTime"</span>:rep,<span class="string">"category"</span>:cata_name,<span class="string">"wordCount"</span>:word_count,<span class="string">"quote"</span>:quote,<span class="string">"content"</span>:content&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mycol.insert_one(post)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"写入 MongoDB 出错 ！！！"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment">#关闭 MongoDB 连接</span></span><br><span class="line">        myclient.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="爬虫" scheme="http://wysh.site/categories/%E7%88%AC%E8%99%AB/"/>
    
      <category term="大数据" scheme="http://wysh.site/categories/%E7%88%AC%E8%99%AB/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="MongoDB" scheme="http://wysh.site/categories/%E7%88%AC%E8%99%AB/%E5%A4%A7%E6%95%B0%E6%8D%AE/MongoDB/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/%E7%88%AC%E8%99%AB/%E5%A4%A7%E6%95%B0%E6%8D%AE/MongoDB/Python/"/>
    
    
      <category term="MongoDB" scheme="http://wysh.site/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>大数据测试之异常数据识别</title>
    <link href="http://wysh.site/2019/04/05/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%B5%8B%E8%AF%95%E4%B9%8B%E5%BC%82%E5%B8%B8%E6%95%B0%E6%8D%AE%E8%AF%86%E5%88%AB/"/>
    <id>http://wysh.site/2019/04/05/大数据测试之异常数据识别/</id>
    <published>2019-04-05T14:10:54.000Z</published>
    <updated>2019-04-05T14:14:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>从去年开始就一直在参与公司爬虫和大数据项目的测试，测试的对象主要是数据：测试爬虫爬取的数据的准确性、完整性、一致性、惟一性、适时性等，使用的测试方法有很多，这篇文章记录了我通过Python脚本对MongoDB数据库中的异常数据进行识别的一些操作，自认为写的还算简单高效</p></blockquote><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>对于已经入库的数据（比如 MongoDB、ElasticSearch中的数据），为了验证数据的正确性，我们可以借助一些数据库的客户端工具(比如：MongoDB 的 NoSQLBooster，ElasticSearch 的 Kibana)，通过手工查询是否存在异常数据，但通常数据库中会有很多表、每个表有很多个字段，每个字段都要从多个维度（比如是否为空，字段是否缺失，是否存在异常字符等）进行验证，工作量会很大</p><p>对于那些普遍的、基本的验证操作，我们可以通过 Python 操作对应的数据库，通过脚本的方式进行验证，这样可以大大加快测试的速度</p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p>本文通过 Python 代码，对 MongoDB 数据库中的数据进行了以下几方面的验证：</p><ul><li>重复数据的过滤</li><li>包含异常字符的数据的过滤</li><li>包含字段缺失的数据的过滤</li><li>包含多余字段的数据的过滤</li><li>非空字段为空的数据的过滤</li></ul><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><p>在对数据进行测试之前，我们首先要了解的就是这些数据的表结构是怎样的：有哪些字段、字段的约束等，一般都会有相应的数据库设计文档进行说明，比如，本次我们要测试的数据的表结构如下：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>是否空</th><th>备注</th></tr></thead><tbody><tr><td>_id</td><td>Objectid</td><td>No</td><td>主键</td></tr><tr><td>uniformSocialCreditCode</td><td>String</td><td>No</td><td>统一社会信用代码</td></tr><tr><td>enterpriseName</td><td>String</td><td>No</td><td>企业名称 </td></tr><tr><td>legalRepresentative</td><td>String</td><td>Yes</td><td>法定代表人</td></tr><tr><td>provinceCode</td><td>String</td><td>No</td><td>6位省份代码</td></tr></tbody></table><p>下面是测试的脚本，在脚本中，我进行了详尽的注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''导入MongoDB的驱动：pymongo '''</span></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="string">'''mylist 列表是我造的测试数据，将其插入到 MongoDB 数据库中'''</span></span><br><span class="line">mylist = [</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">20</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050020"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司01"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">"张三01"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420001"</span>,<span class="string">"createDate"</span>:<span class="string">"20190320"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">21</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050020"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司01"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">""</span>      ,<span class="string">"provinceCode"</span>:<span class="string">"420002"</span>,<span class="string">"createDate"</span>:<span class="string">"20190321"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">22</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050022"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司03"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">"张三03"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420003"</span>,<span class="string">"createDate"</span>:<span class="string">"20190322"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">23</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050022"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司03"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">""</span>      ,<span class="string">"provinceCode"</span>:<span class="string">""</span>      ,<span class="string">"createDate"</span>:<span class="string">"20190323"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">24</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"4200010\t\r\n   24"</span>                                  ,<span class="string">"legalRepresentative"</span>: <span class="string">"张三03"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420005"</span>,<span class="string">"createDate"</span>:<span class="string">"20190324"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">25</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420             25"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司06"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">""</span>       ,<span class="string">"provinceCode"</span>:<span class="string">"420006"</span>,<span class="string">"createDate"</span>:<span class="string">"20190325"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">26</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050026"</span>, <span class="string">"enterpriseName"</span>: <span class="string">""</span>,            <span class="string">"legalRepresentative"</span>: <span class="string">""</span>      ,<span class="string">"provinceCode"</span>:<span class="string">"420007"</span>,<span class="string">"createDate"</span>:<span class="string">"20190326"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">27</span>,                                                  <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司06"</span>,                               <span class="string">"provinceCode"</span>:<span class="string">"420008"</span>,<span class="string">"createDate"</span>:<span class="string">"20190327"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">28</span>,                                                  <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司09"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">"张三09"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420009"</span>,<span class="string">"createDate"</span>:<span class="string">"20190328"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">29</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">""</span>,                   <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司19"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">""</span>      ,<span class="string">"provinceCode"</span>:<span class="string">"420\n "</span>,<span class="string">"createDate"</span>:<span class="string">"20190329"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">30</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">""</span>,                   <span class="string">"enterpriseName"</span>: <span class="string">"某科&lt;html112"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">"张三11"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420011"</span>,<span class="string">"createDate"</span>:<span class="string">"20190330"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">31</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050031"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司13"</span>             ,<span class="string">"legalRepresentative"</span>: <span class="string">"张三12"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420012"</span>,<span class="string">"createDate"</span>:<span class="string">"20190331"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">32</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050032"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司13"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">"&lt;html&gt;23"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420013"</span>,<span class="string">"createDate"</span>:<span class="string">"20190401"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"_id"</span>: <span class="number">33</span>, <span class="string">"uniformSocialCreditCode"</span>: <span class="string">"420001007161050033"</span>, <span class="string">"enterpriseName"</span>: <span class="string">"某科技公司14"</span>,<span class="string">"legalRepresentative"</span>: <span class="string">"张三14"</span>,<span class="string">"provinceCode"</span>:<span class="string">"420014"</span>,<span class="string">"createDate"</span>:<span class="string">"20190402"</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="string">'''check()方法用来对数据库设计文档中所有的字段是否缺失、是否存在特殊字符以及非空字段是否为空进行检查'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(full_list, not_null_list, special_list)</span>:</span></span><br><span class="line">    <span class="string">'''for循环依次遍历参数列表中所有的字段'''</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> full_list:</span><br><span class="line">        <span class="string">'''查询缺失的字段'''</span></span><br><span class="line">        qurey_no_exists = &#123;</span><br><span class="line">            j: &#123;</span><br><span class="line">                <span class="string">"$exists"</span>: <span class="keyword">False</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">'''查询字段缺失的记录，并返回缺失该字段的记录数量'''</span></span><br><span class="line">        count1 = mycol.find(qurey_no_exists).count() </span><br><span class="line">        <span class="string">'''如果存在字段缺失的记录，则打印缺失该字段的记录的数量及部分记录'''</span></span><br><span class="line">        <span class="keyword">if</span> (count1 &gt; <span class="number">0</span>):</span><br><span class="line">            print(<span class="string">"对比数据库设计文档，存在 "</span> + j + <span class="string">" 字段缺失的记录，"</span> + <span class="string">" 缺失的记录数为："</span> + str(count1))</span><br><span class="line">            print(<span class="string">"其中一条 "</span>+j+<span class="string">" 字段缺失的记录为："</span>)</span><br><span class="line">            <span class="string">'''打印一条该字段缺失的记录，通过limit()函数中的参数，可控制打印的记录的数量'''</span></span><br><span class="line">            <span class="keyword">for</span> m <span class="keyword">in</span> mycol.find(qurey_no_exists).limit(<span class="number">1</span>):</span><br><span class="line">                print(m)</span><br><span class="line">        <span class="string">'''对 MongoDB 中的所有记录的该字段，遍历是否存在特殊字符列表中的异常字符'''</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> special_list:</span><br><span class="line">            qurey_special = &#123;</span><br><span class="line">                j: &#123;</span><br><span class="line">                    <span class="string">"$regex"</span>: p</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'''查询包含异常字符的记录，并返回记录的数量'''</span></span><br><span class="line">            count2 = mycol.find(qurey_special).count() </span><br><span class="line">            <span class="string">'''如果存在包含异常字符的记录，则打印记录的数量及部分记录'''</span></span><br><span class="line">            <span class="keyword">if</span> (count2 &gt; <span class="number">0</span>):</span><br><span class="line">                print(<span class="string">"字段： "</span> + j + <span class="string">" 存在异常字符："</span> + p + <span class="string">"， 记录数为： "</span> + str(count2))</span><br><span class="line">                print(<span class="string">"其中的一条包含异常字符 "</span> + p + <span class="string">" 的记录为："</span>)</span><br><span class="line">                <span class="string">'''打印一条包含异常字符的记录，通过limit()函数中的参数，可控制打印的记录的数量'''</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> mycol.find(qurey_special).limit(<span class="number">1</span>):</span><br><span class="line">                    print(k)</span><br><span class="line">        <span class="string">'''对数据库设计文档中的非空字段进行判空'''</span></span><br><span class="line">        <span class="keyword">if</span> (j <span class="keyword">in</span> not_null_list):</span><br><span class="line">            qurey_null = &#123;</span><br><span class="line">                <span class="string">"$or"</span>: [&#123;</span><br><span class="line">                    j: <span class="string">""</span></span><br><span class="line">                &#125;, &#123;</span><br><span class="line">                    j: []</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="string">'''如果存在非空字段为空的记录，则打印记录的数量及部分记录'''</span></span><br><span class="line">            count3 = mycol.find(qurey_null).count()</span><br><span class="line">            <span class="keyword">if</span> (count3 &gt; <span class="number">0</span>):</span><br><span class="line">                print(<span class="string">"数据库设计中 "</span>+j+<span class="string">" 字段非空，"</span>+<span class="string">"存在 "</span> + j + <span class="string">" 字段为空的记录， "</span> + <span class="string">" 为空的记录数为："</span> + str(count3))</span><br><span class="line">                print(<span class="string">"其中一条字段为空的记录为："</span>)</span><br><span class="line">                <span class="string">'''打印一条非空字段为空的记录，通过limit()函数中的参数，可控制打印的记录的数量'''</span></span><br><span class="line">                <span class="keyword">for</span> g <span class="keyword">in</span> mycol.find(qurey_null).limit(<span class="number">1</span>):</span><br><span class="line">                    print(g)</span><br><span class="line"></span><br><span class="line"><span class="string">'''check_duplicates()方法用来检查是否存在重复的数据，若MongoDB中，某个字段或某几个字段的组合不能重复，</span></span><br><span class="line"><span class="string">        则将该字段或字段的组合以列表的方式传入到方法的参数 duplicates_list 中'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_duplicates</span><span class="params">(duplicates_list)</span>:</span> </span><br><span class="line">    </span><br><span class="line">    <span class="string">'''下面的查询语句用到了MongoDB 的聚合 '''</span></span><br><span class="line">    duplicates_query = [&#123;</span><br><span class="line">        <span class="string">"$group"</span>: &#123;</span><br><span class="line"><span class="comment">#           聚合的分组初始为空</span></span><br><span class="line">            <span class="string">"_id"</span>: &#123;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"uniqueIds"</span>: &#123;</span><br><span class="line">                <span class="string">"$addToSet"</span>: <span class="string">"$_id"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            </span><br><span class="line"><span class="comment">#         计算分组中记录的数量之和</span></span><br><span class="line">            <span class="string">"count"</span>: &#123;</span><br><span class="line">                <span class="string">"$sum"</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line"><span class="comment">#         匹配记录数量之和大于1的分组</span></span><br><span class="line">        <span class="string">"$match"</span>: &#123;</span><br><span class="line">            <span class="string">"count"</span>: &#123;</span><br><span class="line">                <span class="string">"$gt"</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    </span><br><span class="line">    <span class="string">'''未传入分组的字段'''</span></span><br><span class="line">    <span class="keyword">if</span>(len(duplicates_list) == <span class="number">0</span>):</span><br><span class="line">        print(<span class="string">"输入的参数长度有误 ！！！"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="string">'''将传入的字段添加到查询语句的分组中（"_id"所对应的值）'''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(duplicates_list)):</span><br><span class="line">            duplicates_query[<span class="number">0</span>][<span class="string">"$group"</span>][<span class="string">"_id"</span>][duplicates_list[i]] = <span class="string">"$"</span> + duplicates_list[i]</span><br><span class="line">        cursor = mycol.aggregate(duplicates_query)</span><br><span class="line">        <span class="string">'''打印存在重复数据的字段的组合'''</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> doc <span class="keyword">in</span> cursor:</span><br><span class="line">                print(<span class="string">"字段  "</span> + str(doc[<span class="string">"_id"</span>])+<span class="string">" 的组合存在重复数据"</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            cursor.close() </span><br><span class="line"></span><br><span class="line"><span class="string">'''check_redundant()方法用来检查 MongoDB 中的记录是否存在多于的字段</span></span><br><span class="line"><span class="string">     （多于的字段指的是不包含在数据库设计文档中的字段）'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_redundant</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''读取集合中的一条记录'''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mycol.find().limit(<span class="number">1</span>):</span><br><span class="line">        <span class="string">'''记录是字典形式的，获取字典的键值并转化为列表'''</span></span><br><span class="line">        l = list(i.keys())</span><br><span class="line">        print(<span class="string">"MongoDB中的记录的字段为："</span> + <span class="string">"\n"</span> + str(l))</span><br><span class="line">        <span class="string">'''检查MongoDB中的字段是否有不包含在数据库设计文档中的字段'''</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> l:</span><br><span class="line">            <span class="keyword">if</span> (k <span class="keyword">not</span> <span class="keyword">in</span> full_list):</span><br><span class="line">                print(<span class="string">"对比数据库设计文档，MongoDb 中 "</span> + k + <span class="string">" 字段多余"</span>)</span><br><span class="line">                print(<span class="string">"其中的一条 "</span>+ k +<span class="string">" 字段多余的记录为： "</span> + <span class="string">"\n"</span> + str(i))</span><br><span class="line">            <span class="keyword">if</span>(k == <span class="string">''</span>):</span><br><span class="line">                print(<span class="string">"MongoDB 中存在名称为空的字段"</span>)</span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"> print(<span class="string">"--------"</span> + <span class="string">"开始测试"</span> + <span class="string">"--------"</span>)</span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">    <span class="string">'''指定数据库'''</span></span><br><span class="line">    db_name  = <span class="string">"wys_db"</span></span><br><span class="line">    <span class="string">'''指定集合'''</span></span><br><span class="line">    col_name = <span class="string">"wys_col"</span></span><br><span class="line">    myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">    mydb = myclient[db_name]</span><br><span class="line">    mycol = mydb[col_name]</span><br><span class="line">    <span class="string">'''异常字符列表，只列举了部分字符'''</span></span><br><span class="line">    special_list = [<span class="string">'     '</span>, <span class="string">'\t'</span>, <span class="string">'\r'</span>, <span class="string">'\n'</span>, <span class="string">'&lt;html'</span>, <span class="string">'&lt;meta'</span>, <span class="string">'null'</span>]</span><br><span class="line">    <span class="string">'''指定可以确定重复数据的字段组合，统一社会信用代码和企业名称的组合可唯一确定一个企业，选这两个字段'''</span></span><br><span class="line">    duplicates_list = [<span class="string">"uniformSocialCreditCode"</span>,<span class="string">"enterpriseName"</span>]</span><br><span class="line">    <span class="string">'''full_list 用来放数据库设计文档中的所有字段 '''</span></span><br><span class="line">    full_list = [<span class="string">"_id"</span>,<span class="string">"uniformSocialCreditCode"</span>,<span class="string">"enterpriseName"</span>,<span class="string">"legalRepresentative"</span>,<span class="string">"provinceCode"</span>]</span><br><span class="line">    <span class="string">'''not_null_list 用来放数据库设计文档中的非空字段'''</span></span><br><span class="line">    not_null_list = [<span class="string">"_id"</span>,<span class="string">"uniformSocialCreditCode"</span>,<span class="string">"enterpriseName"</span>,<span class="string">"provinceCode"</span>]</span><br><span class="line">    <span class="string">'''将测试数据插入到  MongoDB 中'''</span></span><br><span class="line">    mycol.insert_many(mylist)</span><br><span class="line">    <span class="string">'''检查是否存在重复数据'''</span></span><br><span class="line">    check_duplicates(duplicates_list)</span><br><span class="line">    <span class="string">'''检查是否存在字段缺失、包含特殊字符、非空字段为空的数据'''</span></span><br><span class="line">    check(full_list, not_null_list, special_list)</span><br><span class="line">    <span class="string">'''检查 MongoDB 中是否有字段多于'''</span></span><br><span class="line">    check_redundant()</span><br><span class="line"> <span class="keyword">finally</span>:</span><br><span class="line">    <span class="string">'''测试执行完成之后，将插入的测试数据删除，以免第二次运行时插入重复的数据报错'''</span></span><br><span class="line">    myclient.drop_database(<span class="string">"wys_db"</span>)</span><br><span class="line">    print(<span class="string">"--------"</span> + <span class="string">"完成测试"</span> + <span class="string">"--------"</span>)</span><br></pre></td></tr></table></figure><h3 id="测试运行的结脚本"><a href="#测试运行的结脚本" class="headerlink" title="测试运行的结脚本"></a>测试运行的结脚本</h3><p>脚本执行后，会向MongoDB数据库中插入数据，如图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-eb3e972eeaa1293b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MongoDB查询.png"></p><p>测试运行的结果如下：</p><p><code>`</code><br>——–开始测试——–<br>字段  {‘uniformSocialCreditCode’: ‘420001007161050022’, ‘enterpriseName’: ‘某科技公司03’} 的组合存在重复数据<br>字段  {‘uniformSocialCreditCode’: ‘420001007161050020’, ‘enterpriseName’: ‘某科技公司01’} 的组合存在重复数据<br>对比数据库设计文档，存在 uniformSocialCreditCode 字段缺失的记录， 缺失的记录数为：2<br>其中一条 uniformSocialCreditCode 字段缺失的记录为：<br>{‘_id’: 27, ‘enterpriseName’: ‘某科技公司06’, ‘provinceCode’: ‘420008’, ‘createDate’: ‘20190327’}<br>字段： uniformSocialCreditCode 存在异常字符：     ， 记录数为： 1<br>其中的一条包含异常字符       的记录为：<br>{‘_id’: 25, ‘uniformSocialCreditCode’: ‘420             25’, ‘enterpriseName’: ‘某科技公司06’, ‘legalRepresentative’: ‘’, ‘provinceCode’: ‘420006’, ‘createDate’: ‘20190325’}<br>字段： uniformSocialCreditCode 存在异常字符：    ， 记录数为： 1<br>其中的一条包含异常字符      的记录为：<br>{‘_id’: 24, ‘uniformSocialCreditCode’: ‘4200010\t\r\n   24’, ‘legalRepresentative’: ‘张三03’, ‘provinceCode’: ‘420005’, ‘createDate’: ‘20190324’}<br>字段： uniformSocialCreditCode 存在异常字符：<br>， 记录数为： 1<br>其中的一条包含异常字符<br> 的记录为：<br>{‘_id’: 24, ‘uniformSocialCreditCode’: ‘4200010\t\r\n   24’, ‘legalRepresentative’: ‘张三03’, ‘provinceCode’: ‘420005’, ‘createDate’: ‘20190324’}<br>字段： uniformSocialCreditCode 存在异常字符：<br>， 记录数为： 1<br>其中的一条包含异常字符<br> 的记录为：<br>{‘_id’: 24, ‘uniformSocialCreditCode’: ‘4200010\t\r\n   24’, ‘legalRepresentative’: ‘张三03’, ‘provinceCode’: ‘420005’, ‘createDate’: ‘20190324’}<br>数据库设计中 uniformSocialCreditCode 字段非空，存在 uniformSocialCreditCode 字段为空的记录，  为空的记录数为：2<br>其中一条字段为空的记录为：<br>{‘_id’: 29, ‘uniformSocialCreditCode’: ‘’, ‘enterpriseName’: ‘某科技公司19’, ‘legalRepresentative’: ‘’, ‘provinceCode’: ‘420\n ‘, ‘createDate’: ‘20190329’}<br>对比数据库设计文档，存在 enterpriseName 字段缺失的记录， 缺失的记录数为：1<br>其中一条 enterpriseName 字段缺失的记录为：<br>{‘_id’: 24, ‘uniformSocialCreditCode’: ‘4200010\t\r\n   24’, ‘legalRepresentative’: ‘张三03’, ‘provinceCode’: ‘420005’, ‘createDate’: ‘20190324’}<br>字段： enterpriseName 存在异常字符：&lt;html， 记录数为： 1<br>其中的一条包含异常字符 &lt;html 的记录为：<br>{‘_id’: 30, ‘uniformSocialCreditCode’: ‘’, ‘enterpriseName’: ‘某科&lt;html112’, ‘legalRepresentative’: ‘张三11’, ‘provinceCode’: ‘420011’, ‘createDate’: ‘20190330’}<br>数据库设计中 enterpriseName 字段非空，存在 enterpriseName 字段为空的记录，  为空的记录数为：1<br>其中一条字段为空的记录为：<br>{‘_id’: 26, ‘uniformSocialCreditCode’: ‘420001007161050026’, ‘enterpriseName’: ‘’, ‘legalRepresentative’: ‘’, ‘provinceCode’: ‘420007’, ‘createDate’: ‘20190326’}<br>对比数据库设计文档，存在 legalRepresentative 字段缺失的记录， 缺失的记录数为：1<br>其中一条 legalRepresentative 字段缺失的记录为：<br>{‘_id’: 27, ‘enterpriseName’: ‘某科技公司06’, ‘provinceCode’: ‘420008’, ‘createDate’: ‘20190327’}<br>字段： legalRepresentative 存在异常字符：&lt;html， 记录数为： 1<br>其中的一条包含异常字符 &lt;html 的记录为：<br>{‘_id’: 32, ‘uniformSocialCreditCode’: ‘420001007161050032’, ‘enterpriseName’: ‘某科技公司13’, ‘legalRepresentative’: ‘<html>23’, ‘provinceCode’: ‘420013’, ‘createDate’: ‘20190401’}<br>字段： provinceCode 存在异常字符：<br>， 记录数为： 1<br>其中的一条包含异常字符<br> 的记录为：<br>{‘_id’: 29, ‘uniformSocialCreditCode’: ‘’, ‘enterpriseName’: ‘某科技公司19’, ‘legalRepresentative’: ‘’, ‘provinceCode’: ‘420\n ‘, ‘createDate’: ‘20190329’}<br>数据库设计中 provinceCode 字段非空，存在 provinceCode 字段为空的记录，  为空的记录数为：1<br>其中一条字段为空的记录为：<br>{‘_id’: 23, ‘uniformSocialCreditCode’: ‘420001007161050022’, ‘enterpriseName’: ‘某科技公司03’, ‘legalRepresentative’: ‘’, ‘provinceCode’: ‘’, ‘createDate’: ‘20190323’}<br>MongoDB中的记录的字段为：<br>[‘_id’, ‘uniformSocialCreditCode’, ‘enterpriseName’, ‘legalRepresentative’, ‘provinceCode’, ‘createDate’]<br>对比数据库设计文档，MongoDb 中 createDate 字段多余<br>其中的一条 createDate 字段多余的记录为：<br>{‘_id’: 20, ‘uniformSocialCreditCode’: ‘420001007161050020’, ‘enterpriseName’: ‘某科技公司01’, ‘legalRepresentative’: ‘张三01’, ‘provinceCode’: ‘420001’, ‘createDate’: ‘20190320’}<br>——–完成测试——–</html></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://wysh.site/categories/MongoDB/"/>
    
      <category term="大数据" scheme="http://wysh.site/categories/MongoDB/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/MongoDB/%E5%A4%A7%E6%95%B0%E6%8D%AE/Python/"/>
    
    
      <category term="MongoDB" scheme="http://wysh.site/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Selenium Java best</title>
    <link href="http://wysh.site/2019/03/15/Selenium_Java_Best/"/>
    <id>http://wysh.site/2019/03/15/Selenium_Java_Best/</id>
    <published>2019-03-15T13:29:17.000Z</published>
    <updated>2019-04-01T14:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> 最近花了大半个月的时间，用 Java 语言实现了一套 selenium 的自动化测试框架（源代码已提交至GitHub：<a href="https://github.com/wuyongsheng/java_selenium_best" target="_blank" rel="noopener">https://github.com/wuyongsheng/java_selenium_best</a>     ）<br>，把 selenium 自动化测试常用的一些技术都运用到起来了。话不多说，测试运行的效果见下面的动图：</p></blockquote><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="自动化测试运行效果图"><a href="#自动化测试运行效果图" class="headerlink" title="自动化测试运行效果图"></a>自动化测试运行效果图</h3><p>下面的动图展示了自动化测试执行的部分操作，包括登录系统、提交bug、退出系统、登录失败后自动重试。</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a36c73a9f4707843.gif?imageMogr2/auto-orient/strip" alt="用户登录并提交bug.gif"></p><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul><li>使用 java 作为编程语言</li><li>使用 Selenium WebDriver3 驱动浏览器</li><li>使用 eclipse 作为代码编写工具</li><li>使用 Git 进行版本管理，在 eclipse 中安装了 Git 的插件（EGit）方便代码的上传、更新，使用 Github 作为 Git 的远程仓库</li><li>使用 Testng 对测试用例进行管理，同时使用 Reportng 对 Testng 生成的测试报告进行美化</li><li>使用 Maven 对 项目的架包进行管理，同时对项目进行构建</li><li>使用Jenkins作为自动化持续集成工具，自动拉取代码，自动运行测试脚本，自动构建，自动邮件发送测试报告</li></ul><h3 id="业务逻辑介绍"><a href="#业务逻辑介绍" class="headerlink" title="业务逻辑介绍"></a>业务逻辑介绍</h3><ul><li>自动化测试的对象为开源免费版的项目管理软件：禅道系统（之前特意在开源中国上找了一些免费开源的项目，发现很多都功能不全，说明文档也比较简单，操作起来不是很方便）</li><li>测试的功能相对来说比较简单（由于时间有限）：对禅道系统中的7个用户依次执行登录操作、提交 Bug的一系列操作、退出系统操作。</li></ul><h3 id="实现的功能"><a href="#实现的功能" class="headerlink" title="实现的功能"></a>实现的功能</h3><ol><li>实现了基于Selenium，WebDriver 常用操作方法的二次封装，包括（点击，输入，元素定位）等</li><li>实现了失败重试的功能，使用了 Testng 提供的失败重试相关的监听类（IRetryAnalyzer），当测试运行失败时，会重复运行失败的 test 指定的次数，从而减少由于环境的不稳定导致测试运行失败的概率</li><li>加入了测试运行失败自动截图的功能（使用了Testng 对测试结果进行监听的类：TestListenerAdapter，当监听到测试运行失败时，会自动调用自定义的截图方法进行截图，方便定位问题）</li><li>使用 Java的日志系统：log4j 对测试运行的过程进行记录，同时在控制台和日志文件中生成相应的日志记录，方便调试以及定位问题</li><li>使用 Java 的 properties文件对页面元素的定位方式进行存储，当页面元素发生改变时，只用修改 properties 文件，无需改动代码，从而实现了代码与数据的分离</li><li>使用 properties 文件对log4j的 日志 进行配置</li><li>使用 Testng 的 Dataprovider 对用户输入的数据进行参数化，从 Excel 中读取用户输入的数据，从而实现数据驱动</li><li>使用 Reportng 对 Testng 生成的测试报告进行美化</li><li>使用 Testng 对提交 Bug 操作前后，系统中的 Bug 数量进行断言</li><li>使用 Jenkins 发送邮件的插件，将测试执行的结果发送给指定的接收人</li><li>提供对多浏览器的支持（包括 Chrome、Firefox）</li></ol><h3 id="测试环境的准备"><a href="#测试环境的准备" class="headerlink" title="测试环境的准备"></a>测试环境的准备</h3><h4 id="禅道系统"><a href="#禅道系统" class="headerlink" title="禅道系统"></a>禅道系统</h4><p>在禅道系统中添加了 7 个用户，并授予了这 7 个用户提交 Bug<br>的权限，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f755fc6cfd73df3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="禅道.png"></p><h4 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h4><p>将用户登录输入的数据：用户名、密码，以及提交 Bug 输入的数据：Bug 的标题、Bug 的详细信息保存到 Excel 文件中，方便程序读取，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e172e81bc2829cbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用户输入数据png.png"></p><h4 id="软件工具"><a href="#软件工具" class="headerlink" title="软件工具"></a>软件工具</h4><ol><li>搭建测试环境的过程中，需要安装 JDK ，并配置相应的环境变量，这个在网上很容易就能查到，不做介绍</li><li>配置 Maven环境，包括 Maven 环境变量的配置， settings.xml 文件的配置，这部分在网上业很容易就能查到，不做介绍，介绍一下 pom.xml 文件的配置：在 pom.xml 文件中配置需要使用的 jar 包（包括 selenium，testng，log4j 等），以及构建过程中需要用到的插件（maven-compiler-plugin、maven-surefire-plugin等），pom.xml 文件 如下：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wysh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java_selenium_best<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>java_selenium_best<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>6.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.141.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; </span></span><br><span class="line"><span class="comment">&lt;version&gt;3.8.1&lt;/version&gt; &lt;/dependency&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- reportNg的依赖包 关联testNg ， 这个包的主要作用就是对testng原生报告的美化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.jexcelapi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jxl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.uncommons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reportng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guice<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0-beta5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.directory.studio/org.apache.commons.io --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.directory.studio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.apache.commons.io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span> <span class="tag">&lt;<span class="name">property</span>&gt;</span> <span class="tag">&lt;<span class="name">name</span>&gt;</span>usedefaultlisteners<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="tag">&lt;<span class="name">property</span>&gt;</span> <span class="tag">&lt;<span class="name">name</span>&gt;</span>listener<span class="tag">&lt;/<span class="name">name</span>&gt;</span> <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.uncommons.reportng.HTMLReporter<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span> <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suiteXmlFile</span>&gt;</span>src/test/java/testWU.xml<span class="tag">&lt;/<span class="name">suiteXmlFile</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此处testng.xml即为要运行的testng.xml文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;workingDirectory&gt;test-output/&lt;/workingDirectory&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>testng 环境：testng 配置文件的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"Suite"</span> <span class="attr">parallel</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span> =<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"admin"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span> =<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"Aa1234"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"Test_By_Vincent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;class name="wysh.java_selenium_best.Test1"/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;class name="wysh.java_selenium_best.TestLogin"/&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;class name="wysh.selenium.testcase.TestLogin" /&gt;  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"wysh.selenium.testcase.TestLoginAndCommitBug"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">test</span>&gt;</span> <span class="comment">&lt;!-- Test --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listeners</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--     &lt;listener</span></span><br><span class="line"><span class="comment"> &lt;!-- reportNg的依赖包 关联testNg ，这个包的主要作用就是对testng原生报告的美化--&gt;</span></span><br><span class="line">    class-name="org.uncommons.reportng.HTMLReporter" /&gt; --&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"org.uncommons.reportng.JUnitXMLReporter"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"wysh.selenium.util.RetryListener"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener</span> <span class="attr">class-name</span>=<span class="string">"wysh.selenium.util.TestNGListenerScreen"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listeners</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span> <span class="comment">&lt;!-- Suite --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Git 环境：在 eclipse 中 安装 Git 插件：点击 help –&gt; MarketPlace，可以通过如下地址安装：<a href="http://download.eclipse.org/egit/updates" target="_blank" rel="noopener">http://download.eclipse.org/egit/updates</a> ，选择“Eclipse Git Team Provider”，不需要安装其他插件，直到结束。安装结束后，已经安装的插件会显示在 installed 选项卡中</p></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/12273007-ee5403257c71bfef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="egit插件.png"></p><p>通过 EGit ，可以进行代码的提交，更新操作</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a6ae8ccce6489d84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="team.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-84fa7472ef532d47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="commit.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-17674e8eb34545be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="push.png"></p><ol start="5"><li>Jenkins 环境<br>安装jenkins，同时在管理插件中安装相应的插件（包括Maven Integration plugin插件、邮件通知插件、Git 插件等等）</li></ol><p>进入系统管理–&gt;系统设置，设置好Jenkins中的JDK、mavenGithub、邮箱等环境</p><p>添加完毕后，我们开始创建Jenkins 项目：在Jenkins上新建一个自由风格的软件项目–&gt; 在构建中选择lnvoke top-level Maven targets，在项目配置界面，配置源码管理，构建管理，构建后管理，如下图所示：</p><ul><li>源码管理：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-c4097dfd38958dc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="源码管理.png"></p><ul><li>构建管理</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-5ab6dccf8aa44748.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建管理.png"></p><ul><li>构建后管理</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9bd23d214e140a81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建后管理png.png"></p><p>同时，在邮箱通知的 Default Content 填写如下内容，发送邮件时，会将下面的内容添加到邮件的正文中：<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$</span><span class="template-variable">&#123;ENV, var="JOB_NAME"&#125;</span><span class="xml">-第$</span><span class="template-variable">&#123;BUILD_NUMBER&#125;</span><span class="xml">次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span></span></span></span><br><span class="line"><span class="xml">    offset="0"&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span></span></span></span><br><span class="line"><span class="xml">        style="font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0000FF"</span>&gt;</span>$</span><span class="template-variable">&#123;PROJECT_NAME&#125;</span><span class="xml">构建结果 - $</span><span class="template-variable">&#123;BUILD_STATUS&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $</span><span class="template-variable">&#123;PROJECT_NAME&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$</span><span class="template-variable">&#123;BUILD_NUMBER&#125;</span><span class="xml">次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>GIT 版本： $</span><span class="template-variable">&#123;GIT_REVISION&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $</span><span class="template-variable">&#123;CAUSE&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>$</span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="xml"><span class="tag"><span class="string">console"</span>&gt;</span>$</span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="xml">console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>$</span><span class="template-variable">&#123;BUILD_URL&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>生成HTML报告 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml"><span class="tag"><span class="string">HTML_Report"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          $</span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml">HTML_Report<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                   </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>Changes Since Last</span></span><br><span class="line"><span class="xml">                        Successful Build:<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>历史变更记录 : <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml"><span class="tag"><span class="string">changes"</span>&gt;</span>$</span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml">changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> $</span><span class="template-variable">&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format="Changes for Build #%n:&lt;br /&gt;%c&lt;br /&gt;",showPaths=true,changesFormat="</span></span><br><span class="line"><span class="template-variable">&lt;pre&gt;[%a]&lt;br /&gt;%m&lt;/pre&gt;",pathFormat="    %p"&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span></span></span></span><br><span class="line"><span class="xml">                    style="font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"&gt;$FAILED_TESTS<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建日志 (最后 100行):<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;tr&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Test Logs (if test has ran): <span class="tag">&lt;<span class="name">a</span></span></span></span><br><span class="line"><span class="xml">                href="$</span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml">ws/TestResult/archive_logs/Log-Build-$</span><span class="template-variable">&#123;BUILD_NUMBER&#125;</span><span class="xml">.zip"&gt;$</span><span class="template-variable">&#123;PROJECT_URL&#125;</span><span class="xml">/ws/TestResult/archive_logs/Log-Build-$</span><span class="template-variable">&#123;BUILD_NUMBER&#125;</span><span class="xml">.zip<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span> --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"80"</span> <span class="attr">rows</span>=<span class="string">"30"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span></span></span></span><br><span class="line"><span class="xml">                    style="font-family: Courier New"&gt;$</span><span class="template-variable">&#123;BUILD_LOG, maxLines=100&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>当项目创建成功后，可以点击立即构建进行构建，点击控制台输出查看构建日志，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-2285cf40327e5935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建.png"></p><ul><li>控制台输出</li></ul><p>启动jenkins构建后，会在控制台输出构建日志，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-2fbae9473c114df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台日志.png"></p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>项目的目录结构如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-022040f9c20439ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码结构.png"></p><ul><li><p>本项目采用分层的自动化设计模式，以及 PO（页面对象）模型，从下到上依次分为页面（Page）层、操作（Handle）层、业务（Business）层、用例（Case）层，同时还有底层提供支撑的工具（Util）层、浏览器驱动（Base）层，每一层对应一个 Package 。</p></li><li><p>测试运行时，首先执行的是用例层，接着用例层调用业务层，业务层调用操作层，操作层调用页面层，此外，底层的工具（Util）层和浏览器驱动（Base）层为其他各层提供必要的支撑。</p></li><li><p>编写代码时，按照与测试运行逻辑相反的顺序进行编写：先编写底层的工具（Util）层和浏览器驱动（Base）层，接着依次编写页面（Page）层、操作（Handle）层、业（Business）务层、用例（Case）层</p></li></ul><h3 id="执行结果及分析"><a href="#执行结果及分析" class="headerlink" title="执行结果及分析"></a>执行结果及分析</h3><h4 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h4><p>启动 jenkins 构建完成之后，会在 target\surefire-reports\html\ 目录下生成测试报告，点击该目录下的 index.html 文件可以打开测试报告，测试报告如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-4bca6337a9737e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="测试报告.png"></p><p>从测试报告中可以看到，passed 4个，failed 3 个，Skipped     2个。展开测试报告后，会显示详情信息（admin1、user3、user5执行失败，其他的四个用户执行成功，另外的 2 个跳过的是失败重试执行的）：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-7fb60d1e8cd0a332.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="报告_failed.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-45713ad269bf31e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="报告_passed.png"></p><p>测试报告显示的结果与设计的用例的预期一致，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-677998ff300ca5ec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用例分析.jpg"></p><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>通过日志可以对测试执行的过程进行记录，同时也方便定位问题：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-d5585588ade116ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志.png"></p><h4 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h4><p>在 jenkins 中设置无论构建结果构建结果如何，都会发送邮件，构建完成后，会向指定的邮箱发送邮件：</p><p>!<img src="https://upload-images.jianshu.io/upload_images/12273007-0da58f438ad2d7a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邮件通知.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-281878e2e0e77a9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邮件通知1.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Selenium" scheme="http://wysh.site/categories/Selenium/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Java" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Java/"/>
    
    
      <category term="Selenium" scheme="http://wysh.site/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Selenium Python 最佳实战</title>
    <link href="http://wysh.site/2019/02/15/Selenium_Python%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98/"/>
    <id>http://wysh.site/2019/02/15/Selenium_Python最佳实战/</id>
    <published>2019-02-14T16:54:14.000Z</published>
    <updated>2019-04-01T14:01:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> 春节回去后，利用空余时间写了一下 selenium python 的代码，参考了CSDN 和博客园中的一些案例，在代码中使用了unittest 单元测试框架，采用了分层的用例设计（包括页面层，页面元素操作层，业务层，用例层），PO模型（页面对象模型），通过读取 ini 配置文件以及Excel，实现数据与代码的分离，同时也实现了数据驱动、关键字驱动测试，此外在代码中还加入了日志模块，将日志记录到日志文件中以便问题的定位。在测试执行结束之后会自动生成测试报告，并能通过邮件将测试报告进行发送。</p></blockquote><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="模块功能说明"><a href="#模块功能说明" class="headerlink" title="模块功能说明"></a>模块功能说明</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-3762d82d8118bd3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模块说明.png"></p><h3 id="关键字驱动"><a href="#关键字驱动" class="headerlink" title="关键字驱动"></a>关键字驱动</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-0aae8b8e6d21258f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关键字驱动.jpg"></p><h3 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-d15d0635b8d69a3b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="report.jpg"></p><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-6199750f1f00ebb8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邮件发送.jpg"></p><h3 id="github-代码地址"><a href="#github-代码地址" class="headerlink" title="github 代码地址"></a>github 代码地址</h3><p><a href="https://github.com/wuyongsheng/selenium_python_best_practice" target="_blank" rel="noopener">https://github.com/wuyongsheng/selenium_python_best_practice</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Selenium" scheme="http://wysh.site/categories/Selenium/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Python/"/>
    
    
      <category term="Selenium" scheme="http://wysh.site/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Selenium Python常用操作</title>
    <link href="http://wysh.site/2019/01/26/Selenium_Python%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://wysh.site/2019/01/26/Selenium_Python常用操作/</id>
    <published>2019-01-26T15:19:47.000Z</published>
    <updated>2019-01-26T15:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> 自2016年开始接触 web 自动化测试工具 selenium 以来，在网上查阅了很多相关的资料，购买了 selenium 的书籍和视频，在工作中也使用过 selenium ，目前已经能够熟练地使用 Python 及 Java 语言操作 selenium了。这篇笔记用来对 selenium 的一些基本操作进行一个总结。</p></blockquote><h3 id="安装selenium3"><a href="#安装selenium3" class="headerlink" title="安装selenium3"></a>安装selenium3</h3><p>使用 selenium 之前，需要准备好相应的环境：安装 Python（我使用的是Python 3.7），安装 Python 的编辑器（我使用的是eclipse），安装Python 的 selenium 库（可以通过 pip 安装：pip3 install selenium），因为 selenium 是驱动浏览器进行自动化测试的，所有还要准备好浏览器及其驱动（我使用的浏览器是Chrome，驱动是Chromedriver），同时浏览器驱动的版本要和浏览器的版本对应。</p><p>这些网上很容易就能查的到，不做详述。</p><p>基本的环境都准备好了之后，可以通过下面的代码进行测试：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span> = webdriver.Chrome()</span><br><span class="line"><span class="built_in">driver</span>.get(<span class="string">'http://www.wysh.site'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">driver</span>.title)</span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span>.quit()</span><br></pre></td></tr></table></figure></p><p>上面的代码是用来打印网站的标题，，如果能够成功打印网站的标题，说明环境没有问题，运行结果如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-ff9dca61971bf04e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title.jpg"></p><h3 id="selenium3-浏览器驱动"><a href="#selenium3-浏览器驱动" class="headerlink" title="selenium3 浏览器驱动"></a>selenium3 浏览器驱动</h3><p>下载浏览器驱动<br>当selenium升级到3.0之后，对不同的浏览器驱动进行了规范。如果想使用selenium驱动不同的浏览器，必须单独下载并设置不同的浏览器驱动。</p><p>我使用的是Chrome浏览器及其驱动</p><p>Chrome浏览器驱动：chromedriver , <a href="https://npm.taobao.org/mirrors/chromedriver" target="_blank" rel="noopener">taobao地址</a></p><p>我们要下载一个和 Chrome 浏览器版本对应的chromedriver，Chrome浏览器版本和 chromedriver 版本的对应关系可以自行百度。</p><p>接着，将下载好的 chromedriver.exe 放到  Chrome 浏览器的安装目录（chrome.exe 所在的目录）以及 Python 的安装目录（python.exe 所在的目录）。</p><p>最后，我们还要配置环境变量，将Chrome 浏览器的安装目录的路径添加到 Path 环境变量中。</p><p>我的电脑–&gt;属性–&gt;系统设置–&gt;高级–&gt;环境变量–&gt;系统变量–&gt;Path，将Chrome 浏览器的安装目录的路径添加到 Path 环境变量中。</p><ul><li>Path</li><li>;C:\Users\Administrator\AppData\Local\Google\Chrome\Application</li></ul><h3 id="selenium元素定位"><a href="#selenium元素定位" class="headerlink" title="selenium元素定位"></a>selenium元素定位</h3><p>Selenium提供了8种定位方式。</p><ul><li>id</li><li>name</li><li>class name</li><li>tag name</li><li>link text</li><li>partial link text</li><li>xpath</li><li>css selector</li></ul><p>这8种定位方式在Python selenium中所对应的方法为：</p><ul><li>find_element_by_id()</li><li>find_element_by_name()</li><li>find_element_by_class_name()</li><li>find_element_by_tag_name()</li><li>find_element_by_link_text()</li><li>find_element_by_partial_link_text()</li><li>find_element_by_xpath()</li><li>find_element_by_css_selector()</li></ul><p><strong>定位方法的用法</strong></p><p>假如我们有一个Web页面，通过前端工具（如，Firebug）查看到一个元素的属性是这样的。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;body <span class="attribute">link</span>=<span class="string">"#0000cc"</span>&gt;</span><br><span class="line">    &lt;a <span class="attribute">id</span>=<span class="string">"result_logo"</span> <span class="attribute">href</span>=<span class="string">"/"</span> <span class="attribute">onmousedown</span>=<span class="string">"return c(&#123;'fm':'tab','tab':'logo'&#125;)"</span>&gt;</span><br><span class="line">    &lt;form <span class="attribute">id</span>=<span class="string">"form"</span> <span class="attribute">class</span>=<span class="string">"fm"</span> <span class="attribute">name</span>=<span class="string">"f"</span> <span class="attribute">action</span>=<span class="string">"/s"</span>&gt;</span><br><span class="line">      &lt;span <span class="attribute">class</span>=<span class="string">"soutu-btn"</span>&gt;&lt;/span&gt;</span><br><span class="line">        &lt;input <span class="attribute">id</span>=<span class="string">"kw"</span> <span class="attribute">class</span>=<span class="string">"s_ipt"</span> <span class="attribute">name</span>=<span class="string">"wd"</span> <span class="attribute">value</span>=<span class="string">""</span> <span class="attribute">maxlength</span>=<span class="string">"255"</span> <span class="attribute">autocomplete</span>=<span class="string">"off"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>我们的目的是要定位input标签的输入框。</p><ul><li><p>通过id定位:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>id(<span class="string">"kw"</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过name定位:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_n</span>ame(<span class="string">"wd"</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过class name定位:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span><span class="keyword">class</span><span class="number">_n</span>ame(<span class="string">"s_ipt"</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过tag name定位:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>tag<span class="number">_n</span>ame(<span class="string">"input"</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过xpath定位，xpath定位有多种写法，这里列几个常用写法:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath(<span class="string">"//*[@id='kw']"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath(<span class="string">"//*[@name='wd']"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath(<span class="string">"//input[@class='s_ipt']"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath(<span class="string">"/html/body/form/span/input"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath(<span class="string">"//span[@class='soutu-btn']/input"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath(<span class="string">"//form[@id='form']/span/input"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>xpath(<span class="string">"//input[@id='kw' and @name='wd']"</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过css定位，css定位有多种写法，这里列几个常用写法:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector(<span class="string">"#kw"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector(<span class="string">"[name=wd]"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector(<span class="string">".s_ipt"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector(<span class="string">"html &gt; body &gt; form &gt; span &gt; input"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector(<span class="string">"span.soutu-btn&gt; input#kw"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>css<span class="number">_</span>selector(<span class="string">"form#form &gt; span &gt; input"</span>)</span><br></pre></td></tr></table></figure></li></ul><p>接下来，我们的页面上有一组文本链接。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a <span class="attribute">class</span>=<span class="string">"mnav"</span> <span class="attribute">href</span>=<span class="string">"http://news.baidu.com"</span> <span class="attribute">name</span>=<span class="string">"tj_trnews"</span>&gt;新闻&lt;/a&gt;</span><br><span class="line">&lt;a <span class="attribute">class</span>=<span class="string">"mnav"</span> <span class="attribute">href</span>=<span class="string">"http://www.hao123.com"</span> <span class="attribute">name</span>=<span class="string">"tj_trhao123"</span>&gt;hao123&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><ul><li><p>通过link text定位:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>link<span class="number">_</span>text(<span class="string">"新闻"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_</span>link<span class="number">_</span>text(<span class="string">"hao123"</span>)</span><br></pre></td></tr></table></figure></li><li><p>通过link text定位:</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_p</span>artial<span class="number">_</span>link<span class="number">_</span>text(<span class="string">"新"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_p</span>artial<span class="number">_</span>link<span class="number">_</span>text(<span class="string">"hao"</span>)</span><br><span class="line">dr.find<span class="number">_</span>element<span class="number">_</span><span class="meta">by</span><span class="number">_p</span>artial<span class="number">_</span>link<span class="number">_</span>text(<span class="string">"123"</span>)</span><br></pre></td></tr></table></figure></li><li><p>关于xpaht和css的定位比较复杂，可以参考 <a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">w3school</a></p></li></ul><h3 id="控制浏览器操作"><a href="#控制浏览器操作" class="headerlink" title="控制浏览器操作"></a>控制浏览器操作</h3><ul><li>控制浏览器窗口大小</li></ul><p>有时候我们希望能以某种浏览器尺寸打开，让访问的页面在这种尺寸下运行。例如可以将浏览器设置成移动端大小(480* 800)，然后访问移动站点，对其样式进行评估；WebDriver提供了set_window_size()方法来设置浏览器的大小。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.<span class="builtin-name">get</span>(<span class="string">"http://m.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数数字为像素点</span></span><br><span class="line"><span class="builtin-name">print</span>(<span class="string">"设置浏览器宽480、高800显示"</span>)</span><br><span class="line">driver.set_window_size(480, 800)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>在PC端执行自动化测试脚本大多的情况下是希望浏览器在全屏幕模式下执行，那么可以使用maximize_window()方法使打开的浏览器全屏显示，其用法与set_window_size() 相同，但它不需要参数。</p><p>控制浏览器后退、前进<br>在使用浏览器浏览网页时，浏览器提供了后退和前进按钮，可以方便地在浏览过的网页之间切换，WebDriver也提供了对应的back()和forward()方法来模拟后退和前进按钮。下面通过例子来演示这两个方法的使用。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from <span class="selector-tag">time</span> import sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">#访问百度首页</span><br><span class="line">first_url= <span class="string">'http://www.baidu.com'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"now access %s"</span> %(first_url)</span></span>)</span><br><span class="line">driver.get(first_url)</span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"></span><br><span class="line">#访问新闻页面</span><br><span class="line">second_url=<span class="string">'http://news.baidu.com'</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"now access %s"</span> %(second_url)</span></span>)</span><br><span class="line">driver.get(second_url)</span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"></span><br><span class="line">#返回（后退）到百度首页</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"back to  %s "</span>%(first_url)</span></span>)</span><br><span class="line">driver.back()</span><br><span class="line"><span class="function"><span class="title">sleep</span><span class="params">(<span class="number">2</span>)</span></span></span><br><span class="line"></span><br><span class="line">#前进到新闻页</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">"forward to  %s"</span>%(second_url)</span></span>)</span><br><span class="line">driver.forward()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>为了看清脚本的执行过程，下面每操作一步都通过print()来打印当前的URL地址。</p><p>刷新页面<br>有时候需要手动刷新（F5） 页面。<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.refresh() <span class="meta">#刷新当前页面</span></span><br></pre></td></tr></table></figure></p><h3 id="WebDriver常用方法"><a href="#WebDriver常用方法" class="headerlink" title="WebDriver常用方法"></a>WebDriver常用方法</h3><h4 id="点击和输入"><a href="#点击和输入" class="headerlink" title="点击和输入"></a>点击和输入</h4><p>前面我们已经学习了定位元素， 定位只是第一步， 定位之后需要对这个元素进行操作， 或单击（按钮） 或输入（输入框） ， 下面就来认识 WebDriver 中最常用的几个方法：</p><ul><li><p>clear()： 清除文本。</p></li><li><p>send_keys (value)： 模拟按键输入。</p></li><li><p>click()： 单击元素。</p></li></ul><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span> = webdriver.Chrome()</span><br><span class="line"><span class="built_in">driver</span>.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">"kw"</span>).clear()</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"selenium"</span>)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span>.quit()</span><br></pre></td></tr></table></figure><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><ul><li>submit()</li></ul><p>submit()方法用于提交表单。 例如， 在搜索框输入关键字之后的“回车” 操作， 就可以通过该方法模拟。<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span> = webdriver.Chrome()</span><br><span class="line"><span class="built_in">driver</span>.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">"kw"</span>).clear()</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"selenium"</span>)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">"su"</span>).submit()</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span>.quit()</span><br></pre></td></tr></table></figure></p><p>有时候 submit()可以与 click()方法互换来使用， submit()同样可以提交一个按钮， 但 submit()的应用范围远不及 click()广泛。</p><p>其他常用方法</p><ul><li><p>size： 返回元素的尺寸。</p></li><li><p>text： 获取元素的文本。</p></li><li><p>get_attribute(name)： 获得属性值。</p></li><li><p>is_displayed()： 设置该元素是否用户可见。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.<span class="built_in">get</span>(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"># 获得输入框的尺寸</span><br><span class="line"><span class="built_in">size</span> = driver.find_element_by_id(<span class="string">'kw'</span>).<span class="built_in">size</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">size</span>)</span><br><span class="line"></span><br><span class="line"># 返回百度页面底部备案信息</span><br><span class="line"><span class="built_in">text</span> = driver.find_element_by_id(<span class="string">"cp"</span>).<span class="built_in">text</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">text</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></li></ul><p>返回元素的属性值， 可以是 id、 name、 type 或其他任意属性<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">attribute = driver.find_element_by_id(<span class="string">"kw"</span>).get_attribute(<span class="string">'type'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(attribute)</span></span></span><br></pre></td></tr></table></figure></p><p>返回元素的结果是否可见， 返回结果为 True 或 False<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = driver.find_element_by_id(<span class="string">"kw"</span>).is_displayed()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'height'</span>: <span class="number">22</span>, <span class="string">'width'</span>: <span class="number">500</span>&#125;</span><br><span class="line">©<span class="number">2019</span> Baidu 使用百度前必读 意见反馈 京ICP证<span class="number">030173</span>号  京公网安备<span class="number">11000002000001</span>号 </span><br><span class="line"><span class="built_in">text</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p><p>执行上面的程序并查看结果： size 方法用于获取百度输入框的宽、 高， text 方法用于获得百度底部的备案信息，</p><p>get_attribute()用于获得百度输入的 type 属性的值，</p><p>is_displayed()用于返回一个元素是否可见， 如果可见则返回 True， 否则返回 False。</p><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>在 WebDriver 中， 将这些关于鼠标操作的方法封装在 ActionChains 类提供。</p><p>ActionChains 类提供了鼠标操作的常用方法：</p><ul><li><p>perform()： 执行所有 ActionChains 中存储的行为；</p></li><li><p>context_click()： 右击；</p></li><li><p>double_click()： 双击；</p></li><li><p>drag_and_drop()： 拖动；</p></li><li><p>move_to_element()： 鼠标悬停。</p></li></ul><ul><li><strong>鼠标悬停操作</strong></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"><span class="comment"># 引入 ActionChains 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains import ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.<span class="keyword">get</span>(<span class="string">"https://www.baidu.cn"</span>)</span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 定位到要悬停的元素</span></span><br><span class="line"><span class="keyword">above</span> = driver.find_element_by_link_text(<span class="string">"设置"</span>)</span><br><span class="line"><span class="comment"># 对定位到的元素执行鼠标悬停操作</span></span><br><span class="line">ActionChains(driver).move_to_element(<span class="keyword">above</span>).perform()</span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">from</span> <span class="keyword">selenium.webdriver </span><span class="meta">import</span> ActionChains</span><br></pre></td></tr></table></figure><p>导入提供鼠标操作的 ActionChains 类。</p><p>ActionChains(driver)</p><p>调用 ActionChains()类， 将浏览器驱动 driver 作为参数传入。</p><p>move_to_element(above)</p><p>context_click()方法用于模拟鼠标右键操作， 在调用时需要指定元素定位。</p><p>perform()<br>执行所有 ActionChains 中存储的行为， 可以理解成是对整个操作的提交动作。 </p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>Keys()类提供了键盘上几乎所有按键的方法。 前面了解到， send_keys()方法可以用来模拟键盘输入， 除此 之外， 我们还可以用它来输入键盘上的按键， 甚至是组合键， 如 Ctrl+A、 Ctrl+C 等。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"><span class="meta"># 引入 Keys 模块</span></span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta"># 输入框输入内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"seleniumm"</span>)</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta"># 删除多输入的一个 m</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(Keys.BACK_SPACE)</span><br><span class="line"></span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta"># 输入空格键+“教程”</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(Keys.SPACE)</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"教程"</span>)</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta"># ctrl+a 全选输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(Keys.CONTROL, 'a')</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta"># ctrl+x 剪切输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(Keys.CONTROL, 'x')</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta"># ctrl+v 粘贴内容到输入框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(Keys.CONTROL, 'v')</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"><span class="meta"># 通过回车键来代替单击操作</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).send_keys(Keys.ENTER)</span><br><span class="line"><span class="built_in">time</span>.<span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>需要说明的是， 上面的脚本没有什么实际意义， 仅向我们展示模拟键盘各种按键与组合键的用法。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.common</span><span class="selector-class">.keys</span> import Keys</span><br></pre></td></tr></table></figure></p><p>在使用键盘按键方法前需要先导入 keys 类。</p><p>以下为常用的键盘操作：</p><ul><li><p>send_keys(Keys.BACK_SPACE) 删除键（BackSpace）</p></li><li><p>send_keys(Keys.SPACE) 空格键(Space)</p></li><li><p>send_keys(Keys.TAB) 制表键(Tab)</p></li><li><p>send_keys(Keys.ESCAPE) 回退键（Esc）</p></li><li><p>send_keys(Keys.ENTER) 回车键（Enter）</p></li><li><p>send_keys(Keys.CONTROL,’a’) 全选（Ctrl+A）</p></li><li><p>send_keys(Keys.CONTROL,’c’) 复制（Ctrl+C）</p></li><li><p>send_keys(Keys.CONTROL,’x’) 剪切（Ctrl+X）</p></li><li><p>send_keys(Keys.CONTROL,’v’) 粘贴（Ctrl+V）</p></li><li><p>send_keys(Keys.F1) 键盘 F1</p></li><li><p>……</p></li><li><p>send_keys(Keys.F12) 键盘 F12</p></li></ul><h3 id="获取断言信息"><a href="#获取断言信息" class="headerlink" title="获取断言信息"></a>获取断言信息</h3><p>不管是在做功能测试还是自动化测试，最后一步需要拿实际结果与预期进行比较。这个比较称之为断言。</p><p>我们通常可以通过获取title 、URL和 text 等信息进行断言。text 方法在前面已经讲过，它用于获取标签对之间的文本信息。 下面同样以百度为例，介绍如何获取这些信息。<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from <span class="built_in">time</span> import <span class="built_in">sleep</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>('Before search================')</span><br><span class="line"></span><br><span class="line"><span class="meta"># 打印当前页面title</span></span><br><span class="line"><span class="built_in">title</span> = driver.<span class="built_in">title</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">title</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 打印当前页面URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line"><span class="keyword">print</span>(now_url)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"selenium"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>('After search================')</span><br><span class="line"></span><br><span class="line"><span class="meta"># 再次打印当前页面title</span></span><br><span class="line"><span class="built_in">title</span> = driver.<span class="built_in">title</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">title</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 打印当前页面URL</span></span><br><span class="line">now_url = driver.current_url</span><br><span class="line"><span class="keyword">print</span>(now_url)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 获取结果数目</span></span><br><span class="line">user = driver.find_element_by_class_name('nums').text</span><br><span class="line"><span class="keyword">print</span>(user)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>脚本运行结果如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Before <span class="built_in">search</span>================</span><br><span class="line">百度一下，你就知道</span><br><span class="line">http<span class="variable">s:</span>//www.baidu.<span class="keyword">com</span>/</span><br><span class="line">After <span class="built_in">search</span>================</span><br><span class="line">selenium_百度搜索</span><br><span class="line">http<span class="variable">s:</span>//www.baidu.<span class="keyword">com</span>/s?ie=utf-<span class="number">8</span>&amp;<span class="keyword">f</span>=<span class="number">8</span>&amp;rsv_bp=<span class="number">0</span>&amp;rsv_idx=<span class="number">1</span>&amp;<span class="keyword">tn</span>=baidu&amp;wd=selenium&amp;rsv_pq=db3e8f63000a6edc&amp;rsv_t=<span class="number">7841</span>E0UXWIO0Nol1kjIjMzDYAdvgaLaT0yVYxm7ixq1GrySrvsDw%<span class="number">2</span>Be26Cx0&amp;rqlang=<span class="keyword">cn</span>&amp;rsv_enter=<span class="number">0</span>&amp;rsv_sug3=<span class="number">8</span>&amp;rsv_sug1=<span class="number">2</span>&amp;rsv_sug7=<span class="number">100</span>&amp;inputT=<span class="number">477</span>&amp;rsv_sug4=<span class="number">478</span></span><br><span class="line">搜索工具</span><br><span class="line">百度为您找到相关结果约<span class="number">17</span>,<span class="number">300</span>,<span class="number">000</span>个</span><br></pre></td></tr></table></figure></p><ul><li><p>title：用于获得当前页面的标题。</p></li><li><p>current_url：用户获得当前页面的URL。</p></li><li><p>text：获取搜索条目的文本信息。</p></li></ul><h3 id="设置元素等待"><a href="#设置元素等待" class="headerlink" title="设置元素等待"></a>设置元素等待</h3><p>WebDriver提供了两种类型的等待：显式等待和隐式等待。</p><h4 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h4><p>显式等待使WebdDriver等待某个条件成立时继续执行，否则在达到最大时长时抛出超时异常（TimeoutException）。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.common</span><span class="selector-class">.by</span> import By</span><br><span class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.support</span><span class="selector-class">.ui</span> import WebDriverWait</span><br><span class="line">from selenium<span class="selector-class">.webdriver</span><span class="selector-class">.support</span> import expected_conditions as EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line">element = WebDriverWait(driver, <span class="number">5</span>, <span class="number">0.5</span>).until(</span><br><span class="line">                      EC.presence_of_element_located((By<span class="selector-class">.ID</span>, <span class="string">"kw"</span>))</span><br><span class="line">                      )</span><br><span class="line">element.send_keys(<span class="string">'selenium'</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>WebDriverWait类是由WebDirver 提供的等待方法。在设置时间内，默认每隔一段时间检测一次当前页面元素是否存在，如果超过设置时间检测不到则抛出异常。具体格式如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebDriverWait(driver, timeout, <span class="attribute">poll_frequency</span>=0.5, <span class="attribute">ignored_exceptions</span>=None)</span><br><span class="line">`</span><br></pre></td></tr></table></figure></p><p>driver ：浏览器驱动。</p><p>timeout ：最长超时时间，默认以秒为单位。</p><p>poll_frequency ：检测的间隔（步长）时间，默认为0.5S。</p><p>ignored_exceptions ：超时后的异常信息，默认情况下抛NoSuchElementException异常。</p><p>WebDriverWait()一般由until()或until_not()方法配合使用，下面是until()和until_not()方法的说明。</p><p>until(method, message=‘’)<br>调用该方法提供的驱动程序作为一个参数，直到返回值为True。</p><p>until_not(method, message=‘’)<br>调用该方法提供的驱动程序作为一个参数，直到返回值为False。</p><p>在本例中，通过as关键字将expected_conditions 重命名为EC，并调用presence_of_element_located()方法判断元素是否存在。</p><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p>WebDriver提供了implicitly_wait()方法来实现隐式等待，默认设置为0。它的用法相对来说要简单得多。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> ctime</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置隐式等待为10秒</span></span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(ctime())</span><br><span class="line">    driver.find_element_by_id(<span class="string">"kw22"</span>).send_keys(<span class="string">'selenium'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(ctime())</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure></p><p>implicitly_wait() 默认参数的单位为秒，本例中设置等待时长为10秒。</p><p>首先这10秒并非一个固定的等待时间，它并不影响脚本的执行速度。其次，它并不针对页面上的某一元素进行等待。当脚本执行到某个元素定位时，如果元素可以定位，则继续执行；如果元素定位不到，则它将以轮询的方式不断地判断元素是否被定位到。假设在第6秒定位到了元素则继续执行，若直到超出设置时长（10秒）还没有定位到元素，则抛出异常。</p><h3 id="定位一组元素"><a href="#定位一组元素" class="headerlink" title="定位一组元素"></a>定位一组元素</h3><p>WebDriver还提供了8种用于定位一组元素的方法。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">find_elements_by_id</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">find_elements_by_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">find_elements_by_class_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">find_elements_by_tag_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">find_elements_by_link_text</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">find_elements_by_partial_link_text</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">find_elements_by_xpath</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">find_elements_by_css_selector</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p><p>定位一组元素的方法与定位单个元素的方法类似，唯一的区别是在单词element后面多了一个s表示复数。</p><p>接下来通过例子演示定位一组元素的使用：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"wysh.site"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位一组元素</span></span><br><span class="line">texts = driver.find_elements_by_xpath(<span class="string">'//div/h3/a'</span>)</span><br><span class="line"><span class="built_in">print</span>(texts)</span><br><span class="line"><span class="comment"># 循环遍历出每一条搜索结果的标题</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> texts:</span><br><span class="line">    <span class="built_in">print</span>(t.text)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>程序运行结果：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vincent<span class="string">'s Home</span></span><br><span class="line"><span class="string">“wysh.site”的权重综合查询结果 - 站长工具</span></span><br><span class="line"><span class="string">WYSH AM 1380 – Anderson County'</span>s Classic Hit Country!</span><br><span class="line">Wyshmaster - Wikipedia</span><br><span class="line">Wysh <span class="built_in">Data</span> Systems Limited Hong Kong company address, contacts<span class="params">...</span></span><br><span class="line">WyshmasterBeats.com</span><br><span class="line">ORPD: <span class="number">3</span> arrested after alleged robbery – WYSH AM <span class="number">1380</span></span><br><span class="line">neets</span><br><span class="line">NHL Wysh <span class="built_in">List</span>: NHL players deserve better than this</span><br><span class="line">Games - Bigpoint</span><br></pre></td></tr></table></figure></p><h3 id="多表单切换"><a href="#多表单切换" class="headerlink" title="多表单切换"></a>多表单切换</h3><p>在Web应用中经常会遇到frame/iframe表单嵌套页面的应用，WebDriver只能在一个页面上对元素识别与定位，对于frame/iframe表单内嵌页面上的元素无法直接定位。这时就需要通过switch_to.frame()方法将当前定位的主体切换为frame/iframe表单的内嵌页面中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">"x-URS-iframe1548501566204.4119"</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">           ...</span><br><span class="line">           <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"email"</span> &gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-91541215f95b41b8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="frame.jpg"></p><p>126邮箱登录框的结构大概是这样子的，想要操作登录框必须要先切换到iframe表单。</p><p>可以查出，页面只提供了 frame 的 id ，并且 id 是变化的，这样就无法通过 id 进行定位了</p><p>对于变化的 id 的 frame 元素的定位，可以参考下面的链接：</p><p><a href="https://blog.csdn.net/genius_man/article/details/80903291" target="_blank" rel="noopener">https://blog.csdn.net/genius_man/article/details/80903291</a></p><p>我是先通过 xpath 找到该 frame 上一级，再在该 xpath 路径后面加上 /iframe ，就可以定位该 frame 了。</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e448b163c6394fc6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iframe上一层元素.jpg"></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"><span class="keyword">from</span> <span class="built_in">time</span> import  <span class="built_in">sleep</span></span><br><span class="line"><span class="built_in">driver</span> = webdriver.Chrome()</span><br><span class="line"><span class="built_in">driver</span>.get(<span class="string">"http://www.126.com"</span>)</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line">i=<span class="built_in">driver</span>.find_element_by_xpath(<span class="string">'//*[@id="loginDiv"]/iframe'</span>)</span><br><span class="line"><span class="built_in">driver</span>.switch_to.frame(i)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_name(<span class="string">"email"</span>).clear()</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_name(<span class="string">"email"</span>).send_keys(<span class="string">"username"</span>)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_name(<span class="string">"password"</span>).clear()</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_name(<span class="string">"password"</span>).send_keys(<span class="string">"password"</span>)</span><br><span class="line"><span class="built_in">driver</span>.find_element_by_id(<span class="string">"dologin"</span>).click()</span><br><span class="line"><span class="built_in">driver</span>.switch_to.default_content()</span><br><span class="line"></span><br><span class="line"><span class="built_in">driver</span>.quit()</span><br></pre></td></tr></table></figure><p>switch_to.frame() 默认可以直接取表单的id 或name属性。如果iframe没有可用的id和name属性，则可以通过下面的方式进行定位。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">#先通过xpth定位到iframe</span><br><span class="line">xf = driver.find_element_by_xpath(<span class="string">'//*[@id="x-URS-iframe"]'</span>)</span><br><span class="line"></span><br><span class="line">#再将定位对象传给switch_to.frame()方法</span><br><span class="line">driver<span class="selector-class">.switch_to</span><span class="selector-class">.frame</span>(xf)</span><br><span class="line">……</span><br><span class="line">driver<span class="selector-class">.switch_to</span><span class="selector-class">.parent_frame</span>()</span><br></pre></td></tr></table></figure></p><p>除此之外，在进入多级表单的情况下，还可以通过switch_to.default_content()跳回最外层的页面。</p><h3 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h3><p>在页面操作过程中有时候点击某个链接会弹出新的窗口，这时就需要主机切换到新打开的窗口上进行操作。WebDriver提供了switch_to.window()方法，可以实现在不同的窗口之间切换。 以百度首页和百度注册页为例，在两个窗口之间的切换如下图。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得百度搜索窗口句柄</span></span><br><span class="line">sreach_windows = driver.current_window_handle</span><br><span class="line"></span><br><span class="line">driver.find_element_by_link_text(<span class="string">'登录'</span>).click()</span><br><span class="line">driver.find_element_by_link_text(<span class="string">"立即注册"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得当前所有打开的窗口的句柄</span></span><br><span class="line">all_handles = driver.window_handles</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入注册窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> all_handles:</span><br><span class="line">        <span class="built_in">print</span>(handle)</span><br><span class="line">        driver.switch_to.<span class="built_in">window</span>(handle)</span><br><span class="line">        <span class="keyword">if</span>(driver.title==<span class="string">'注册百度帐号'</span>):</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">'now register window!'</span>)</span><br><span class="line">           driver.find_element_by_id(<span class="string">"TANGRAM__PSP_3__userName"</span>).send_keys(<span class="string">'username'</span>)</span><br><span class="line">           driver.find_element_by_id(<span class="string">"TANGRAM__PSP_3__phone"</span>).send_keys(<span class="string">'18574848987'</span>)</span><br><span class="line">           driver.find_element_by_id(<span class="string">'TANGRAM__PSP_3__verifyCode'</span>).send_keys(<span class="string">'7874'</span>)</span><br><span class="line">           time.sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>在本例中所涉及的新方法如下：</p><ul><li><p>current_window_handle：获得当前窗口句柄。</p></li><li><p>window_handles：返回所有窗口的句柄到当前会话。</p></li><li><p>switch_to.window()：用于切换到相应的窗口，与上一节的switch_to.frame()类似，前者用于不同窗口的切换，后者用于不同表单之间的切换。</p></li></ul><h3 id="警告框处理"><a href="#警告框处理" class="headerlink" title="警告框处理"></a>警告框处理</h3><p>在WebDriver中处理JavaScript所生成的alert、confirm以及prompt十分简单，具体做法是使用 switch_to.alert 方法定位到 alert/confirm/prompt，然后使用 text/accept/dismiss/ send_keys等方法进行操作。</p><ul><li><p>text：返回 alert/confirm/prompt 中的文字信息。</p></li><li><p>accept()：接受现有警告框。</p></li><li><p>dismiss()：解散现有警告框。</p></li><li><p>send_keys(keysToSend)：</p></li></ul><p>发送文本至警告框。keysToSend：将文本发送至警告框。</p><p>百度搜索设置弹出的窗口是不能通过前端工具对其进行定位的，这个时候就可以通过switch_to_alert()方法接受这个弹窗。<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> selenium import webdriver</span><br><span class="line"><span class="built_in">from</span> selenium.webdriver.common.action_chains import ActionChains</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.<span class="built_in">get</span>(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标悬停至“设置”链接</span></span><br><span class="line">link = driver.find_element_by_link_text(<span class="string">'设置'</span>)</span><br><span class="line">ActionChains(driver).move_to_element(link).perform()</span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">"搜索设置"</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存设置</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">"prefpanelgo"</span>).click()</span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受警告框</span></span><br><span class="line">driver.switch_to.alert.accept()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>通过switch_to_alert()方法获取当前页面上的警告框，并使用accept()方法接受警告框。</p><h3 id="下拉框选择"><a href="#下拉框选择" class="headerlink" title="下拉框选择"></a>下拉框选择</h3><p>有时我们会碰到下拉框，WebDriver提供了Select类来处理下拉框。 如百度搜索设置的下拉框，如下图：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.support.<span class="keyword">select</span> import <span class="keyword">Select</span></span><br><span class="line">from time import <span class="built_in">sleep</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 鼠标悬停至“设置”链接</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">'设置'</span>).click()</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">1</span>)</span><br><span class="line"><span class="meta"># 打开搜索设置</span></span><br><span class="line">driver.find_element_by_link_text(<span class="string">"搜索设置"</span>).click()</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 搜索结果显示条数</span></span><br><span class="line">sel = driver.find_element_by_xpath(<span class="string">'//*[@id="nr"]'</span>)</span><br><span class="line"><span class="keyword">Select</span>(sel).select_by_value(<span class="string">'50'</span>)  <span class="meta"># 显示50条</span></span><br><span class="line"><span class="meta"># ……</span></span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>Select类用于定位select标签。</p><p>select_by_value() 方法用于定位下接选项中的value值。</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>对于通过input标签实现的上传功能，可以将其看作是一个输入框，即通过send_keys()指定本地文件路径的方式实现文件上传。</p><p>创建upfile.html文件，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>upload_file<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"span6 well"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>upload_file<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.js"</span>&gt;</span><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">scrip</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></p><p>通过浏览器打开upfile.html文件</p><p>接下来通过send_keys()方法来实现文件上传。<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">file_path = <span class="string">'file:///'</span> + os.<span class="built_in">path</span>.abspath(<span class="string">'upfile.html'</span>)</span><br><span class="line">driver.get(file_path)</span><br><span class="line"></span><br><span class="line"># 定位上传按钮，添加本地文件</span><br><span class="line">driver.find_element_by_name(<span class="string">"file"</span>).send_keys(<span class="string">'C:\\1.json'</span>)</span><br><span class="line"><span class="built_in">time</span>.sleep(<span class="number">2</span>)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><h3 id="cookie操作"><a href="#cookie操作" class="headerlink" title="cookie操作"></a>cookie操作</h3><p>WebDriver提供了操作Cookie的相关方法，可以读取、添加和删除cookie信息。</p><p>WebDriver操作cookie的方法：</p><ul><li><p>get_cookies()： 获得所有cookie信息。</p></li><li><p>get_cookie(name)： 返回字典的key为“name”的cookie信息。</p></li><li><p>add_cookie(cookie_dict) ： 添加cookie。“cookie_dict”指字典对象，必须有name 和value 值。</p></li><li><p>delete_cookie(name,optionsString)：删除cookie信息。“name”是要删除的cookie的名称，“optionsString”是该cookie的选项，目前支持的选项包括“路径”，“域”。</p></li><li><p>delete_all_cookies()： 删除所有cookie信息。</p></li></ul><p>下面通过get_cookies()来获取当前浏览器的cookie信息。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.<span class="builtin-name">get</span>(<span class="string">"http://www.youdao.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得cookie信息</span></span><br><span class="line">cookie= driver.get_cookies()</span><br><span class="line"><span class="comment"># 将获得cookie的信息打印</span></span><br><span class="line"><span class="comment"># print(cookie)</span></span><br><span class="line"><span class="keyword">for</span> co <span class="keyword">in</span> cookie:</span><br><span class="line">    <span class="builtin-name">print</span>(co)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'domain'</span>: <span class="string">'.youdao.com'</span>, <span class="string">'expiry'</span>: <span class="number">2494590734.754279</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'OUTFOX_SEARCH_USER_ID'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'1267639462@140.143.13.152'</span>&#125;</span><br><span class="line">&#123;<span class="string">'domain'</span>: <span class="string">'.youdao.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'DICT_UGC'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'be3af0da19b5c5e6aa4e17bd8d90b28a|'</span>&#125;</span><br><span class="line">&#123;<span class="string">'domain'</span>: <span class="string">'.youdao.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'JSESSIONID'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'abcbpPPBkALbF4DFQBkIw'</span>&#125;</span><br><span class="line">&#123;<span class="string">'domain'</span>: <span class="string">'www.youdao.com'</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'___rl__test__cookies'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'1548510735530'</span>&#125;</span><br><span class="line">&#123;<span class="string">'domain'</span>: <span class="string">'.youdao.com'</span>, <span class="string">'expiry'</span>: <span class="number">1611582735</span>, <span class="string">'httpOnly'</span>: <span class="literal">False</span>, <span class="string">'name'</span>: <span class="string">'OUTFOX_SEARCH_USER_ID_NCOO'</span>, <span class="string">'path'</span>: <span class="string">'/'</span>, <span class="string">'secure'</span>: <span class="literal">False</span>, <span class="string">'value'</span>: <span class="string">'386788178.03478056'</span>&#125;</span><br></pre></td></tr></table></figure></p><p>从执行结果可以看出，cookie数据是以字典的形式进行存放的。知道了cookie的存放形式，接下来我们就可以按照这种形式向浏览器中写入cookie信息。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">"http://www.youdao.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向cookie的name 和value中添加会话信息</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'key-aaaaaaa'</span>, <span class="string">'value'</span>: <span class="string">'value-bbbbbb'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历cookies中的name 和value信息并打印，当然还有上面添加的信息</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%s -&gt; %s"</span> % (cookie[<span class="string">'name'</span>], cookie[<span class="string">'value'</span>]))</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">key-aaaaaaa -&gt; value-bbbbbb</span><br><span class="line">OUTFOX_SEARCH_USER_ID -&gt; <span class="number">-782777771</span>@<span class="number">140.143</span><span class="number">.13</span><span class="number">.152</span></span><br><span class="line">DICT_UGC -&gt; be3af0da19b5c5e6aa4e17bd8d90b28a|<span class="type"></span></span><br><span class="line"><span class="type">JSESSIONID</span> -&gt; abc9gSVPkxH8neIBRCkIw</span><br><span class="line">___rl__test__cookies -&gt; <span class="number">1548511001792</span></span><br><span class="line">OUTFOX_SEARCH_USER_ID_NCOO -&gt; <span class="number">1032700391.184119</span></span><br></pre></td></tr></table></figure></p><p>从执行结果可以看到，第一条cookie信息是在脚本执行过程中通过add_cookie()方法添加的。通过遍历得到所有的cookie信息，从而找到key为“name”和“value”的特定cookie的value。</p><h3 id="调用JavaScript代码"><a href="#调用JavaScript代码" class="headerlink" title="调用JavaScript代码"></a>调用JavaScript代码</h3><p>虽然WebDriver提供了操作浏览器的前进和后退方法，但对于浏览器滚动条并没有提供相应的操作方法。在这种情况下，就可以借助JavaScript来控制浏览器的滚动条。WebDriver提供了execute_script()方法来执行JavaScript代码。</p><p>用于调整浏览器滚动条位置的JavaScript代码如下：</p><!-- window.scrollTo(左边距,上边距); --><p>window.scrollTo(0,450);<br>window.scrollTo()方法用于设置浏览器窗口滚动条的水平和垂直位置。方法的第一个参数表示水平的左间距，第二个参数表示垂直的上边距。其代码如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium import webdriver</span><br><span class="line"><span class="keyword">from</span> time import sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问百度</span></span><br><span class="line"><span class="attribute">driver</span>=webdriver.Chrome()</span><br><span class="line">driver.<span class="builtin-name">get</span>(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浏览器窗口大小</span></span><br><span class="line">driver.set_window_size(700, 700)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"kw"</span>).send_keys(<span class="string">"selenium"</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">"su"</span>).click()</span><br><span class="line">sleep(2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过javascript设置浏览器窗口的滚动条位置</span></span><br><span class="line"><span class="attribute">js</span>=<span class="string">"window.scrollTo(100,450);"</span></span><br><span class="line">driver.execute_script(js)</span><br><span class="line">sleep(3)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>通过浏览器打开百度进行搜索，并且提前通过set_window_size()方法将浏览器窗口设置为固定宽高显示，目的是让窗口出现水平和垂直滚动条。然后通过execute_script()方法执行JavaScripts代码来移动滚动条的位置。</p><h3 id="窗口截图"><a href="#窗口截图" class="headerlink" title="窗口截图"></a>窗口截图</h3><p>自动化用例是由程序去执行的，因此有时候打印的错误信息并不十分明确。如果在脚本执行出错的时候能对当前窗口截图保存，那么通过图片就可以非常直观地看出出错的原因。WebDriver提供了截图函数get_screenshot_as_file()来截取当前窗口。<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">'selenium'</span>)</span><br><span class="line">driver.find_element_by_id(<span class="string">'su'</span>).click()</span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># 截取当前窗口，并指定截图图片的保存位置</span><br><span class="line">driver.get_screenshot_as_file(<span class="string">"D:\\baidu_img.jpg"</span>)</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure></p><p>脚本运行完成后打开C盘，就可以找到baidu_img.jpg图片文件了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Selenium" scheme="http://wysh.site/categories/Selenium/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/Python/"/>
    
    
      <category term="Selenium" scheme="http://wysh.site/tags/Selenium/"/>
    
  </entry>
  
  <entry>
    <title>Python对Elasticsearch的基本操作</title>
    <link href="http://wysh.site/2019/01/23/Python%E5%AF%B9Elasticsearch%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://wysh.site/2019/01/23/Python对Elasticsearch的基本操作/</id>
    <published>2019-01-22T16:01:54.000Z</published>
    <updated>2019-04-05T13:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>在公司的大数据项目中，经常涉及对elasticsearch的查询操作，也会涉及利用Python对elasticsearch的数据的进行存取，为了系统地学习用Python语言操作elasticsearch，最近查阅了网上的一些资料，发现CSDN上有两篇文章写得很好，这篇笔记主要参考了这两篇文章（文末会附上这两篇文章的链接）</p></blockquote><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="Python-Elasticsearch-Clien-的介绍"><a href="#Python-Elasticsearch-Clien-的介绍" class="headerlink" title="Python Elasticsearch Clien 的介绍"></a>Python Elasticsearch Clien 的介绍</h3><p>Elasticsearch 的语法在前面写的笔记中已有介绍，这里只介绍通过Python操作elasticsearch。</p><p>Elasticsearch 不仅仅是一个开源的全文搜索引擎，它还是一个分布式实时分析搜索引擎，同时它还是支持分布式的实时文档存储，每个字段可以被索引与搜索，支持 PB 级别的结构化或者非结构化数据。</p><p>Elasticsearch 提供了一系列 Restful API 来进行存取和查询操作，我们可以使用 curl 等命令来进行操作，但毕竟命令行模式没那么方便，所以这里我们就直接介绍利用 Python 来对接 Elasticsearch 的相关方法。</p><p>用 Python 操作 elasticsearch 可以使用 Python Elasticsearch Client，它是ES官方推荐的python客户端，这里以它为工具操作elasticsearch。</p><p>关于 Python Elasticsearch Client ，官方给出了相关的文档，，所有的用法都可以在文档里查的到，包括方法的说明、参数及返回值等。地址如下：</p><p><a href="https://elasticsearch-py.readthedocs.io/en/master/api.html" target="_blank" rel="noopener">https://elasticsearch-py.readthedocs.io/en/master/api.html</a></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-fcfb173f32384b26.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Python-elasticsearch.jpg"></p><ul><li>Python 中对接 Elasticsearch</li></ul><p>使用的是一个同名的库，安装方式非常简单：</p><p>pip3 install elasticsearch</p><h3 id="创建-Index"><a href="#创建-Index" class="headerlink" title="创建 Index"></a>创建 Index</h3><p>在操作之前，我们先来看一下 elasticsearch 中有哪些索引，我们可以访问这个链接：</p><p><a href="http://localhost:9200/_cat/indices?v" target="_blank" rel="noopener">http://localhost:9200/_cat/indices?v</a></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-43a241f4a2f4e7c8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看所有的索引.jpg"></p><p>可以看到，elasticsearch 中现在没有名称为 bank 的索引，下面我们使用 Python 来创建一个名为 bank 的 索引：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch import Elasticsearch</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br><span class="line">result = es.indices.create(<span class="attribute">index</span>=<span class="string">'bank'</span>, <span class="attribute">ignore</span>=400)</span><br><span class="line"><span class="builtin-name">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出的结果如下：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">'acknowledged</span>': <span class="literal">True</span>, <span class="symbol">'shards_acknowledged</span>': <span class="literal">True</span>, <span class="symbol">'index</span>': <span class="symbol">'bank</span>'&#125;</span><br></pre></td></tr></table></figure></p><p>我们再次访问：<br><a href="http://localhost:9200/_cat/indices?v" target="_blank" rel="noopener">http://localhost:9200/_cat/indices?v</a><br>发现索引创建成功了</p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>删除 Index 也是类似的，代码如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from elasticsearch import Elasticsearch</span><br><span class="line"></span><br><span class="line">es = Elasticsearch()</span><br><span class="line">result = es<span class="selector-class">.indices</span><span class="selector-class">.delete</span>(index=<span class="string">'bank'</span>, ignore=[<span class="number">400</span>, <span class="number">404</span>])</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></span><br></pre></td></tr></table></figure></p><p>返回结果如下：<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">'acknowledged</span>': <span class="literal">True</span>&#125;</span><br></pre></td></tr></table></figure></p><p>我们再次访问：<br><a href="http://localhost:9200/_cat/indices?v" target="_blank" rel="noopener">http://localhost:9200/_cat/indices?v</a><br>发现索引被删除了</p><h3 id="增加一条文档"><a href="#增加一条文档" class="headerlink" title="增加一条文档"></a>增加一条文档</h3><p>通过以下代码可以增加一条文档：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line">es = Elasticsearch([&#123;<span class="string">"host"</span>:<span class="string">"localhost"</span>,<span class="string">"port"</span>:<span class="number">9200</span>&#125;])</span><br><span class="line">b= &#123;<span class="string">"name"</span>: <span class="string">'lu'</span>, <span class="string">'sex'</span>:<span class="string">'female'</span>, <span class="string">'age'</span>: <span class="number">10</span>&#125;</span><br><span class="line">es.index(index=<span class="string">'bank'</span>, doc_type=<span class="string">'typeName'</span>,body=b,id=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>代码执行完成之后，我们在 kibana 里面查询 bank 索引中的数据，发现新增的文档已经被插入到索引中：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-3e329f44e59a826a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插入数据.jpg"></p><h3 id="增加一条文档-1"><a href="#增加一条文档-1" class="headerlink" title="增加一条文档"></a>增加一条文档</h3><p>通过以下代码可以删除一条文档<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch import Elasticsearch</span><br><span class="line">es = Elasticsearch([&#123;<span class="string">"host"</span>:<span class="string">"localhost"</span>,<span class="string">"port"</span>:9200&#125;])</span><br><span class="line">es.delete(<span class="attribute">index</span>=<span class="string">'bank'</span>, <span class="attribute">doc_type</span>=<span class="string">'typeName'</span>, <span class="attribute">id</span>=<span class="string">"AWh2Jj_Ey6XG0WYYFrgI"</span>)</span><br></pre></td></tr></table></figure></p><p>在代码中，我们传入文档的 id ，代码执行完成后，我们在kibana中查询 bank 索引，发现文档被删除了，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-c7b8a80242a840b5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="删除文档.jpg"></p><h3 id="修改一条文档"><a href="#修改一条文档" class="headerlink" title="修改一条文档"></a>修改一条文档</h3><p>通过以下代码可以修改一条文档<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from elasticsearch <span class="keyword">import</span> Elasticsearch</span><br><span class="line">es = Elasticsearch([&#123;<span class="string">"host"</span>:<span class="string">"localhost"</span>,<span class="string">"port"</span>:<span class="number">9200</span>&#125;])</span><br><span class="line"></span><br><span class="line">b= &#123;<span class="string">"name"</span>: <span class="string">'lu'</span>, <span class="string">'sex'</span>:<span class="string">'female'</span>, <span class="string">'age'</span>: <span class="number">101</span>&#125;</span><br><span class="line">es.<span class="keyword">update</span>(index=<span class="string">'bank'</span>, doc_type=<span class="string">'typeName'</span>,body=b,id=<span class="string">'AWh2Mmuoy6XG0WYYFrgL'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="查询一条文档"><a href="#查询一条文档" class="headerlink" title="查询一条文档"></a>查询一条文档</h3><p>通过以下代码可以查询一条文档<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> elasticsearch import Elasticsearch</span><br><span class="line">es = Elasticsearch([&#123;<span class="string">"host"</span>:<span class="string">"localhost"</span>,<span class="string">"port"</span>:9200&#125;])</span><br><span class="line"><span class="attribute">find</span>=es.get(index='bank', <span class="attribute">doc_type</span>=<span class="string">'typeName'</span>, <span class="attribute">id</span>=<span class="string">'AWh2Mmuoy6XG0WYYFrgL'</span>)</span><br><span class="line"><span class="builtin-name">print</span>(find)</span><br></pre></td></tr></table></figure></p><p>输出的结果如下：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'_index'</span>: <span class="string">'bank'</span>, <span class="string">'_type'</span>: <span class="string">'typeName'</span>, <span class="string">'_id'</span>: <span class="string">'AWh2Mmuoy6XG0WYYFrgL'</span>, <span class="string">'_version'</span>: <span class="number">1</span>, <span class="string">'found'</span>: True, <span class="string">'_source'</span>: &#123;<span class="string">'name'</span>: <span class="string">'lu'</span>, <span class="string">'sex'</span>: <span class="string">'female'</span>, <span class="string">'age'</span>: <span class="number">10</span>&#125;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>参考了一下文章：</p><p><a href="https://blog.csdn.net/wufaliang003/article/details/81368365" target="_blank" rel="noopener">https://blog.csdn.net/wufaliang003/article/details/81368365</a></p><p><a href="https://blog.csdn.net/u011682283/article/details/85265121" target="_blank" rel="noopener">https://blog.csdn.net/u011682283/article/details/85265121</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://wysh.site/categories/Elasticsearch/"/>
    
      <category term="大数据" scheme="http://wysh.site/categories/Elasticsearch/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/Elasticsearch/%E5%A4%A7%E6%95%B0%E6%8D%AE/Python/"/>
    
    
      <category term="Elasticsearch" scheme="http://wysh.site/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>使用Python操作MongoDB数据库</title>
    <link href="http://wysh.site/2019/01/20/%E4%BD%BF%E7%94%A8Python%E6%93%8D%E4%BD%9CMongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://wysh.site/2019/01/20/使用Python操作MongoDB数据库/</id>
    <published>2019-01-20T14:41:29.000Z</published>
    <updated>2019-04-05T13:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> 工作中，经常会对MongoDB里面的数据进行读写，比如使用MongoDB对爬虫爬取的数据进行存取，MongoDB支持包括Python在内的多种编程语言的操作，这篇笔记主要是记叙Python对MongoDB的一些常用操作，参考了菜鸟教程。</p></blockquote><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="Python3-JSON-数据解析"><a href="#Python3-JSON-数据解析" class="headerlink" title="Python3 JSON 数据解析"></a>Python3 JSON 数据解析</h3><p>由于MongoDB使用的数据类型是 BSON（类似 JSON），所有对MongoDB进行操作时，经常涉及对 JSON 数据格式的读写。</p><p>Python3 中可以使用 json 模块来对 JSON 数据进行编解码，它包含了两个函数：</p><ul><li>json.dumps(): 对数据进行编码。</li><li>json.loads(): 对数据进行解码。</li></ul><p>在json的编解码过程中，python 的原始类型与json类型会相互转换</p><p><strong>json.dumps 与 json.loads 实例</strong><br>以下实例演示了 Python 数据结构转换为JSON：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line"># Python 字典类型转换为 JSON 对象</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'no'</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="string">'name'</span> : <span class="string">'wysh'</span>,</span><br><span class="line">    <span class="string">'url'</span> : <span class="string">'http://www.wysh.site'</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">json_str = json.dumps(data)</span><br><span class="line">print (<span class="string">"Python 原始数据："</span>, repr(data))</span><br><span class="line">print (<span class="string">"JSON 对象："</span>, json_str)</span><br><span class="line"></span><br><span class="line"># 输出：</span><br><span class="line"># Python 原始数据： &#123;<span class="string">'no'</span>: <span class="number">1</span>, <span class="string">'name'</span>: <span class="string">'wysh'</span>, <span class="string">'url'</span>: <span class="string">'http://wysh.site'</span>&#125;</span><br><span class="line"># JSON 对象： &#123;<span class="string">"no"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"wysh"</span>, <span class="string">"url"</span>: <span class="string">"http://wysh.site"</span>&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-1127579dc575f46c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="json_dumps.jpg"></p><p>通过输出的结果可以看出，简单类型通过编码后跟其原始的repr()输出结果非常相似。</p><p>接着以上实例，我们可以将一个JSON编码的字符串转换回一个Python数据结构：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python 字典类型转换为 JSON 对象</span></span><br><span class="line"><span class="keyword">data</span>1 = &#123;</span><br><span class="line">    <span class="string">'no'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'wysh'</span>,</span><br><span class="line">    <span class="string">'url'</span>: <span class="string">'http://wysh.site'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">json_str = json.dumps(<span class="keyword">data</span>1)</span><br><span class="line">print(<span class="string">"Python 原始数据："</span>, repr(<span class="keyword">data</span>1))</span><br><span class="line">print(<span class="string">"JSON 对象："</span>, json_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 JSON 对象转换为 Python 字典</span></span><br><span class="line"><span class="keyword">data</span>2 = json.loads(json_str)</span><br><span class="line">print(<span class="string">"data2['name']: "</span>, <span class="keyword">data</span>2[<span class="string">'name'</span>])</span><br><span class="line">print(<span class="string">"data2['url']: "</span>, <span class="keyword">data</span>2[<span class="string">'url'</span>])</span><br></pre></td></tr></table></figure></p><p>输出的结果为：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JSON 对象： &#123;<span class="string">"no"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"wysh"</span>, <span class="string">"url"</span>: <span class="string">"http://wysh.site"</span>&#125;</span><br><span class="line">data2[<span class="string">'name'</span>]:  wysh</span><br><span class="line">data2[<span class="string">'url'</span>]:  <span class="string">http:</span><span class="comment">//wysh.site</span></span><br></pre></td></tr></table></figure></p><p>如果你要处理的是文件而不是字符串，你可以使用 json.dump() 和 json.load() 来编码和解码JSON数据。<br>例如：使用 json.dump()将Python字典的内容写入本地的磁盘文件中，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">data=&#123;<span class="string">"name"</span>:<span class="string">"吴"</span>,<span class="string">"age"</span>:<span class="number">26</span>&#125;</span><br><span class="line"><span class="comment"># 写入 JSON 数据到本地的磁盘文件：c:\1.json</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'c:\1.json'</span>, <span class="string">'w+'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(data, f)</span><br></pre></td></tr></table></figure></p><p>查询运行结束之后，可以看到，本地的生产了一个 1.json文件，内容如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9deb2742d4de59b3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="json_dump.jpg"></p><p> 使用 json.load() 解码本地文件的JSON数据。<br> 代码如下：<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 读取本地磁盘 c:\1.json 的 json 文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'c:\1.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">print(repr(data))</span><br><span class="line">print(<span class="string">"name: "</span>+data[<span class="string">"name"</span>])</span><br></pre></td></tr></table></figure></p><p>运行结果如下图：</p><p> <img src="https://upload-images.jianshu.io/upload_images/12273007-9dd3d766bfef42bc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="json_load.jpg"></p><h3 id="建立-MongoDB-的连接"><a href="#建立-MongoDB-的连接" class="headerlink" title="建立 MongoDB 的连接"></a>建立 MongoDB 的连接</h3><ul><li>安装pymongo</li></ul><p>使用 pip3 install pymongo 安装MongoDB 驱动，如果已经安装，会有相应的提示：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">C:</span>\Users\Administrator&gt;pip3 install pymongo</span><br><span class="line">Requirement already <span class="symbol">satisfied:</span> pymongo in <span class="symbol">e:</span>\python\python36-<span class="number">32</span>\<span class="class"><span class="keyword">lib</span>\<span class="title">si</span></span></span><br><span class="line">te-packages (<span class="number">3.7</span>.<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><ul><li>创建一个数据库</li></ul><p>创建数据库需要使用 MongoClient 对象，并且指定连接的 URL 地址和要创建的数据库名。</p><p>如下实例中，我们创建的数据库 wysh :<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"wysh"</span>]</span><br></pre></td></tr></table></figure></p><ul><li>判断数据库是否已存在</li></ul><p>我们可以读取 MongoDB 中的所有数据库，并判断指定的数据库是否存在：<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br><span class="line"></span><br><span class="line">dblist = myclient.list_database_names()</span><br><span class="line"><span class="comment"># dblist = myclient.database_names()</span></span><br><span class="line"><span class="built_in">print</span>(dblist)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"wysh"</span> <span class="keyword">in</span> dblist:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"数据库已存在！"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>*注意:</strong> 在 MongoDB 中，数据库只有在内容插入后才会创建! 就是说，数据库创建后要创建集合(数据表)并插入一个文档(记录)，数据库才会真正创建。*</p><p>输出结果如下：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">'admin</span>', <span class="symbol">'config</span>', <span class="symbol">'local</span>', <span class="symbol">'nihao</span>', <span class="symbol">'test</span>']</span><br></pre></td></tr></table></figure></p><ul><li>创建集合</li></ul><p>MongoDB 中的集合类似 SQL 的表。</p><p>MongoDB 使用数据库对象来创建集合，实例如下：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">wysh = myclient[<span class="string">"wysh"</span>]</span><br><span class="line"></span><br><span class="line">mycol = wysh[<span class="string">"sites"</span>]</span><br></pre></td></tr></table></figure></p><ul><li>判断集合是否已存在</li></ul><p>我们可以读取 MongoDB 数据库中的所有集合，并判断指定的集合是否存在：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient('mongodb://localhost:27017/')</span><br><span class="line"></span><br><span class="line">mydb = myclient['wysh']</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line">collist = mydb.list_collection_names()</span><br><span class="line">print(collist)</span><br><span class="line"><span class="comment"># collist = mydb.collection_names()</span></span><br><span class="line">if <span class="string">"sites"</span> in collist:  <span class="comment"># 判断 sites 集合是否存在</span></span><br><span class="line">    print(<span class="string">"集合已存在！"</span>)</span><br></pre></td></tr></table></figure></p><p>输出的结果为空</p><h3 id="Python-Mongodb-插入文档"><a href="#Python-Mongodb-插入文档" class="headerlink" title="Python Mongodb 插入文档"></a>Python Mongodb 插入文档</h3><p>MongoDB 中的一个文档类似 SQL 表中的一条记录。</p><ul><li>插入集合</li></ul><p>集合中插入文档使用 insert_one() 方法，该方法的第一参数是字典 name =&gt; value 对。</p><p>以下实例向 sites 集合中插入文档：<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"wysh"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">mydict = &#123;<span class="string">"name"</span>: <span class="string">"wysh"</span>, <span class="string">"alexa"</span>: <span class="string">"10000"</span>, <span class="string">"url"</span>: <span class="string">"https://wysh.site"</span>&#125;</span><br><span class="line"></span><br><span class="line">x = mycol.insert_one(mydict)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></p><p>输出的结果为：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;pymongo<span class="selector-class">.results</span><span class="selector-class">.InsertOneResult</span> <span class="selector-tag">object</span> at <span class="number">0</span>x024DCDA0&gt;</span><br></pre></td></tr></table></figure></p><ul><li>返回 _id 字段</li></ul><p>insert_one() 方法返回 InsertOneResult 对象，该对象包含 inserted_id 属性，它是插入文档的 id 值。<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"wysh"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">mydict = &#123;<span class="string">"name"</span>: <span class="string">"wysh"</span>, <span class="string">"alexa"</span>: <span class="string">"10000"</span>, <span class="string">"url"</span>: <span class="string">"https://wysh.site"</span>&#125;</span><br><span class="line"></span><br><span class="line">x = mycol.insert_one(mydict)</span><br><span class="line">print(x.inserted_id)</span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>c447686d7a6<span class="number">232500733686</span></span><br></pre></td></tr></table></figure></p><p>如果我们在插入文档时没有指定 _id，MongoDB 会为每个文档添加一个唯一的 id。</p><ul><li>插入多个文档</li></ul><p>集合中插入多个文档使用 insert_many() 方法，该方法的第一参数是字典列表。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mylist = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Taobao"</span>, <span class="string">"alexa"</span>: <span class="string">"100"</span>, <span class="string">"url"</span>: <span class="string">"https://www.taobao.com"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"QQ"</span>, <span class="string">"alexa"</span>: <span class="string">"101"</span>, <span class="string">"url"</span>: <span class="string">"https://www.qq.com"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Facebook"</span>, <span class="string">"alexa"</span>: <span class="string">"10"</span>, <span class="string">"url"</span>: <span class="string">"https://www.facebook.com"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"知乎"</span>, <span class="string">"alexa"</span>: <span class="string">"103"</span>, <span class="string">"url"</span>: <span class="string">"https://www.zhihu.com"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Github"</span>, <span class="string">"alexa"</span>: <span class="string">"109"</span>, <span class="string">"url"</span>: <span class="string">"https://www.github.com"</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">x = mycol.insert_many(mylist)</span><br></pre></td></tr></table></figure></p><h3 id="Python-Mongodb-查询文档"><a href="#Python-Mongodb-查询文档" class="headerlink" title="Python Mongodb 查询文档"></a>Python Mongodb 查询文档</h3><p>MongoDB 中使用了 find 和 find_one 方法来查询集合中的数据，它类似于 SQL 中的 SELECT 语句。</p><ul><li>查询一条数据</li></ul><p>我们可以使用 find_one() 方法来查询集合中的一条数据。</p><p>查询 sites 文档中的第一条数据<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"wysh"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">x = mycol.find_one()</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询结果如下：</span><br></pre></td></tr></table></figure></p><p>{‘_id’: ObjectId(‘5c44753fd7a623426018eaed’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">  查询集合中所有数据</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">find() 方法可以查询集合中的所有数据，类似 SQL 中的 SELECT * 操作。</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">以下实例查找 sites 集合中的所有数据：</span></span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>for x in mycol.find():<br>    print(x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出结果如下：</span><br></pre></td></tr></table></figure></p><p>{‘_id’: ObjectId(‘5c44753fd7a623426018eaed’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c447686d7a6232500733686’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca81219’), ‘name’: ‘Taobao’, ‘alexa’: ‘100’, ‘url’: ‘<a href="https://www.taobao.com&#39;}" target="_blank" rel="noopener">https://www.taobao.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121a’), ‘name’: ‘QQ’, ‘alexa’: ‘101’, ‘url’: ‘<a href="https://www.qq.com&#39;}" target="_blank" rel="noopener">https://www.qq.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121b’), ‘name’: ‘Facebook’, ‘alexa’: ‘10’, ‘url’: ‘<a href="https://www.facebook.com&#39;}" target="_blank" rel="noopener">https://www.facebook.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121c’), ‘name’: ‘知乎’, ‘alexa’: ‘103’, ‘url’: ‘<a href="https://www.zhihu.com&#39;}" target="_blank" rel="noopener">https://www.zhihu.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121d’), ‘name’: ‘Github’, ‘alexa’: ‘109’, ‘url’: ‘<a href="https://www.github.com&#39;}" target="_blank" rel="noopener">https://www.github.com&#39;}</a><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">  查询指定字段的数据</span></span><br><span class="line"><span class="ruby"></span></span><br><span class="line"><span class="ruby">我们可以使用 find() 方法来查询指定字段的数据，将要返回的字段对应值设置为 <span class="number">1</span>。</span></span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>for x in mycol.find({}, {“_id”: 0, “name”: 1, “alexa”: 1}):<br>    print(x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出的结果如下：</span><br></pre></td></tr></table></figure></p><p>{‘name’: ‘wysh’, ‘alexa’: ‘10000’}<br>{‘name’: ‘wysh’, ‘alexa’: ‘10000’}<br>{‘name’: ‘Taobao’, ‘alexa’: ‘100’}<br>{‘name’: ‘QQ’, ‘alexa’: ‘101’}<br>{‘name’: ‘Facebook’, ‘alexa’: ‘10’}<br>{‘name’: ‘知乎’, ‘alexa’: ‘103’}<br>{‘name’: ‘Github’, ‘alexa’: ‘109’}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出的结果为：</span><br></pre></td></tr></table></figure></p><p>{‘name’: ‘wysh’, ‘alexa’: ‘10000’}<br>{‘name’: ‘wysh’, ‘alexa’: ‘10000’}<br>{‘name’: ‘Taobao’, ‘alexa’: ‘100’}<br>{‘name’: ‘QQ’, ‘alexa’: ‘101’}<br>{‘name’: ‘Facebook’, ‘alexa’: ‘10’}<br>{‘name’: ‘知乎’, ‘alexa’: ‘103’}<br>{‘name’: ‘Github’, ‘alexa’: ‘109’}<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-  根据指定条件查询</span><br><span class="line"></span><br><span class="line">我们可以在 <span class="builtin-name">find</span>() 中设置参数来过滤数据。</span><br><span class="line"></span><br><span class="line">以下实例查找 name 字段为 <span class="string">"wysh"</span> 的数据：</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>myquery = {“name”: “wysh”}</p><p>mydoc = mycol.find(myquery)</p><p>for x in mydoc:<br>    print(x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出结果为：</span><br></pre></td></tr></table></figure></p><p>{‘_id’: ObjectId(‘5c44753fd7a623426018eaed’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c447686d7a6232500733686’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-  高级查询</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询的条件语句中，我们还可以使用修饰符。</span><br><span class="line"></span><br><span class="line">以下实例用于读取 <span class="built_in">name</span> 字段中第一个字母 ASCII 值大于 <span class="string">"H"</span> 的数据，大于的修饰符条件为 &#123;<span class="string">"$gt"</span>: <span class="string">"R"</span>&#125; :</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>myquery = {“name”: {“$gt”: “R”}}</p><p>mydoc = mycol.find(myquery)</p><p>for x in mydoc:<br>    print(x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出的结果为：</span><br></pre></td></tr></table></figure></p><p>{‘_id’: ObjectId(‘5c44753fd7a623426018eaed’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c447686d7a6232500733686’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca81219’), ‘name’: ‘Taobao’, ‘alexa’: ‘100’, ‘url’: ‘<a href="https://www.taobao.com&#39;}" target="_blank" rel="noopener">https://www.taobao.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121c’), ‘name’: ‘知乎’, ‘alexa’: ‘103’, ‘url’: ‘<a href="https://www.zhihu.com&#39;}" target="_blank" rel="noopener">https://www.zhihu.com&#39;}</a><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-  使用正则表达式查询</span><br><span class="line"></span><br><span class="line">我们还可以使用正则表达式作为修饰符。</span><br><span class="line"></span><br><span class="line">正则表达式修饰符只用于搜索字符串的字段。</span><br><span class="line"></span><br><span class="line">以下实例用于读取 <span class="built_in">name</span> 字段中第一个字母为 <span class="string">"w"</span> 的数据，正则表达式修饰符条件为 &#123;<span class="string">"$regex"</span>: <span class="string">"^W"</span>&#125; :</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>myquery = {“name”: {“$regex”: “^w”}}</p><p>mydoc = mycol.find(myquery)</p><p>for x in mydoc:<br>    print(x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出的结果为：</span><br></pre></td></tr></table></figure></p><p>{‘_id’: ObjectId(‘5c44753fd7a623426018eaed’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c447686d7a6232500733686’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###  Python Mongodb 修改文档</span><br><span class="line"></span><br><span class="line">我们可以在 MongoDB 中使用 update_one() 方法修改文档中的记录。该方法第一个参数为查询的条件，第二个参数为要修改的字段。</span><br><span class="line"></span><br><span class="line">如果查找到的匹配数据多余一条，则只会修改第一条。</span><br><span class="line">以下实例将 alexa 字段的值 <span class="number">10000</span> 改为 <span class="number">12345</span>:</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>myquery = {“alexa”: “10000”}<br>newvalues = {“$set”: {“alexa”: “12345”}}</p><p>mycol.update_one(myquery, newvalues)</p><h1 id="输出修改后的-“sites”-集合"><a href="#输出修改后的-“sites”-集合" class="headerlink" title="输出修改后的  “sites”  集合"></a>输出修改后的  “sites”  集合</h1><p>for x in mycol.find():<br>    print(x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出的结果为：</span><br></pre></td></tr></table></figure></p><p>{‘_id’: ObjectId(‘5c44753fd7a623426018eaed’), ‘name’: ‘wysh’, ‘alexa’: ‘12345’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c447686d7a6232500733686’), ‘name’: ‘wysh’, ‘alexa’: ‘10000’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca81219’), ‘name’: ‘Taobao’, ‘alexa’: ‘100’, ‘url’: ‘<a href="https://www.taobao.com&#39;}" target="_blank" rel="noopener">https://www.taobao.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121a’), ‘name’: ‘QQ’, ‘alexa’: ‘101’, ‘url’: ‘<a href="https://www.qq.com&#39;}" target="_blank" rel="noopener">https://www.qq.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121b’), ‘name’: ‘Facebook’, ‘alexa’: ‘10’, ‘url’: ‘<a href="https://www.facebook.com&#39;}" target="_blank" rel="noopener">https://www.facebook.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121c’), ‘name’: ‘知乎’, ‘alexa’: ‘103’, ‘url’: ‘<a href="https://www.zhihu.com&#39;}" target="_blank" rel="noopener">https://www.zhihu.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121d’), ‘name’: ‘Github’, ‘alexa’: ‘109’, ‘url’: ‘<a href="https://www.github.com&#39;}" target="_blank" rel="noopener">https://www.github.com&#39;}</a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">update_one</span><span class="params">()</span></span> 方法只能修匹配到的第一条记录，如果要修改所有匹配到的记录，可以使用 update_many()。</span><br><span class="line"></span><br><span class="line">以下实例将查找所有以 F 开头的 name 字段，并将匹配到所有记录的 alexa 字段修改为 <span class="number">123</span>：</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>myquery = {“name”: {“$regex”: “^w”}}<br>newvalues = {“$set”: {“alexa”: “123”}}</p><p>x = mycol.update_many(myquery, newvalues)</p><p>print(x.modified_count, “文档已修改”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出结果如下：</span><br></pre></td></tr></table></figure></p><p>2 文档已修改<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">###  排序</span><br><span class="line">sort() 方法可以指定升序或降序排序。</span><br><span class="line"></span><br><span class="line">sort() 方法第一个参数为要排序的字段，第二个字段指定排序规则，<span class="number">1</span> 为升序，<span class="number">-1</span> 为降序，默认为升序。</span><br><span class="line"></span><br><span class="line">- 对字段 alexa 按升序排序：</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>mydoc = mycol.find().sort(“alexa”,-1)<br>for x in mydoc:<br>    print(x)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结果如下：</span><br></pre></td></tr></table></figure></p><p>{‘_id’: ObjectId(‘5c44753fd7a623426018eaed’), ‘name’: ‘wysh’, ‘alexa’: ‘123’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c447686d7a6232500733686’), ‘name’: ‘wysh’, ‘alexa’: ‘123’, ‘url’: ‘<a href="https://wysh.site&#39;}">https://wysh.site&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121d’), ‘name’: ‘Github’, ‘alexa’: ‘109’, ‘url’: ‘<a href="https://www.github.com&#39;}" target="_blank" rel="noopener">https://www.github.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121c’), ‘name’: ‘知乎’, ‘alexa’: ‘103’, ‘url’: ‘<a href="https://www.zhihu.com&#39;}" target="_blank" rel="noopener">https://www.zhihu.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121a’), ‘name’: ‘QQ’, ‘alexa’: ‘101’, ‘url’: ‘<a href="https://www.qq.com&#39;}" target="_blank" rel="noopener">https://www.qq.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca81219’), ‘name’: ‘Taobao’, ‘alexa’: ‘100’, ‘url’: ‘<a href="https://www.taobao.com&#39;}" target="_blank" rel="noopener">https://www.taobao.com&#39;}</a><br>{‘_id’: ObjectId(‘5c4477c9d7a6234cbca8121b’), ‘name’: ‘Facebook’, ‘alexa’: ‘10’, ‘url’: ‘<a href="https://www.facebook.com&#39;}" target="_blank" rel="noopener">https://www.facebook.com&#39;}</a><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###  Python Mongodb 删除数据</span><br><span class="line"></span><br><span class="line">我们可以使用 delete_one() 方法来删除一个文档，该方法第一个参数为查询对象，指定要删除哪些数据。</span><br><span class="line"></span><br><span class="line">以下实例删除 name 字段值为 <span class="string">"Taobao"</span> 的文档：</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>myquery = {“name”: “Taobao”}</p><p>mycol.delete_one(myquery)</p><h1 id="删除后输出"><a href="#删除后输出" class="headerlink" title="删除后输出"></a>删除后输出</h1><p>for x in mycol.find():<br>    print(x)<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出的结果中，<span class="built_in">name</span> 字段值为 <span class="string">"Taobao"</span> 的文档被删除</span><br><span class="line"></span><br><span class="line">-  删除多个文档</span><br><span class="line"></span><br><span class="line">我们可以使用 delete_many() 方法来删除多个文档，该方法第一个参数为查询对象，指定要删除哪些数据。</span><br><span class="line"></span><br><span class="line">删除所有 <span class="built_in">name</span> 字段中以 w 开头的文档:</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>myquery = {“name”: {“$regex”: “^w”}}</p><p>x = mycol.delete_many(myquery)</p><p>print(x.deleted_count, “个文档已删除”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出的结果为：</span><br></pre></td></tr></table></figure></p><p>2 个文档已删除<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-  删除集合中的所有文档</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">delete_many</span><span class="params">()</span></span> 方法如果传入的是一个空的查询对象，则会删除集合中的所有文档：</span><br></pre></td></tr></table></figure></p><p>import pymongo</p><p>myclient = pymongo.MongoClient(“mongodb://localhost:27017/“)<br>mydb = myclient[“wysh”]<br>mycol = mydb[“sites”]</p><p>x = mycol.delete_many({})</p><p>print(x.deleted_count, “个文档已删除”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出结果为：</span><br></pre></td></tr></table></figure></p><p>4 个文档已删除<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://wysh.site/categories/MongoDB/"/>
    
      <category term="大数据" scheme="http://wysh.site/categories/MongoDB/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/MongoDB/%E5%A4%A7%E6%95%B0%E6%8D%AE/Python/"/>
    
    
      <category term="MongoDB" scheme="http://wysh.site/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库语法练习</title>
    <link href="http://wysh.site/2019/01/17/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%AD%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
    <id>http://wysh.site/2019/01/17/MongoDB数据库语法练习/</id>
    <published>2019-01-16T16:14:15.000Z</published>
    <updated>2019-04-05T13:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>提示：文中的图片点击可放大</em></strong></p><blockquote><p> 最近在工作中越来越多地使用到MongoDB数据库，接触MongoDB的时间也不算太长，感觉MongoDB作为非关系型数据库，在语法上与关系型数据库中的 Mysql 有些类似。这几天看了下菜鸟教程上 MongoDB的章节，觉得写得很好很全面。结合菜鸟教程以及自己对MongoDB的使用，把 MongoDB 的语法以及使用 Python 操作 MongoDB 做一个总结。</p></blockquote><h3 id="MongoDB-介绍"><a href="#MongoDB-介绍" class="headerlink" title="MongoDB 介绍"></a>MongoDB 介绍</h3><p>引用百度百科对 MongoDB 的介绍：</p><p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似json的bson格式，因此可以存储比较复杂的数据类型。</p><p>Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p><h3 id="MongoDB-的安装"><a href="#MongoDB-的安装" class="headerlink" title="MongoDB 的安装"></a>MongoDB 的安装</h3><p>可以直接在 MongoDB 的官网上下载 MongoDB 的安装包进行安装，地址：<a href="http://www.mongodb.com/download-center#community" target="_blank" rel="noopener">www.mongodb.com/download-center#community</a><br>安装的过程很简单，参照网上的方法进行安装就可以了，我安装的是最新的 v4.0.5</p><ul><li>连接MongoDB</li></ul><p>我们可以在命令窗口中运行 mongo.exe 命令即可连接上 MongoDB，执行如下命令：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\M</span>ongoDB<span class="symbol">\b</span>in&gt;mongo.exe</span><br></pre></td></tr></table></figure></p><p>执行以上命令后，会自动进入到 MongoDB Shell（它是 MongoDB 自带的交互式Javascript shell,用来对 MongoDB 进行操作和管理的交互式环境）。</p><p>同时，它默认会链接到 test 文档（数据库），使用 db 命令即可查看当前所处的数据库，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-acf9fd4c36ec418b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mongodb连接.jpg"></p><h3 id="MongoDB-概念解析"><a href="#MongoDB-概念解析" class="headerlink" title="MongoDB 概念解析"></a>MongoDB 概念解析</h3><p>下表将帮助您更容易理解Mongo中的一些概念：</p><table><thead><tr><th>SQL术语/概念</th><th>MongoDB术语/概念</th><th>解释/说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表/集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行/文档</td></tr><tr><td>column</td><td>field</td><td>数据字段/域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键,MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h3 id="MongoDB的可视化工具"><a href="#MongoDB的可视化工具" class="headerlink" title="MongoDB的可视化工具"></a>MongoDB的可视化工具</h3><p>上文的截图中是通过在 Windows 的 DOS 窗口执行安装目录下的 mongo.exe 命令连接到 MongoDB 的，也可以通过一些可视化工具连接到 MongoDB ，我是用过三款 MongoDB 的可视化工具：robo 3t、nosqlbooster 、adminmongo，其中 adminmongo 是一款 web 工具，使用的时候要启动 web 服务，不太推荐。下面介绍robo 3t和nosqlbooster：</p><ul><li>nosqlbooster</li></ul><p>个人感觉 nosqlbooster 是这三款可视化工具中功能最强大的，启动nosqlbooster后，在Basic选项卡中填入下图所示参数（name可以自定义），其他的默认，点击左下方的 Test Connection 按钮测试连接是否通过，通过之后，点击 Save &amp; Connect 即可连接成功<br><img src="https://upload-images.jianshu.io/upload_images/12273007-d4ff8b27e0d9f720.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nosqlbooter.jpg"></p><p>连接成功后，按照如下图所示即可对指定数据库进行查询（类似于 mysql的 Navicat工具）：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-5bcd34fb9d4ddc47.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nosqlbooter查询.jpg"></p><ul><li>robo 3t</li></ul><p>robo 3t 连接MongoDB的方式类似于 nosqlbooster，连接成功之后，按下图的方式即可对MongoDB数据库进行查询操作：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-84c1ea28f872b653.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3t查询.jpg"></p><ul><li>这两款工具的比较</li></ul><p>个人感觉这两款工具各有优劣：nosqlbooter 功能强大，但如果电脑的配置不好，使用起来可能会比较卡顿（我在我的腾讯云主机上使用时会比较卡），robo 3t提供的功能不多，但在配置比较差的机器上也不会卡顿。</p><h3 id="MongoDB-创建数据库"><a href="#MongoDB-创建数据库" class="headerlink" title="MongoDB 创建数据库"></a>MongoDB 创建数据库</h3><ul><li>语法</li></ul><p>MongoDB 创建数据库的语法格式如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> DATABASE_NAME</span><br></pre></td></tr></table></figure></p><p>如果数据库不存在，则创建数据库，否则切换到指定数据库。</p><ul><li>实例</li></ul><p>以下实例我们创建了数据库 wys:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use wys</span></span><br><span class="line">switched to db wys</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db</span></span><br><span class="line">wys</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>如果你想查看所有数据库，可以使用 show dbs 命令：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">test    0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到，我们刚创建的数据库 wys 并不在数据库的列表中， 要显示它，我们需要向 wys 数据库插入一些数据。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.wys.insert(&#123;<span class="string">"name"</span>:<span class="string">"wysh"</span>&#125;)</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : 1 &#125;)</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">test    0.000GB</span><br><span class="line">wys     0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。</p><p>注意: 在 MongoDB 中，集合只有在内容插入后才会创建! 就是说，创建集合(数据表)后要再插入一个文档(记录)，集合才会真正创建</p><h3 id="MongoDB-删除数据库"><a href="#MongoDB-删除数据库" class="headerlink" title="MongoDB 删除数据库"></a>MongoDB 删除数据库</h3><ul><li>语法</li></ul><p>MongoDB 删除数据库的语法格式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.dropDatabase</span>()</span><br></pre></td></tr></table></figure></p><ul><li>实例</li></ul><p>以下实例我们删除了数据库 wys。</p><p>首先，查看所有数据库：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">test    0.000GB</span><br><span class="line">wys     0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>接下来我们切换到数据库 wys：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use wys</span></span><br><span class="line">switched to db wys</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><p>执行删除命令：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.dropDatabase<span class="comment">()</span></span><br><span class="line">&#123; <span class="string">"dropped"</span> : <span class="string">"wys"</span>, <span class="string">"ok"</span> : <span class="number">1</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>最后，我们再通过 show dbs 命令数据库是否删除成功：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">test    0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="MongoDB-创建集合"><a href="#MongoDB-创建集合" class="headerlink" title="MongoDB 创建集合"></a>MongoDB 创建集合</h3><p>MongoDB 中使用 createCollection() 方法来创建集合。</p><ul><li>语法格式：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(<span class="built_in">name</span>, options)</span><br></pre></td></tr></table></figure><ul><li>参数说明：</li></ul><ol><li>name: 要创建的集合名称</li><li>options: 可选参数, 指定有关内存大小及索引的选项</li></ol><ul><li>实例<br>在 test 数据库中创建 wys 集合：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use <span class="built_in">test</span></span></span><br><span class="line">switched to db test</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.createCollection(<span class="string">"wysh"</span>)</span></span><br><span class="line">&#123; "ok" : 1 &#125;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></li></ul><p>如果要查看已有集合，可以使用 show collections 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> show collections</span></span><br><span class="line">col</span><br><span class="line">nihao</span><br><span class="line">wysh</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="selector-class">.wysh1</span><span class="selector-class">.insert</span>(&#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>&#125;)</span><br><span class="line"><span class="function"><span class="title">WriteResult</span><span class="params">(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span></span></span><br><span class="line">&gt; show collections</span><br><span class="line">col</span><br><span class="line">nihao</span><br><span class="line">wysh</span><br><span class="line">wysh1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="MongoDB-删除集合"><a href="#MongoDB-删除集合" class="headerlink" title="MongoDB 删除集合"></a>MongoDB 删除集合</h3><p>MongoDB 中使用 drop() 方法来删除集合。</p><ul><li>语法格式：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.drop</span>()</span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><p>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</p><ul><li>实例<br>在数据库 test 中，我们可以先通过 show collections 命令查看已存在的集合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> use <span class="built_in">test</span></span></span><br><span class="line">switched to db test</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show collections</span></span><br><span class="line">col</span><br><span class="line">nihao</span><br><span class="line">wysh</span><br><span class="line">wysh1</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure><p>接着删除集合 wysh1 :<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> db.wysh1.drop()</span></span><br><span class="line">true</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show collections</span></span><br><span class="line">col</span><br><span class="line">nihao</span><br><span class="line">wysh</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><h3 id="MongoDB-插入文档"><a href="#MongoDB-插入文档" class="headerlink" title="MongoDB 插入文档"></a>MongoDB 插入文档</h3><p>文档的数据结构和JSON基本一样。</p><p>所有存储在集合中的数据都是BSON格式。</p><p>BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。</p><ul><li>插入文档</li></ul><p>MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.insert</span>(document)</span><br></pre></td></tr></table></figure></p><ul><li>实例</li></ul><p>以下文档可以存储在 MongoDB 的 wysh 数据库 的 wy 集合中：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; use wysh</span><br><span class="line">switched to db wysh</span><br><span class="line">&gt; db</span><br><span class="line">wysh</span><br><span class="line">&gt; db<span class="selector-class">.wy</span><span class="selector-class">.insert</span>(&#123;<span class="string">"name"</span>:<span class="string">"wysh"</span>,<span class="string">"age"</span>:<span class="number">55</span>,<span class="string">"sex"</span>:<span class="string">"male"</span>,<span class="string">"country"</span>:<span class="string">"China"</span>&#125;)</span><br><span class="line"><span class="function"><span class="title">WriteResult</span><span class="params">(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span></span></span><br></pre></td></tr></table></figure></p><p>以上实例中 wy 是我们的集合名，如果该集合不在该数据库中， MongoDB 会自动创建该集合并插入文档。</p><ul><li><p>查看已插入文档：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.wy.<span class="builtin-name">find</span>()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f485b3f1190b4d7b9906c"</span>), <span class="string">"name"</span> : <span class="string">"wysh"</span>, <span class="string">"age"</span> : 55, <span class="string">"se</span></span><br><span class="line"><span class="string">x"</span> : <span class="string">"male"</span>, <span class="string">"country"</span> : <span class="string">"China"</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>3.2 版本后还有以下几种语法可用于插入文档:</p></li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.wy.insertOne(&#123;<span class="string">"aaa"</span>:<span class="string">"333"</span>&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"acknowledged"</span> : true,</span><br><span class="line">        <span class="string">"insertedId"</span> : ObjectId(<span class="string">"5c3f4aae3f1190b4d7b9906d"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br><span class="line">&gt; db.wy.insertMany([&#123;<span class="string">"bbb"</span>:<span class="string">"444"</span>&#125;,&#123;<span class="string">"ccc"</span>:<span class="string">"444"</span>&#125;])</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"acknowledged"</span> : true,</span><br><span class="line">        <span class="string">"insertedIds"</span> : [</span><br><span class="line">                ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906e"</span>),</span><br><span class="line">                ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906f"</span>)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.wy.find()</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f485b3f1190b4d7b9906c"</span>), <span class="string">"name"</span> : <span class="string">"wysh"</span>, <span class="string">"age"</span> : <span class="number">55</span>, <span class="string">"se</span></span><br><span class="line"><span class="string">x"</span> : <span class="string">"male"</span>, <span class="string">"country"</span> : <span class="string">"China"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4aae3f1190b4d7b9906d"</span>), <span class="string">"aaa"</span> : <span class="string">"333"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906e"</span>), <span class="string">"bbb"</span> : <span class="string">"444"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906f"</span>), <span class="string">"ccc"</span> : <span class="string">"444"</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="MongoDB-更新文档"><a href="#MongoDB-更新文档" class="headerlink" title="MongoDB 更新文档"></a>MongoDB 更新文档</h3><p>MongoDB 使用 update() 和 save() 方法来更新集合中的文档。接下来让我们详细来看下两个函数的应用及其区别。</p><ul><li>update() 方法</li></ul><p>update() 方法用于更新已存在的文档。语法格式如下：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   <span class="params">&lt;query&gt;</span>,</span><br><span class="line">   <span class="params">&lt;update&gt;</span>,</span><br><span class="line">   &#123;</span><br><span class="line"><span class="symbol">     upsert:</span> <span class="params">&lt;boolean&gt;</span>,</span><br><span class="line"><span class="symbol">     multi:</span> <span class="params">&lt;boolean&gt;</span>,</span><br><span class="line"><span class="symbol">     writeConcern:</span> <span class="params">&lt;document&gt;</span></span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li>query :</li></ul><p>update的查询条件，类似sql<br>update查询内where后面的。</p><ul><li>update : </li></ul><p>update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</p><ul><li>upsert : </li></ul><p>可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</p><ul><li>multi : </li></ul><p>可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</p><ul><li>writeConcern :</li></ul><p>可选，抛出异常的级别。</p><ul><li>实例</li></ul><p>我们在集合 wy 中插入如下数据：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.wy</span><span class="selector-class">.insert</span>(&#123;</span><br><span class="line">    <span class="attribute">title</span>: <span class="string">'MongoDB 教程'</span>, </span><br><span class="line">    description: <span class="string">'MongoDB 是一个 Nosql 数据库'</span>,</span><br><span class="line">    by: <span class="string">'wysh'</span>,</span><br><span class="line">    url: <span class="string">'http://www.wysh.site'</span>,</span><br><span class="line">    tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">    likes: <span class="number">100</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>接着我们通过 update() 方法来更新标题(title):</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.wy.<span class="keyword">update</span>(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB 教程'</span>&#125;,&#123;$set:&#123;<span class="string">'title'</span>:<span class="string">'MongoDB'</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">Updated <span class="number">1</span> existing record(s) <span class="keyword">in</span> <span class="number">106</span>ms</span><br></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.wy.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f485b3f1190b4d7b9906c"</span>),</span><br><span class="line">        <span class="string">"name"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="number">55</span>,</span><br><span class="line">        <span class="string">"sex"</span> : <span class="string">"male"</span>,</span><br><span class="line">        <span class="string">"country"</span> : <span class="string">"China"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4aae3f1190b4d7b9906d"</span>), <span class="string">"aaa"</span> : <span class="string">"333"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906e"</span>), <span class="string">"bbb"</span> : <span class="string">"444"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906f"</span>), <span class="string">"ccc"</span> : <span class="string">"444"</span> &#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f51dec305b104a14e4618"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.wysh.site"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>可以看到标题(title)由原来的 “MongoDB 教程” 更新为了 “MongoDB”。<br>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db.col.<span class="keyword">update</span>(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB 教程'</span>&#125;,&#123;$set:&#123;<span class="string">'title'</span>:<span class="string">'MongoDB'</span>&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure></p><ul><li>save() 方法</li></ul><p>save() 方法通过传入的文档来替换已有文档。语法格式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.collection</span><span class="selector-class">.save</span>(</span><br><span class="line">   &lt;<span class="selector-tag">document</span>&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="attribute">writeConcern</span>: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li><p>document : 文档数据。</p></li><li><p>writeConcern :可选，抛出异常的级别。</p></li><li>实例</li></ul><p>以下实例中我们替换了 _id 为 56064f89ade2f21f36b03136 的文档数据：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.col</span><span class="selector-class">.save</span>(&#123;</span><br><span class="line">    <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906f"</span>),</span><br><span class="line">    <span class="string">"title"</span> : <span class="string">"MongoDB"</span>,</span><br><span class="line">    <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">    <span class="string">"by"</span> : <span class="string">"wysh.site"</span>,</span><br><span class="line">    <span class="string">"url"</span> : <span class="string">"http://www.wysh.site.com"</span>,</span><br><span class="line">    <span class="string">"tags"</span> : [</span><br><span class="line">            <span class="string">"mongodb"</span>,</span><br><span class="line">            <span class="string">"NoSQL"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"likes"</span> : <span class="number">110</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>替换成功后，我们可以通过 find() 命令来查看替换后的数据</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.wy.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f485b3f1190b4d7b9906c"</span>),</span><br><span class="line">        <span class="string">"name"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"age"</span> : <span class="number">55</span>,</span><br><span class="line">        <span class="string">"sex"</span> : <span class="string">"male"</span>,</span><br><span class="line">        <span class="string">"country"</span> : <span class="string">"China"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4aae3f1190b4d7b9906d"</span>), <span class="string">"aaa"</span> : <span class="string">"333"</span> &#125;</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906e"</span>), <span class="string">"bbb"</span> : <span class="string">"444"</span> &#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f4b293f1190b4d7b9906f"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"wysh.site"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.wysh.site.com"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">110</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f51dec305b104a14e4618"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.wysh.site"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="MongoDB-删除文档"><a href="#MongoDB-删除文档" class="headerlink" title="MongoDB 删除文档"></a>MongoDB 删除文档</h3><p>MongoDB remove()函数是用来移除集合中的数据。</p><p>MongoDB数据更新可以使用update()函数。在执行remove()函数前先执行find()命令来判断执行的条件是否正确，这是一个比较好的习惯。</p><ul><li>语法</li></ul><p>remove() 方法的基本语法格式如下所示：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.remove</span>(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;justOne&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>参数说明：</p><ul><li>query :</li></ul><p>（可选）删除的文档的条件。</p><ul><li>justOne : </li></ul><p>（可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</p><ul><li>writeConcern :</li></ul><p>（可选）抛出异常的级别。</p><ul><li>实例</li></ul><p>以下文档我们执行两次插入操作：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.wy</span><span class="selector-class">.insert</span>(&#123;</span><br><span class="line">    <span class="attribute">title</span>: <span class="string">'MongoDB test'</span>, </span><br><span class="line">    description: <span class="string">'MongoDB 是一个 Nosql 数据库'</span>,</span><br><span class="line">    by: <span class="string">'wysh'</span>,</span><br><span class="line">    url: <span class="string">'http://www.wysh.site.com'</span>,</span><br><span class="line">    tags: [<span class="string">'mongodb'</span>, <span class="string">'database'</span>, <span class="string">'NoSQL'</span>],</span><br><span class="line">    likes: <span class="number">101010</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>使用 find() 函数查询数据：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="selector-class">.wy</span><span class="selector-class">.find</span>().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f576bc305b104a14e4619"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB test"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.wysh.site.com"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">101010</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f576cc305b104a14e461a"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB test"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.wysh.site.com"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">101010</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>接下来我们移除 title 为 ‘MongoDB 教程’ 的文档：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.wy</span><span class="selector-class">.remove</span>(&#123;<span class="string">'title'</span>:<span class="string">'MongoDB test'</span>&#125;)</span><br><span class="line">Removed <span class="number">2</span> record(s) <span class="keyword">in</span> <span class="number">2ms</span></span><br></pre></td></tr></table></figure></p><p>如果你只想删除第一条找到的记录可以设置 justOne 为 1，如下所示：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db<span class="selector-class">.COLLECTION_NAME</span><span class="selector-class">.remove</span>(DELETION_CRITERIA,<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">db.wy.remove(&#123;&#125;)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">db.wy.find()</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></p><h3 id="MongoDB-查询文档"><a href="#MongoDB-查询文档" class="headerlink" title="MongoDB 查询文档"></a>MongoDB 查询文档</h3><p>MongoDB 查询文档使用 find() 方法。</p><p>find() 方法以非结构化的方式来显示所有文档。</p><ul><li>语法</li></ul><p>MongoDB 查询数据的语法格式如下：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.find</span>(query, projection)</span><br></pre></td></tr></table></figure></p><ul><li>query ：</li></ul><p>可选，使用查询操作符指定查询条件</p><ul><li>projection ：</li></ul><p>可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。<br>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="selector-tag">db</span><span class="selector-class">.wy</span><span class="selector-class">.find</span>()<span class="selector-class">.pretty</span>()</span><br></pre></td></tr></table></figure></p><p>pretty() 方法以格式化的方式来显示所有文档。</p><ul><li>实例</li></ul><p>以下实例我们查询了集合 wy 中的数据：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="selector-class">.wy</span><span class="selector-class">.find</span>().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f576bc305b104a14e4619"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB test"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.wysh.site.com"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">101010</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : ObjectId(<span class="string">"5c3f576cc305b104a14e461a"</span>),</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"MongoDB test"</span>,</span><br><span class="line">        <span class="string">"description"</span> : <span class="string">"MongoDB 是一个 Nosql 数据库"</span>,</span><br><span class="line">        <span class="string">"by"</span> : <span class="string">"wysh"</span>,</span><br><span class="line">        <span class="string">"url"</span> : <span class="string">"http://www.wysh.site.com"</span>,</span><br><span class="line">        <span class="string">"tags"</span> : [</span><br><span class="line">                <span class="string">"mongodb"</span>,</span><br><span class="line">                <span class="string">"database"</span>,</span><br><span class="line">                <span class="string">"NoSQL"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"likes"</span> : <span class="number">101010</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://wysh.site/categories/MongoDB/"/>
    
      <category term="大数据" scheme="http://wysh.site/categories/MongoDB/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="MongoDB" scheme="http://wysh.site/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>docker使用笔记</title>
    <link href="http://wysh.site/2019/01/06/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://wysh.site/2019/01/06/docker使用笔记/</id>
    <published>2019-01-06T15:19:52.000Z</published>
    <updated>2019-04-01T14:08:14.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>近几年docker越来越火，我们公司也在项目中使用了微服务+docker的组合，最近尝试着搭建了一套docker的环境，下面是环境的搭建以及简单地使用</p></blockquote><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="什么是docker"><a href="#什么是docker" class="headerlink" title="什么是docker"></a>什么是docker</h3><p>直接引用百度百科的介绍：</p><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p><p>一个完整的Docker有以下几个部分组成：</p><ol><li>dockerClient客户端</li><li>Docker Daemon守护进程</li><li>Docker Image镜像</li><li>DockerContainer容器</li></ol><p>Docker 架构</p><p>Docker采用 C/S架构 Docker daemon 作为服务端接受来自客户的请求，并处理这些请求（创建、运行、分发容器）。 客户端和服务端既可以运行在一个机器上，也可通过 socket 或者RESTful API 来进行通信。</p><p>Docker daemon 一般在宿主主机后台运行，等待接收来自客户端的消息。 Docker 客户端则为用户提供一系列可执行命令，用户用这些命令实现跟 Docker daemon 交互。</p><h3 id="搭建docker环境"><a href="#搭建docker环境" class="headerlink" title="搭建docker环境"></a>搭建docker环境</h3><p>之前一直都想在自己的win7 32位系统上搭建一个docker的环境，后来发现，docker不支持32位的Linux或Windows系统，于是就弄了个天翼的云主机，在上面装了Ubuntu Linux系统以及docker（现在很多互联网大公司都推出来云主机产品，像阿里云，腾讯云，百度云，京东云，天翼云等等，我自己也购买了三年的腾讯云主机，感觉还行，云主机支持创建镜像以及回滚，还有各种Linux、Windows的系统镜像可供选择安装，安装的速度也非常快，很多云主机厂商都推出了学生版，说是要验证学生身份，其实也没什么验证，非学生也能注册成功，相同的配置，学生版相对来说便宜很多）。</p><h4 id="安装Linux桌面版"><a href="#安装Linux桌面版" class="headerlink" title="安装Linux桌面版"></a>安装Linux桌面版</h4><p>一般的Linux云主机都是非桌面版的，只能通过远程连接工具，比如secureCRT、putty SSL上去，感觉用起来很不方便，如果部署了一个web应用，就不能通过浏览器本地访问了。</p><p>为此，我在网上查找了很多安装Linux桌面版的方法，都没有安装成功，差一点放弃了，不过最后还是安装成功了。我是参考这篇文章的：<a href="http://blog.51cto.com/12308777/2070963" target="_blank" rel="noopener">http://blog.51cto.com/12308777/2070963</a><br>我是使用的系统是天翼云的ubuntu 16.04，按照上面链接的文章进行操作之后，还需要执行如下Linux目录，开启1端口。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vncserver</span> <span class="selector-pseudo">:1</span></span><br></pre></td></tr></table></figure></p><p>然后打开安装在Windows端的 vnc viewer并进行连接，连接成功后，就可以以图形界面的方式访问Linux系统了，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-58b9e7bf1a4fd8ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="VNC.jpg"></p><p>连接成功之后，可以看到Linux 系统图形界面如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-969cf84b8a0c7c72.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="desktop.jpg"></p><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><p>我是用的系统是ubuntu 16.04，Docker 要求 Ubuntu 系统的内核版本高于 3.10 否则不支持 Docker。<br>通过 uname -r 命令可以查看内核版本：<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># uname -r</span></span><br><span class="line"><span class="number">4.4</span><span class="number">.0</span><span class="number">-75</span>-generic</span><br></pre></td></tr></table></figure></p><p>可以使用如下脚本安装 Docker：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh@wysh.site:~# wget -qO- http<span class="variable">s:</span>//<span class="built_in">get</span>.docker.<span class="keyword">com</span>/ | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p><p>脚本执行完成之后，docker便安装成功了，是用如下命令可以启动docker 后台服务：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh@wysh.site:~# sudo<span class="built_in"> service </span>docker start</span><br></pre></td></tr></table></figure></p><p>接着，我们可以测试运行hello-world，是用如下命令：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker run hello-world</span></span><br></pre></td></tr></table></figure><p>出现如下提示信息，说明docker已经安装成功了：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-d846271f6641cdf9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hello.jpg"></p><h3 id="Docker-Hello-World"><a href="#Docker-Hello-World" class="headerlink" title="Docker Hello World"></a>Docker Hello World</h3><p>Docker 允许你在容器内运行应用程序， 使用 docker run 命令来在容器内运行一个应用程序。</p><p>输出Hello world</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker run ubuntu:15.10 /bin/echo <span class="string">"Hello world"</span></span></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>各个参数解析：</p><ul><li><p>docker: Docker 的二进制执行文件。</p></li><li><p>run:与前面的 docker 组合来运行一个容器。</p></li><li><p>ubuntu:15.10指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</p></li><li><p>/bin/echo “Hello world”: 在启动的容器里执行的命令</p></li><li><p>以上命令完整的意思可以解释为：Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo “Hello world”，然后输出结果。</p></li></ul><p>docker支持以交互的方式以及后台的方式运行</p><h4 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h4><p>我们通过docker的两个参数 -i -t，让docker运行的容器实现”对话”的能力<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="variable">@wysh</span>.<span class="symbol">site:</span>~<span class="comment"># docker run -i -t ubuntu:15.10 /bin/bash</span></span><br><span class="line">root<span class="variable">@d434270470d6</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>各个参数解析：</p><ul><li><p>-t:在新容器内指定一个伪终端或终端。</p></li><li><p>-i:允许你对容器内的标准输入 (STDIN) 进行交互。</p></li></ul><p>此时我们已进入一个 ubuntu15.10系统的容器</p><p>我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-126bdf2349b90b6c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="run_docker.jpg"></p><p>我们可以通过运行exit命令或者使用CTRL+D来退出容器。</p><h4 id="启动容器（后台模式）"><a href="#启动容器（后台模式）" class="headerlink" title="启动容器（后台模式）"></a>启动容器（后台模式）</h4><p>使用以下命令创建一个以进程方式运行的容器</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker run -d ubuntu:15.10 /bin/sh -c <span class="string">"while true; do echo hello world; sleep 1; done"</span></span></span><br><span class="line"><span class="number">63</span>f48e0a0d7f17009693e6f426b32d109fab683538d1a6d1c246427e83b4cf3a</span><br><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta">#</span></span><br></pre></td></tr></table></figure><p>在输出中，我们没有看到期望的”hello world”，而是一串长字符</p><p>63f48e0a0d7f17009693e6f426b32d109fab683538d1a6d1c246427e83b4cf3a</p><p>这个长字符串叫做容器ID，对每个容器来说都是唯一的，我们可以通过容器ID来查看对应的容器发生了什么。</p><p>首先，我们需要确认容器有在运行，可以通过 docker ps 来查看<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker ps</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b47fdab7bb6fc53c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ps.jpg"></p><ul><li><p>CONTAINER ID:容器ID</p></li><li><p>NAMES:自动分配的容器名称</p></li><li><p>在容器内使用docker logs命令，查看容器内的标准输出</p></li></ul><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><p>我们使用 docker stop 命令来停止容器（stop后面可以跟容器 id 或 name）:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker stop 63f48e0a0d7f</span></span><br></pre></td></tr></table></figure></p><h3 id="Docker-实例"><a href="#Docker-实例" class="headerlink" title="Docker 实例"></a>Docker 实例</h3><h4 id="Docker-安装-MySQL"><a href="#Docker-安装-MySQL" class="headerlink" title="Docker 安装 MySQL"></a>Docker 安装 MySQL</h4><p>查找Docker Hub上的mysql镜像<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta">#  docker search mysql</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-8d96c8c1ae5ca635.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql.jpg"></p><p>这里我们拉取官方的镜像,标签为5.6</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker pull mysql:5.6</span></span><br></pre></td></tr></table></figure><p>等待下载完成后，我们就可以在本地镜像列表里查到REPOSITORY为mysql,标签为5.6的镜像。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker images |grep mysql</span></span><br><span class="line">mysql               <span class="number">5.6</span>                 <span class="number">27e29668</span>a08a        <span class="number">8</span> days ago          <span class="number">256</span>MB</span><br><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta">#</span></span><br></pre></td></tr></table></figure><h4 id="使用mysql镜像"><a href="#使用mysql镜像" class="headerlink" title="使用mysql镜像"></a>使用mysql镜像</h4><p>运行容器<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh@wysh.site:~# docker <span class="builtin-name">run</span> -p 3306:3306 --name mymysql -v <span class="variable">$PWD</span>/conf:/etc/mysql/conf.d -v <span class="variable">$PWD</span>/logs:/logs -v <span class="variable">$PWD</span>/data:/var/lib/mysql -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=123456 -d mysql:5.6</span><br></pre></td></tr></table></figure></p><p>命令说明：</p><ul><li><p>-p 3306:3306：将容器的 3306 端口映射到主机的 3306 端口。</p></li><li><p>-v -v $PWD/conf:/etc/mysql/conf.d：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。</p></li><li><p>-v $PWD/logs:/logs：将主机当前目录下的 logs 目录挂载到容器的 /logs。</p></li><li><p>-v $PWD/data:/var/lib/mysql ：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。</p></li><li><p>-e MYSQL_ROOT_PASSWORD=123456：初始化 root 用户的密码。</p></li></ul><p>查看容器启动情况<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker ps</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-76515302fb0f693d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="status.jpg"></p><h4 id="运行容器内的mysql"><a href="#运行容器内的mysql" class="headerlink" title="运行容器内的mysql"></a>运行容器内的mysql</h4><ul><li><p>进入容器</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wysh<span class="symbol">@wysh</span>.site:~<span class="meta"># docker exec -it mymysql bash</span></span><br></pre></td></tr></table></figure></li><li><p>登录mysql</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@66b2bb47e8ac</span><span class="symbol">:/</span><span class="comment"># mysql -u root -p</span></span><br></pre></td></tr></table></figure></li><li><p>查看 mysql 的数据库</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">show </span>databases<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul><p>以上命令的执行结果如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-4f374bfdf093883e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="use_mysql.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://wysh.site/categories/docker/"/>
    
    
      <category term="docker" scheme="http://wysh.site/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch的安装配置及基本的操作</title>
    <link href="http://wysh.site/2018/12/30/elasticsearch/"/>
    <id>http://wysh.site/2018/12/30/elasticsearch/</id>
    <published>2018-12-30T14:54:19.000Z</published>
    <updated>2019-04-01T14:08:58.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>最近在做一个企业信用信息大数据的项目，系统的架构大概是这样的：使用elasticsearch对用户输入的搜索关键字进行检索，并在网页上以列表的方式展示检索到结果，当用户点击列表中的检索结果记录后，会跳转到企业信用详情信息页面，企业信用详情信息是从MongoDB里面读取的。</p><p>之前没怎么接触过elasticsearch，于是就想自己搭建一个elasticsearch的环境，学习一下elasticsearch的相关操作。</p><p>在网上找了一些elasticsearch的学习资料，发现有个叫做 Elasticsearch: 权威指南 的网站非常好，从环境的安装到实例的讲解都非常详细，适合初学者，我已经把从第一章到聚合部分的内容都看完了，网站地址：</p><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b2d3983c07813ede.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="elasticsearch权威指南.jpg"></p><hr><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="elasticsearch及kibana的安装和配置"><a href="#elasticsearch及kibana的安装和配置" class="headerlink" title="elasticsearch及kibana的安装和配置"></a>elasticsearch及kibana的安装和配置</h3><p>kibana和elasticsearch通常是配套使用的，可以通过kibana在网页上操作elasticsearch。</p><p>相关的安装过程，这里就不介绍了，Elasticsearch: 权威指南网站以及百度上相关的资料非常多，安装的过程也不复杂。</p><p>需要注意的是，kibana的版本号不能高于elasticsearch的版本号，否则在使用的时候会有问题。我自己安装的elasticsearch和kibana的版本号都是5.6.14.</p><p>elasticsearch 安装包 Windows 64位的下载地址：<br><a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.14.msi" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.6.14.msi</a></p><p>kibana 安装包 Windows 64位的下载地址：<br><a href="https://artifacts.elastic.co/downloads/kibana/kibana-5.6.14-windows-x86.zip" target="_blank" rel="noopener">https://artifacts.elastic.co/downloads/kibana/kibana-5.6.14-windows-x86.zip</a></p><p>elasticsearch安装并启动后，在浏览器中访问<a href="http://localhost:9200/，出现如下图所示内容表明Elasticsearch启动成功。" target="_blank" rel="noopener">http://localhost:9200/，出现如下图所示内容表明Elasticsearch启动成功。</a></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-5dd9fa3b459fe6e2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="elasticsearch安装.jpg"></p><p>kibana安装完成后，在浏览器中输入 <a href="http://localhost:5601/" target="_blank" rel="noopener">http://localhost:5601/</a><br>即可访问kibana，界面如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-d7a47759d5a3fe1b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="kibana.jpg"></p><h3 id="配置索引模式"><a href="#配置索引模式" class="headerlink" title="配置索引模式"></a>配置索引模式</h3><p>在使用使用 kibana之前，会提示你设置索引模式(Index Patterns)，点击 kibana 左侧导航栏的 Management 菜单，在 Management 页面，点击 Index Patterns 链接，会进入索引模式设置页面，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-0e7671785fb84d0e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="索引模式.jpg"></p><p>在索引模式设置页面，点击页面左上角的“ Create Index Pattern”按钮，即可设置索引模式，在下图的输入框中输入索引名称及“*”（通配符），注意：输入框中的索引名称要是系统中已存在的。接着，点击 “create” 按钮即可创建索引模式。 </p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-eb8d0feee1c5f9a3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置索引名称.jpg"></p><p>索引模式创建成功后，点击左侧导航栏的 “Discover” 菜单，进入 “Discover” 页面后，点击左侧的下拉框，会显示上面我们已经配置好的索引模式，选择任意一个索引模式，页面就会显示该索引模式下的记录，在页面上方的搜索框中输入关键字即可对该索引模式下的记录进行搜索，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-572da6c9e269b683.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="discover页面.jpg"></p><p>索引模式配置好了之后，我们就可以使用 kibana 来操作 elasticsearch 了。</p><p>具体的操作如下：点击 kibana 左侧导航栏的 “Dev Tools” 菜单，会进入“Console” 页面，输入查询的 DSL ，并点击右侧的三角图标，即可进行elasticsearch查询操作，同时右边栏会显示查询，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f19b082b49697559.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DSL.jpg"></p><h3 id="相关概念介绍"><a href="#相关概念介绍" class="headerlink" title="相关概念介绍"></a>相关概念介绍</h3><ul><li>Node 与 Cluster</li></ul><p>Elastic 是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。</p><p>单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p><ul><li>Index</li></ul><p>一个索引类似于传统关系数据库中的一个数据库，是一个存储关系型文档的地方。索引(index) 的复数词为 indices 或 indexes。</p><p>在console中输入<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“<span class="builtin-name">GET</span> _cat/indices?v”</span><br></pre></td></tr></table></figure></p><p>可查询当前节点的所有 Index，返回结果如下：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">health status index    uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span><br><span class="line">yellow open   blogs-en <span class="number">9</span>RqPRx3KS9q2Qq9lda--Sg   <span class="number">5</span>   <span class="number">1</span>          <span class="number">0</span>            <span class="number">0</span>       <span class="number">810</span>b           <span class="number">810</span>b</span><br><span class="line">yellow open   cars     DDoss65BSHSEmzr3hNwOfw   <span class="number">5</span>   <span class="number">1</span>         <span class="number">24</span>            <span class="number">0</span>     <span class="number">45.4</span>kb         <span class="number">45.4</span>kb</span><br><span class="line">yellow open   megacorp n1JhO0IcSVuJKHpi2i1Eog   <span class="number">5</span>   <span class="number">1</span>          <span class="number">3</span>            <span class="number">0</span>     <span class="number">17.1</span>kb         <span class="number">17.1</span>kb</span><br><span class="line">yellow open   .kibana  <span class="number">6</span>xGAaxHSSRa0erZeEhNvkQ   <span class="number">1</span>   <span class="number">1</span>          <span class="number">3</span>            <span class="number">0</span>     <span class="number">10.9</span>kb         <span class="number">10.9</span>kb</span><br><span class="line">yellow open   blogs-fr t6g1t2rPSIeY7EHNv-EPZA   <span class="number">5</span>   <span class="number">1</span>          <span class="number">0</span>            <span class="number">0</span>       <span class="number">810</span>b           <span class="number">810</span>b</span><br><span class="line">yellow open   my_store U50-KyE0R_<span class="number">-9</span>nFvEwYFGQA   <span class="number">5</span>   <span class="number">1</span>          <span class="number">4</span>            <span class="number">0</span>     <span class="number">11.5</span>kb         <span class="number">11.5</span>kb</span><br><span class="line">yellow open   my_index <span class="number">9</span>QQS512qRq-nPLaNtlLkXg   <span class="number">5</span>   <span class="number">1</span>          <span class="number">2</span>            <span class="number">0</span>      <span class="number">7.2</span>kb          <span class="number">7.2</span>kb</span><br><span class="line">yellow open   movies   <span class="number">97</span>Hhrys5QCi0AAiBCJKl6A   <span class="number">5</span>   <span class="number">1</span>          <span class="number">0</span>            <span class="number">0</span>       <span class="number">810</span>b           <span class="number">810</span>b</span><br></pre></td></tr></table></figure><ul><li>Document</li></ul><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"张三"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"工程师"</span>,</span><br><span class="line">  <span class="attr">"desc"</span>: <span class="string">"数据库管理"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</p><ul><li>Type</li></ul><p>Document 可以分组，比如weather这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p><p>不同的 Type 应该有相似的结构（schema），举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p><p>在console中输入下面的命令，可以列出每个 Index 所包含的 Type：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> _mapping?<span class="attribute">pretty</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><ul><li>新建索引同时存放数据</li></ul><p>使用如下命令新建索引(wysh_index为索引名称，wysh_type为类型名称，数字1为插入记录的id，在elasticsearch中，索引、类型、id三者的组合可唯一确定一条记录），同时可以将数据存放到索引中<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PUT</span> /wysh_index/wysh_<span class="keyword">type</span>/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"first_name"</span> : <span class="string">"Vincent"</span>,</span><br><span class="line">    <span class="string">"last_name"</span> :  <span class="string">"Wu"</span>,</span><br><span class="line">    <span class="string">"age"</span> :        <span class="number">25</span>,</span><br><span class="line">    <span class="string">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务器返回一个 JSON 对象，里面的 result 字段表示索引创建成功:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用下面的 GET 语句，可以查询索引中所用的记录：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /wysh_index/_search</span><br></pre></td></tr></table></figure></p><p>服务器返回一个 JSON 对象，里面的_source字段为查询结果的内容：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"first_name"</span>: <span class="string">"Vincent"</span>,</span><br><span class="line">          <span class="attr">"last_name"</span>: <span class="string">"Wu"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">"interests"</span>: [</span><br><span class="line">            <span class="string">"sports"</span>,</span><br><span class="line">            <span class="string">"music"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>删除索引</li></ul><p>使用下面的语句可以删除索引：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> /wysh_index</span><br></pre></td></tr></table></figure><p>服务器返回一个 JSON 对象，里面的acknowledged字段表示删除成功<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时，我们再用上面的GET语句查询已经被删除的索引时，提示no such index：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"error"</span>: &#123;</span><br><span class="line">    <span class="attr">"root_cause"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"no such index"</span>,</span><br><span class="line">        <span class="attr">"resource.type"</span>: <span class="string">"index_or_alias"</span>,</span><br><span class="line">        <span class="attr">"resource.id"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"_na_"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"wysh_index"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"no such index"</span>,</span><br><span class="line">    <span class="attr">"resource.type"</span>: <span class="string">"index_or_alias"</span>,</span><br><span class="line">    <span class="attr">"resource.id"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">    <span class="attr">"index_uuid"</span>: <span class="string">"_na_"</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"wysh_index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">404</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>不同类型的查询操作</li></ul><p>先向数据库里面再插入两条数据：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PUT</span> /wysh_index/wysh_<span class="keyword">type</span>/2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"first_name"</span> : <span class="string">"YongSheng"</span>,</span><br><span class="line">    <span class="string">"last_name"</span> :  <span class="string">"Wu"</span>,</span><br><span class="line">    <span class="string">"age"</span> :        <span class="number">36</span>,</span><br><span class="line">    <span class="string">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"reading"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PUT</span> /wysh_index/wysh_<span class="keyword">type</span>/3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"first_name"</span> : <span class="string">"Wei"</span>,</span><br><span class="line">    <span class="string">"last_name"</span> :  <span class="string">"Zhang"</span>,</span><br><span class="line">    <span class="string">"age"</span> :        <span class="number">36</span>,</span><br><span class="line">    <span class="string">"interests"</span>: [ <span class="string">"cooking"</span>, <span class="string">"reading"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面介绍的<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">GET</span> /wysh_index/_search</span><br></pre></td></tr></table></figure></p><p>会返回 wysh_index 索引中所有的记录，再次执行时，会返回_id为1、2、3这三条记录。</p><p>如果想查询某一id的记录，可以用如下的查询语句：<br><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GET</span> /wysh_index/wysh_<span class="keyword">type</span>/3</span><br></pre></td></tr></table></figure></p><p>执行了之后，会返回id为3的记录：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span>: &#123;</span><br><span class="line">    <span class="attr">"first_name"</span>: <span class="string">"Wei"</span>,</span><br><span class="line">    <span class="attr">"last_name"</span>: <span class="string">"Zhang"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">36</span>,</span><br><span class="line">    <span class="attr">"interests"</span>: [</span><br><span class="line">      <span class="string">"cooking"</span>,</span><br><span class="line">      <span class="string">"reading"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>使用查询表达式搜索查询（全文搜索）</li></ul><p>上面的查询都不带请求体，我们可以使用下面带请求体的查询：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /wysh_index/wysh_type/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span> : &#123;</span><br><span class="line">        <span class="string">"match"</span> : &#123;</span><br><span class="line">            <span class="string">"last_name"</span> : <span class="string">"Wu"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的查询会返回所有”last_name”中与”Wu”相关的记录，结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">27</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"first_name"</span>: <span class="string">"YongSheng"</span>,</span><br><span class="line">          <span class="attr">"last_name"</span>: <span class="string">"Wu"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">36</span>,</span><br><span class="line">          <span class="attr">"interests"</span>: [</span><br><span class="line">            <span class="string">"sports"</span>,</span><br><span class="line">            <span class="string">"reading"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"first_name"</span>: <span class="string">"Vincent"</span>,</span><br><span class="line">          <span class="attr">"last_name"</span>: <span class="string">"Wu"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">25</span>,</span><br><span class="line">          <span class="attr">"interests"</span>: [</span><br><span class="line">            <span class="string">"sports"</span>,</span><br><span class="line">            <span class="string">"music"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>逻辑运算</li></ul><p>支持逻辑“或”与逻辑“与”查询</p><p>下面是通过逻辑“或”进行查询的：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /wysh_index/wysh_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span> : &#123; <span class="string">"match"</span> : &#123; <span class="string">"first_name"</span> : <span class="string">"YongSheng Wei"</span>&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>“first_name”字段有多个搜索关键字（关键字“YongSheng”和“Wei”， Elastic 认为它们是or关系，查询结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"first_name"</span>: <span class="string">"YongSheng"</span>,</span><br><span class="line">          <span class="attr">"last_name"</span>: <span class="string">"Wu"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">36</span>,</span><br><span class="line">          <span class="attr">"interests"</span>: [</span><br><span class="line">            <span class="string">"sports"</span>,</span><br><span class="line">            <span class="string">"reading"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"3"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"first_name"</span>: <span class="string">"Wei"</span>,</span><br><span class="line">          <span class="attr">"last_name"</span>: <span class="string">"Zhang"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">36</span>,</span><br><span class="line">          <span class="attr">"interests"</span>: [</span><br><span class="line">            <span class="string">"cooking"</span>,</span><br><span class="line">            <span class="string">"reading"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是通过逻辑“与”进行查询的：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /wysh_index/wysh_type/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: [</span><br><span class="line">        &#123; <span class="string">"match"</span>: &#123; <span class="string">"first_name"</span>: <span class="string">"YongSheng"</span> &#125; &#125;,</span><br><span class="line">        &#123; <span class="string">"match"</span>: &#123; <span class="string">"last_name"</span>: <span class="string">"Wu"</span> &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>查询同时满足”first_name”为 “YongSheng” ，”last_name”为”Wu”的记录，查询结果如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"took"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hits"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"max_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">"hits"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"_index"</span>: <span class="string">"wysh_index"</span>,</span><br><span class="line">        <span class="attr">"_type"</span>: <span class="string">"wysh_type"</span>,</span><br><span class="line">        <span class="attr">"_id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="attr">"_score"</span>: <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">"_source"</span>: &#123;</span><br><span class="line">          <span class="attr">"first_name"</span>: <span class="string">"YongSheng"</span>,</span><br><span class="line">          <span class="attr">"last_name"</span>: <span class="string">"Wu"</span>,</span><br><span class="line">          <span class="attr">"age"</span>: <span class="number">36</span>,</span><br><span class="line">          <span class="attr">"interests"</span>: [</span><br><span class="line">            <span class="string">"sports"</span>,</span><br><span class="line">            <span class="string">"reading"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="elasticsearch" scheme="http://wysh.site/categories/elasticsearch/"/>
    
      <category term="大数据" scheme="http://wysh.site/categories/elasticsearch/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="大数据" scheme="http://wysh.site/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>性能测试工具Locust的简单实用</title>
    <link href="http://wysh.site/2018/12/03/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Locust%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/"/>
    <id>http://wysh.site/2018/12/03/性能测试工具Locust的简单实用/</id>
    <published>2018-12-03T12:48:16.000Z</published>
    <updated>2019-04-01T14:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>这段时间接触了一款新的性能测试工具：Locust，和Loadrunner及Jmeter一样，也是一款很好的性能测试工具。</p></blockquote><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在Locust测试框架中，测试场景是采用纯Python脚本进行描述的。对于最常见的HTTP(S)协议的系统，Locust采用Python的requests库作为客户端，使得脚本编写大大简化，富有表现力的同时且极具美感。而对于其它协议类型的系统，Locust也提供了接口，只要我们能采用Python编写对应的请求客户端，就能方便地采用Locust实现压力测试。从这个角度来说，Locust可以用于压测任意类型的系统。</p><p>在模拟有效并发方面，Locust的优势在于其摒弃了进程和线程，完全基于事件驱动，使用gevent提供的非阻塞IO和coroutine来实现网络层的并发请求，因此即使是单台压力机也能产生数千并发请求数；再加上对分布式运行的支持，理论上来说，Locust能在使用较少压力机的前提下支持极高并发数的测试。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用pip命令安装Locust</p><p>pip install locustio</p><p>安装完成后，检测是否安装成功</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;locust  -help</span><br><span class="line">Usage: locust [options] [LocustClass [LocustClass2 ... ]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help            show this help <span class="keyword">message</span> <span class="keyword">and</span> <span class="keyword">exit</span></span><br><span class="line">  -H HOST, --host=HOST  Host <span class="keyword">to</span> load test <span class="keyword">in</span> the following format:</span><br><span class="line">                        http:<span class="comment">//10.21.32.33</span></span><br><span class="line">  --web-host=WEB_HOST   Host <span class="keyword">to</span> bind the web <span class="keyword">interface</span> <span class="keyword">to</span>. Defaults <span class="keyword">to</span></span><br><span class="line"> <span class="string">''</span> (all</span><br><span class="line">                        interfaces)</span><br><span class="line">  -P PORT, --port=PORT, --web-port=PORT</span><br><span class="line">                        Port <span class="keyword">on</span> which <span class="keyword">to</span> run web host</span><br><span class="line">  -f LOCUSTFILE, --locustfile=LOCUSTFILE</span><br><span class="line">                        Python module <span class="keyword">file</span> <span class="keyword">to</span> import, e.g. <span class="string">'../other.p</span></span><br><span class="line"><span class="string">y'</span>.</span><br><span class="line">                        <span class="keyword">Default</span>: locustfile</span><br><span class="line">  --csv=CSVFILEBASE, --csv-base-<span class="keyword">name</span>=CSVFILEBASE</span><br><span class="line">                        Store current request stats <span class="keyword">to</span> files <span class="keyword">in</span> CSV fo</span><br><span class="line">rmat.</span><br><span class="line">  --master              <span class="keyword">Set</span> locust <span class="keyword">to</span> run <span class="keyword">in</span> distributed mode <span class="keyword">with</span> thi</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><h4 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h4><p>对Django rest api 进行测试</p><p>Django 的安装，菜鸟教程有介绍</p><p><a href="http://www.runoob.com/django/django-install.html" target="_blank" rel="noopener">http://www.runoob.com/django/django-install.html</a></p><p>安装完成后，使用如下命令启动，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">D</span>:\<span class="selector-tag">django_restful</span>&gt;<span class="selector-tag">python3</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:9000</span></span><br></pre></td></tr></table></figure><p>启动完成之后，在浏览器中输入如下地址，就可以访问api接口：</p><p><a href="http://127.0.0.1:9000/" target="_blank" rel="noopener">http://127.0.0.1:9000/</a></p><p>如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-7c81bf49d7d77c15.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Django.jpg"></p><p>点击其中的 users 和 groups 链接，会分别显示相应的用户和组的信息，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b6ae63aff585b937.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="users.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-125041ec48a13dbb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="groups.jpg"></p><p>本次针对如下两个接口进行测试：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"users"</span>: <span class="string">"http://127.0.0.1:9000/users/"</span>,</span><br><span class="line"><span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:9000/groups/"</span></span><br></pre></td></tr></table></figure><h4 id="编写简单的测试脚本"><a href="#编写简单的测试脚本" class="headerlink" title="编写简单的测试脚本"></a>编写简单的测试脚本</h4><p>创建 locust_test.py 文件，通过 Python 编写性能测试脚本。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from locust import HttpLocust,TaskSet,task</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span>(<span class="title">TaskSet</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.users_index=<span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.groups_index=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    @task(<span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_users</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        users_id=<span class="keyword">self</span>.locust.id[<span class="keyword">self</span>.users_index]</span><br><span class="line">        url=<span class="string">'/users/'</span>+str(users_id)+<span class="string">'/'</span></span><br><span class="line">        <span class="keyword">self</span>.client.get(url,auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>))</span><br><span class="line">        <span class="keyword">self</span>.users_index=(<span class="keyword">self</span>.users_index+<span class="number">1</span>)%len(<span class="keyword">self</span>.locust.id)</span><br><span class="line"></span><br><span class="line">    @task(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_groups</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        groups_id=<span class="keyword">self</span>.locust.id[<span class="keyword">self</span>.groups_index]</span><br><span class="line">        url=<span class="string">'/groups/'</span>+str(groups_id)+<span class="string">'/'</span></span><br><span class="line">        <span class="keyword">self</span>.client.get(url,auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>))</span><br><span class="line">        <span class="keyword">self</span>.groups_index=(<span class="keyword">self</span>.groups_index+<span class="number">1</span>)%len(<span class="keyword">self</span>.locust.id)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span>(<span class="title">HttpLocust</span>):</span></span><br><span class="line">    task_set = UserBehavior</span><br><span class="line">    id=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">    min_wait = <span class="number">3000</span></span><br><span class="line">    max_wait = <span class="number">6000</span></span><br><span class="line">    host = <span class="string">'http://127.0.0.1:9000'</span></span><br></pre></td></tr></table></figure><p>那么，如上Python脚本是如何表达出以上测试场景的呢？</p><ul><li><p>从脚本中可以看出，脚本主要包含两个类，一个是WebsiteUser（继承自HttpLocust，而HttpLocust继承自Locust），另一个是UserBehavior（继承自TaskSet）。事实上，在Locust的测试脚本中，所有业务测试场景都是在Locust和TaskSet两个类的继承子类中进行描述的。</p></li><li><p>task:装饰该方法为一个事务后面的数字表示请求比例,上面的比例为2:1默认都是1:1</p></li><li>test_ users()方法表示个用户行为,这里是请求user接口。</li><li>test_ groups()方法表示请求 group接口</li><li>client.get()用于指定请求的路径</li><li>Websiteuser类用于设置性能测试。</li><li>task_set:指向一个定义的用户行为类。</li><li>min wait:执行事务之间用户等待时间的下界(单位:亳秒)</li><li>max wait:执行事务之间用户等待时间的上界(单位:亳秒)</li></ul><h4 id="执行性能测试"><a href="#执行性能测试" class="headerlink" title="执行性能测试"></a>执行性能测试</h4><p>Locust脚本调试通过后，就算是完成了所有准备工作，可以开始进行压力测试了。</p><p>使用如下命令，开始执行性能测试：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locust -f <span class="symbol">D:</span>\PycharmProjects\locust\locust_test.py --host</span><br><span class="line">=ht<span class="symbol">tp:</span>//<span class="number">127.0</span>.<span class="number">0.1</span><span class="symbol">:9000</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12273007-052fa96eba4d3414.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动locust.jpg"></p><p>参数说明：</p><p>Locust是通过在Terminal中执行命令进行启动的，通用的参数有如下两个：</p><ul><li>-H, –host：被测系统的host，若在Terminal中不进行指定，就需要在Locust子类中通过host参数进行指定</li><li>-f, –locustfile：指定执行的Locust脚本文件</li></ul><h4 id="设置测试"><a href="#设置测试" class="headerlink" title="设置测试"></a>设置测试</h4><p>通过浏览器访问：<a href="http://localhost:8089（Locust启动网络监控器，默认为端口号为" target="_blank" rel="noopener">http://localhost:8089（Locust启动网络监控器，默认为端口号为</a>: 8089），如果要使用其它端口，就可以在上面的启动命令中使用如下参数进行指定：-P, –port：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9bb0cdbf1a1becff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置locust.jpg"></p><p>在Locust的Web管理页面中，需要配置的参数只有两个：</p><ul><li>Number of users to simulate: 设置并发用户数，对应中no_web模式的-c, –clients参数；</li><li>Hatch rate (users spawned/second): 启动虚拟用户的速率，对应着no_web模式的-r, –hatch-rate参数。</li><li>参数配置完毕后，点击【Start swarming】即可开始测试。</li></ul><p>运行之后，可以看到主界面如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-5c8e088a8f726315.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行的界面.jpg"></p><p>性能测试参数</p><ul><li><p>Type： 请求的类型，例如GET/POST。</p></li><li><p>Name：请求的路径。</p></li><li><p>request：当前请求的数量。</p></li><li><p>fails：当前请求失败的数量。</p></li><li><p>Median：中间值，单位毫秒，一半的服务器响应时间低于该值，而另一半高于该值。</p></li><li><p>Average：平均值，单位毫秒，所有请求的平均响应时间。</p></li><li><p>Min：请求的最小服务器响应时间，单位毫秒。</p></li><li><p>Max：请求的最大服务器响应时间，单位毫秒。</p></li><li><p>Content Size：单个请求的大小，单位字节。</p></li><li><p>reqs/sec：是每秒钟请求的个数。</p></li></ul><p>点击Chart菜单，可以查看性能图表</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-7328063025899c76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="饼图.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Locust" scheme="http://wysh.site/categories/Locust/"/>
    
      <category term="性能测试测试" scheme="http://wysh.site/categories/Locust/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/Locust/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/Python/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于Django Rest API 的接口自动化测试</title>
    <link href="http://wysh.site/2018/11/27/%E5%9F%BA%E4%BA%8EDjango%20Rest%20API%20%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://wysh.site/2018/11/27/基于Django Rest API 的接口自动化测试/</id>
    <published>2018-11-27T13:35:36.000Z</published>
    <updated>2019-04-01T14:08:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文记录了对 Django Rest API 接口进行自动化测试的过程。对接执行POST，DELETE，PUT，GET请求，会对系统中的数据进行增删改查，每执行一次增删改操作后，系统中的数据就会发生变化，为了解决这个问题，需要在每次执行接口请求之前对数据进行初始化，故本篇文章侧重于对接口测试过程中数据的处理，结合unnittest+Requests+Jenkins形成一个完整的接口自动化测试框架。</p></blockquote><p><strong><em>提示：文中的图片点击可放大</em></strong></p><ul><li>代码已上传至我的github，地址：</li></ul><p><a href="https://github.com/wuyongsheng/Restful_Api_Test" target="_blank" rel="noopener">https://github.com/wuyongsheng/Restful_Api_Test</a></p><h3 id="用到的一些工具、模块及作用"><a href="#用到的一些工具、模块及作用" class="headerlink" title="用到的一些工具、模块及作用"></a>用到的一些工具、模块及作用</h3><ul><li>Django：提供待测试的API接口</li><li>Requests：用来发起HTTP请求</li><li>Pymysql：对接口测试的数据进行操作</li><li>Unittest：单元测试框架，对测试结果进行断言</li><li>logging：python的日志模块，对测试执行过程进行记录，方便定位问题</li><li>PyYAML: python的Yaml库，用来存放初始化数据</li><li>BSTestRunner：用来成产测试报告，对测试报告进行美化</li><li>Jenkins：持续集成工具，可设置测试过程定期执行或者手动执行</li></ul><h3 id="测试脚本目录结构"><a href="#测试脚本目录结构" class="headerlink" title="测试脚本目录结构"></a>测试脚本目录结构</h3><p>目录结构及各文件的作用</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b1831951b175b714.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构.jpg"></p><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><h4 id="搭建Django-rest-api-环境"><a href="#搭建Django-rest-api-环境" class="headerlink" title="搭建Django rest api 环境"></a>搭建Django rest api 环境</h4><p>Django 的安装，菜鸟教程有介绍，地址如下：</p><p><a href="http://www.runoob.com/django/django-install.html" target="_blank" rel="noopener">http://www.runoob.com/django/django-install.html</a></p><p>这里介绍数据库迁移过程。</p><p>在Django自带的数据库是Sqllite3，要将数据库迁移到MySQL方便操作。需要注意的是Django 2.1.X版本不支持MySQL 5.5以下的版本，我之前用的是5.5的版本，迁移时报了错，在网上查了，是因为版本不兼容。</p><p>使用如下命令进行数据库迁移：</p><ul><li>python manage.py makemigrations api</li><li>python manage.py migrate</li></ul><p>迁移完成后，需要创建一个超级管理员账号进行登录，使用如下命令：</p><ul><li>python manage.py createsuperuser</li></ul><p>创建超级管理员账号后，我们就可以用超级管理员账号登录Django了，登录后的界面如下（访问地址：<a href="http://127.0.0.1:8009/" target="_blank" rel="noopener">http://127.0.0.1:8009/</a> ，端口号可以自己指定）：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-af58bcc83a845f3a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Django.jpg"></p><p>在浏览器地址栏输入：</p><p><a href="http://127.0.0.1:8009/users/" target="_blank" rel="noopener">http://127.0.0.1:8009/users/</a>  可以返回系统中所有用户信息，用户信息包含url，username，email，groups字段，返回信息格式如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">GET /users/</span><br><span class="line">HTTP <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Vary: Accept</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/1/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh1"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh555@163.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/1/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/2/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh2"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh2@qq.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/2/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/3/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh3"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh3@qq.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/3/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/5/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh5"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh5@qq.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/5/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/6/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh6"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh5@163.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8000/groups/2/"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在浏览器地址栏输入：</p><p><a href="http://127.0.0.1:8009/groups/" target="_blank" rel="noopener">http://127.0.0.1:8009/groups/</a>  可以返回系统中所有用户组信息，用户信息包含 url，name 字段，返回信息格式如下：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /groups/</span><br><span class="line">HTTP <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Vary: Accept</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/2/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Boss"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/3/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"wysh_group3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/4/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"wysh_group4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/5/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"wysh_group5"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/6/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Pm"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在 MySQL 数据库中，django_restful存放的是数据库迁移后，Django系统的数据，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9a1e15103c106c89.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL.jpg"></p><p>其中 api_user 和 api_group 存放的是上面接口中用户和用户组的信息，以下的接口操作也是针对用户和用户组进行操作，api_user表如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-3993b085cd848145.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="user表.jpg"></p><h3 id="测试脚本介绍"><a href="#测试脚本介绍" class="headerlink" title="测试脚本介绍"></a>测试脚本介绍</h3><ul><li>mysql_action.py：进行数据库的初始化操作，代码如下：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from pymysql import connect</span><br><span class="line">import yaml</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'==================init data==============='</span>)</span><br><span class="line">        logging.info(<span class="string">'connect db...'</span>)</span><br><span class="line">        <span class="keyword">self</span>.conn = connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, db=<span class="string">'django_restful'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(<span class="keyword">self</span>, table_name)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'clear db...'</span>)</span><br><span class="line">        clear_sql = <span class="string">'truncate '</span> + table_name + <span class="string">';'</span></span><br><span class="line">        with <span class="keyword">self</span>.conn.cursor() as <span class="symbol">cursor:</span></span><br><span class="line">            cursor.execute(<span class="string">'set foreign_key_checks=0;'</span>)</span><br><span class="line">            cursor.execute(clear_sql)</span><br><span class="line">        <span class="keyword">self</span>.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(<span class="keyword">self</span>, table_name, table_data)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'inser data...'</span>)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> <span class="symbol">table_data:</span></span><br><span class="line">            table_data[key] = <span class="string">"'"</span> + str(table_data[key]) + <span class="string">"'"</span></span><br><span class="line"></span><br><span class="line">        key = <span class="string">','</span>.join(table_data.keys())</span><br><span class="line">        value = <span class="string">','</span>.join(table_data.values())</span><br><span class="line"></span><br><span class="line">        logging.info(key)</span><br><span class="line">        logging.info(value)</span><br><span class="line"></span><br><span class="line">        insert_sql = <span class="string">'insert into '</span> + table_name + <span class="string">'('</span> + key + <span class="string">')'</span> + <span class="string">'values'</span> + <span class="string">'('</span> + value + <span class="string">')'</span></span><br><span class="line">        logging.info(insert_sql)</span><br><span class="line"></span><br><span class="line">        with <span class="keyword">self</span>.conn.cursor() as <span class="symbol">cursor:</span></span><br><span class="line">            cursor.execute(insert_sql)</span><br><span class="line">        <span class="keyword">self</span>.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'close db'</span>)</span><br><span class="line">        <span class="keyword">self</span>.conn.close()</span><br><span class="line">        logging.info(<span class="string">'=============init finished!============'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_data</span><span class="params">(<span class="keyword">self</span>, datas)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">for</span> table, data <span class="keyword">in</span> datas.items()<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.clear(table)</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="symbol">data:</span></span><br><span class="line">                <span class="keyword">self</span>.insert(table, d)</span><br><span class="line">        <span class="keyword">self</span>.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    db = DB()</span><br><span class="line">    <span class="comment"># db.clear('api_user')</span></span><br><span class="line">    <span class="comment"># db.clear('api_group')</span></span><br><span class="line">    <span class="comment"># user_data=&#123;'id':1,'username':'wysh','email':'wysh<span class="doctag">@qq</span>.com'&#125;</span></span><br><span class="line">    <span class="comment"># db.insert('api_user',user_data)</span></span><br><span class="line">    <span class="comment"># db.close()</span></span><br><span class="line"></span><br><span class="line">    f = open(<span class="string">'datas.yaml'</span>, <span class="string">'r'</span>)</span><br><span class="line">    datas = yaml.load(f)</span><br><span class="line">    db.init_data(datas)</span><br></pre></td></tr></table></figure><ul><li>test_django_restful.py：对不同类型的接口请求（post，put，get，delete）进行单元测试，代码如下：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import unittest</span><br><span class="line">from  mysql_action import DB</span><br><span class="line">import yaml</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/users'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_get_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_get_user'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh1'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh1@qq.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'username'</span><span class="symbol">:<span class="string">'wysh6'</span></span>,<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh5@163.com'</span></span>,<span class="string">'groups'</span><span class="symbol">:<span class="string">'http://127.0.0.1:8000/groups/2/'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh6'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh5@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh555@163.com'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh555@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_user'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/4/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_005_no_auth</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_005_no_auth'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'detail'</span>],<span class="string">'Authentication credentials were not provided.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/groups'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_group_wysh</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_group'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'wysh_group1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Pm'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Pm'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Boss'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/2/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Boss'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_group'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    db=DB()</span><br><span class="line">    f=open(<span class="string">'datas.yaml'</span>,<span class="string">'r'</span>)</span><br><span class="line">    datas=yaml.load(f)</span><br><span class="line">    db.init_data(datas)</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><ul><li>data.yaml：以yaml格式存放接口初始数据，方便读取，代码如下：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import unittest</span><br><span class="line">from  mysql_action import DB</span><br><span class="line">import yaml</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/users'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_get_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_get_user'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh1'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh1@qq.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'username'</span><span class="symbol">:<span class="string">'wysh6'</span></span>,<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh5@163.com'</span></span>,<span class="string">'groups'</span><span class="symbol">:<span class="string">'http://127.0.0.1:8000/groups/2/'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh6'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh5@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh555@163.com'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh555@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_user'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/4/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_005_no_auth</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_005_no_auth'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'detail'</span>],<span class="string">'Authentication credentials were not provided.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/groups'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_group_wysh</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_group'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'wysh_group1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Pm'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Pm'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Boss'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/2/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Boss'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_group'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    db=DB()</span><br><span class="line">    f=open(<span class="string">'datas.yaml'</span>,<span class="string">'r'</span>)</span><br><span class="line">    datas=yaml.load(f)</span><br><span class="line">    db.init_data(datas)</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><ul><li>log.conf：日志配置文件，代码如下：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[loggers]</span></span><br><span class="line"><span class="attr">keys</span>=root,infoLogger</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_root]</span></span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">handlers</span>=consoleHandler,fileHandler</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_infoLogger]</span></span><br><span class="line"><span class="attr">handlers</span>=consoleHandler,fileHandler</span><br><span class="line"><span class="attr">qualname</span>=infoLogger</span><br><span class="line"><span class="attr">propagate</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[handlers]</span></span><br><span class="line"><span class="attr">keys</span>=consoleHandler,fileHandler</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_consoleHandler]</span></span><br><span class="line"><span class="attr">class</span>=StreamHandler</span><br><span class="line"><span class="attr">level</span>=INFO</span><br><span class="line"><span class="attr">formatter</span>=form02</span><br><span class="line"><span class="attr">args</span>=(sys.stdout,)</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_fileHandler]</span></span><br><span class="line"><span class="attr">class</span>=FileHandler</span><br><span class="line"><span class="attr">level</span>=INFO</span><br><span class="line"><span class="attr">formatter</span>=form01</span><br><span class="line"><span class="attr">args</span>=(<span class="string">'./logs/runlog.log'</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">[formatters]</span></span><br><span class="line"><span class="attr">keys</span>=form01,form02</span><br><span class="line"></span><br><span class="line"><span class="section">[formatter_form01]</span></span><br><span class="line"><span class="attr">format</span>=%(asctime)s %(filename)s[line:%(line<span class="literal">no</span>)d] %(levelname)s %(message)s</span><br><span class="line"></span><br><span class="line"><span class="section">[formatter_form02]</span></span><br><span class="line"><span class="attr">format</span>=%(asctime)s %(filename)s[line:%(line<span class="literal">no</span>)d] %(levelname)s %(message)s</span><br></pre></td></tr></table></figure><ul><li>run.py：程序的入口，代码如下：</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="title">from</span> <span class="type">BSTestRunner</span> <span class="keyword">import</span> BSTestRunner</span><br><span class="line"><span class="keyword">import</span> time,yaml</span><br><span class="line"><span class="title">from</span> mysql_action <span class="keyword">import</span> DB</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line"><span class="type">CON_LOG</span>='log.conf'</span><br><span class="line"><span class="title">logging</span>.config.fileConfig(<span class="type">CON_LOG</span>)</span><br><span class="line"><span class="title">logging</span>=logging.getLogger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">db</span>=<span class="type">DB</span>()</span><br><span class="line"><span class="title">f</span>=open('datas.yaml','r')</span><br><span class="line"><span class="title">datas</span>=yaml.load(f)</span><br><span class="line"><span class="title">db</span>.init_data(datas)</span><br><span class="line"></span><br><span class="line"><span class="title">test_dir</span>='.'</span><br><span class="line"><span class="title">report_dir</span>='./reports'</span><br><span class="line"></span><br><span class="line">discover=unittest.defaultTestLoader.discover(test_dir,pattern='test_django_restful.py')</span><br><span class="line"></span><br><span class="line">now=time.strftime('%<span class="type">Y</span>-%m-%d %<span class="type">H_</span>%<span class="type">M_</span>%<span class="type">S</span>')</span><br><span class="line">report_name=report_dir+'/'+now+' test_report.html'</span><br><span class="line"></span><br><span class="line">with open (report_name,'wb') as f:</span><br><span class="line">    runner=BSTestRunner(stream=f,title='<span class="type">Vincent</span> <span class="type">API</span> <span class="type">Test</span> <span class="type">Report</span>',description='<span class="type">Vincent</span> <span class="type">Django</span> <span class="type">Restful</span> <span class="type">API</span> <span class="type">Test</span> <span class="type">Report</span>')</span><br><span class="line">    logging.info('=========<span class="type">Start</span> <span class="type">API</span> <span class="type">Test</span>=============')</span><br><span class="line">    runner.run(discover)</span><br></pre></td></tr></table></figure><h3 id="程序执行"><a href="#程序执行" class="headerlink" title="程序执行"></a>程序执行</h3><p>运行run.py，会调用数据初始化、单元测试、日志、测试报告生成模块，测试报告生成在reports目录下，打开测试包括，会显示各个单元测试用例执行结果，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-890e43dbd5992c97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="report.jpg"></p><p>打开logs目录下的日志文件，会显示程序执行过程中的日志记录，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b51651f7ded06ee2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志.jpg"></p><h3 id="Jenkins集成"><a href="#Jenkins集成" class="headerlink" title="Jenkins集成"></a>Jenkins集成</h3><p>打开Jenkins持续集成平台，我们可以自动定时执行自动化任务，通过邮件发送测试报告，这样会有效提高测试效率</p><p>创建名称为：wysh_interface_tes 的任务，在构建中选择执行Windows批处理命令，输入如下内容：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">cd D:<span class="symbol">\d</span>jango_restful<span class="symbol">\a</span>pi<span class="symbol">\i</span>nterface_wysh</span><br><span class="line">E:<span class="symbol">\P</span>ython<span class="symbol">\P</span>ython36-32<span class="symbol">\p</span>ython3.exe run.py</span><br></pre></td></tr></table></figure></p><p>如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-2f85c4660eb5a0d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="windows批处理.jpg"></p><p>构建过程如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b7daf4aea05d1fac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jenkins.jpg"></p><p>构建完成后，同样也会在 reports 目录下生成相应的测试报告。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Django" scheme="http://wysh.site/categories/Django/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Django/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口" scheme="http://wysh.site/categories/Django/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/Django/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3/Python/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>接口自动化测试（Jmeter+Ant+Jenkins）</title>
    <link href="http://wysh.site/2018/11/19/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%EF%BC%88Jmeter+Ant+Jenkins%EF%BC%89/"/>
    <id>http://wysh.site/2018/11/19/接口自动化测试（Jmeter+Ant+Jenkins）/</id>
    <published>2018-11-18T17:25:26.000Z</published>
    <updated>2019-04-01T14:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>一个完整的接口自动化测试平台需要支持接口的自动执行,自动生成测试报告,以及持续集成。Jmeter支持接口的<br>测试,Ant支持自动构建,而 Jenkins支持持续集成,所以三者组合在一起可以构成个功能完善的接口自动化测试平台。</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><ul><li>JDK环境置</li><li>Jmeter安装</li><li>Ant安装环境变量配置</li><li>Jenkins安装</li></ul><h4 id="Ant简介"><a href="#Ant简介" class="headerlink" title="Ant简介"></a>Ant简介</h4><p>Apache Ant:是个将软件编译、测试、部署等步联系在一起加以自动化的工具,大多用于Java环境中的软件开发下载安装</p><p>下载地址:<a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">https://ant.apache.org/bindownload.cgi</a><br>下载之后解压到任意文件路径,我这里是放到C盘根目录<br>。</p><p>环境变量配置：</p><ul><li><p>ANT_HOME:  C:\apache-ant-1.10.5  </p></li><li><p>Path:  %ANT_HOME%\bin  </p></li><li><p>Classpath: %ANT_HOME%\lib</p></li></ul><h4 id="Jenkins简介"><a href="#Jenkins简介" class="headerlink" title="Jenkins简介"></a>Jenkins简介</h4><p>Jenkins是个开源软件项目,是基于Java开发的一种持集成工具,用于监控持续重复的工作,旨在提供一个开放易用的软件平台,使软件的持续集成变成可能</p><h4 id="依赖文件配置"><a href="#依赖文件配置" class="headerlink" title="依赖文件配置"></a>依赖文件配置</h4><ul><li><p>首先在 Jmeter 目录下面新建一个文件夹loadtest，文件夹名称不要使用下划线,空格等字符，并将脚本放置到该文件夹中。</p></li><li><p>将 Jmeter_extras文件中的ant-Jmeter-1.1.1.jar放到Ant中的lib文件夹中</p></li><li><p>将 Jmeter_extras文件中的 jmeter-results-detall-report_21.xsl, build.xml、 collapse.png、 expand.png放到ant目录中的bin目录下面。</p><h4 id="build-xml配置"><a href="#build-xml配置" class="headerlink" title="build.xml配置"></a>build.xml配置</h4><p>在Ant的bin目录中打开bui1d.xml文件,将文件内容修改为：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"ant-jmeter-test"</span> <span class="attr">default</span>=<span class="string">"all"</span> <span class="attr">basedir</span>=<span class="string">"."</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tstamp</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">format</span> <span class="attr">property</span>=<span class="string">"time"</span> <span class="attr">pattern</span>=<span class="string">"yyyyMMddhhmm"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tstamp</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 需要改成自己本地的 Jmeter 目录--&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.home"</span> <span class="attr">value</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- jmeter生成jtl格式的结果报告的路径--&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.jtl.dir"</span> <span class="attr">value</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0\loadtest\jtl"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- jmeter生成html格式的结果报告的路径--&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.html.dir"</span> <span class="attr">value</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0\loadtest\html"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ReportName"</span> <span class="attr">value</span>=<span class="string">"TestReport"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.jtlName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.jtl.dir&#125;</span><span class="xml"><span class="tag"><span class="string">/$</span></span></span><span class="template-variable">&#123;ReportName&#125;</span><span class="xml"><span class="tag"><span class="string">$</span></span></span><span class="template-variable">&#123;time&#125;</span><span class="xml"><span class="tag"><span class="string">.jtl"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.htmlName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.html.dir&#125;</span><span class="xml"><span class="tag"><span class="string">/$</span></span></span><span class="template-variable">&#123;ReportName&#125;</span><span class="xml"><span class="tag"><span class="string">$</span></span></span><span class="template-variable">&#123;time&#125;</span><span class="xml"><span class="tag"><span class="string">.html"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"all"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">antcall</span> <span class="attr">target</span>=<span class="string">"test"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">antcall</span> <span class="attr">target</span>=<span class="string">"report"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">name</span>=<span class="string">"jmeter"</span> <span class="attr">classname</span>=<span class="string">"org.programmerplanet.ant.taskdefs.jmeter.JMeterTask"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">jmeter</span> <span class="attr">jmeterhome</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.home&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">resultlog</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.jtlName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">testplans</span> <span class="attr">dir</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0\loadtest"</span> <span class="attr">includes</span>=<span class="string">"*.jmx"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">jmeter</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">          </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"report"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">xslt</span> <span class="attr">in</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.jtlName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></span><br><span class="line"><span class="xml">              out="$</span><span class="template-variable">&#123;jmeter.result.htmlName&#125;</span><span class="xml">"  </span></span><br><span class="line"><span class="xml">              style="$</span><span class="template-variable">&#123;jmeter.home&#125;</span><span class="xml">/extras/jmeter-results-detail-report_30.xsl" /&gt;  </span></span><br><span class="line"><span class="xml">          </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 因为上面生成报告的时候，不会将相关的图片也一起拷贝至目标目录，所以，需要手动拷贝 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.html.dir&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.home&#125;</span><span class="xml"><span class="tag"><span class="string">/extras"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"collapse.png"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"expand.png"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">copy</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Ant-构建"><a href="#Ant-构建" class="headerlink" title="Ant 构建"></a>Ant 构建</h4><p>执行以下命令进行构建</p><blockquote><p>ant -buildfile C:\apache-ant-1.10.5\bin\build.xml</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-3ad08276092a1717.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ant命令.jpg"></p><p>进入loadtest目录，可以看到生成如下文件:<br><img src="https://upload-images.jianshu.io/upload_images/12273007-e5d61ac18247a5bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成的文件.jpg"></p><h4 id="报告优化"><a href="#报告优化" class="headerlink" title="报告优化"></a>报告优化</h4><p>Jmeter默认生成的报告不是很详细,因比我们需要进行优化。</p><p>这里我们使用新的报告模板:<br>jmeter-results-detail-report_30.xsl</p><p>将模板放置到jmeter的extras目录下</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e3ffa55b85c97ec8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="30xls文件.jpg"></p><p>默认的服告模板是 Jmeter-results-detail-report_21<br>，打开build.xml将21改为</p><p>&lt;condition property=”style_version” value=_30”&gt;</p><p>最后执行即可生成最新的服告:样式如下.<br>可以清晰看到每个请求发送,响应内容</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-71a96b2da121bfd8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改后的报告.jpg"></p><h4 id="集成到-Jenkins"><a href="#集成到-Jenkins" class="headerlink" title="集成到 Jenkins"></a>集成到 Jenkins</h4><p>在Jenkins中新建个任务：interface_test_wysh</p><p>在构建选项中选择 Invoke Ants，然后在 Build File输入 build. xml 文件路径，注意不要输入到Targets 里面去<br>了,需要点击高级选项后才可以显示 Build File</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-7f17c33859cd53eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jenkins配置.jpg"></p><p>执行之后可以看到控制台输出和cmd的控制台输出是一样的</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a052f8dd686031b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台输出.jpg"></p><p>项目中涉及到的脚本及文件已上传至我的github中: <a href="https://github.com/wuyongsheng/interface_test_wysh" target="_blank" rel="noopener">https://github.com/wuyongsheng/interface_test_wysh</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Jmeter" scheme="http://wysh.site/categories/Jmeter/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Jmeter/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口" scheme="http://wysh.site/categories/Jmeter/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>近几年收藏的自拍照</title>
    <link href="http://wysh.site/2018/10/06/%E6%94%B6%E8%97%8F%E7%9A%84%E7%85%A7%E7%89%87/"/>
    <id>http://wysh.site/2018/10/06/收藏的照片/</id>
    <published>2018-10-06T01:49:38.000Z</published>
    <updated>2019-04-05T13:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>整理了近几年收藏的一些自拍照，精选了40张，把它们发布出来。</p><hr><p><strong><em>提示：文中的图片点击可放大</em></strong></p><h3 id="园博园"><a href="#园博园" class="headerlink" title="园博园"></a>园博园</h3><p>下面是2015年在园博园做智慧园博项目时拍摄的一组图片</p><blockquote><p>园博园入口处的欢迎图标</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-fb068ee480866c97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园欢迎你.jpg"></p><blockquote><p>开幕倒计时</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-089a2a4c6a50d0c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-开幕倒计时.jpg"></p><blockquote><p>2016年元宵节园博园里的灯展</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e14413308395e36d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-灯展1.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-48ed9ed031b701b3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-灯展2.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-69b310253fc53d27.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-灯展3.jpg"></p><blockquote><p>下面2张 图片是杭州园，园博园内最大最漂亮的园子之一</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b1766d4ab92bd809.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-杭州园.jpg"></p><blockquote><p>傍晚时分的杭州园</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-58f2829209559a46.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-杭州园2.jpg"></p><blockquote><p>荷兰园的郁金香</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-74789f7b931a8ab5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-荷兰园的郁金香.jpg"></p><blockquote><p>园博园内古典的庭院湖景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-bd2082a558c657e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园湖景.jpg"></p><blockquote><p>园博园花道</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-163f60468c24c62c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-花道.jpg"></p><blockquote><p>下面一组图片是长江文明馆及园林艺术中心里的一些照片</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-94bd38ee6a4cf2a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-黄鹤楼.jpg"></p><blockquote><p>园林艺术中心里的金鱼</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-1d94520f252d7ad6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-金鱼.jpg"></p><blockquote><p>长江文明馆里的馆藏（圣旨）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-4ee8038e492eef04.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-圣旨.jpg"></p><blockquote><p>水帘洞</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a4e3f996bd6370e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-水帘洞.jpg"></p><blockquote><p>晚上的睡莲</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-70cc5021d1f9fa12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园睡莲.jpg"></p><blockquote><p>园林艺术中心里面有我们黄梅的五祖寺</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-6cce882dcac1d30b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-五祖寺.jpg"></p><blockquote><p>园博园里面的指挥中心，为了这个项目，在这里面工作了半年</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-935a401f91e2a35f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-指挥中心.jpg"></p><h3 id="九江"><a href="#九江" class="headerlink" title="九江"></a>九江</h3><blockquote><p>九江博物馆</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-fe47c7052e578e38.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-博物馆.jpg"></p><blockquote><p>九江博物馆外面的湖</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9dc0c468cef222d5.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-市博物馆远景.JPG"></p><blockquote><p>九江江面上的轮船</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-adda73d71c6da9a4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-江面上的轮船.jpg"></p><blockquote><p>九江南山公园</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-041752c0eb2d3913.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江南山公园.jpg"></p><blockquote><p>九江江滩-浔阳江畔，白居易的琵琶行创作于此，“浔阳江头夜送客，枫叶荻花秋瑟瑟 ……”</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-be90974b78bd4166.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳江畔 1.jpg"></p><blockquote><p>九江江滩</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e63aea4a653c09aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳江畔2.jpg"></p><blockquote><p> 江边垂钓</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-64def9d545cb82f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳江畔-垂钓.jpg"></p><blockquote><p>九江的浔阳楼，水浒传中宋江写反诗的地方</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f3b65eb7100bf8c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳楼.jpg"></p><blockquote><p>九江长江大桥</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-351e558bbbd2acb2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江长江大桥.jpg"></p><h3 id="黄梅妙乐寺"><a href="#黄梅妙乐寺" class="headerlink" title="黄梅妙乐寺"></a>黄梅妙乐寺</h3><blockquote><p>妙乐寺正门</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-98337d21d6b570ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅-妙乐寺正门.jpg"></p><blockquote><p>妙乐寺里面的卧佛</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-75e0e00c77060a1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅_妙乐寺.jpg"></p><blockquote><p>妙乐寺里面的湖</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-0eba985ebbe3bd64.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅妙乐寺_湖.jpg"></p><blockquote><p>妙乐寺天王殿</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-c3e64ebe3db59bd1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅-妙乐寺-天王殿.jpg"></p><h3 id="江夏-汤逊湖"><a href="#江夏-汤逊湖" class="headerlink" title="江夏-汤逊湖"></a>江夏-汤逊湖</h3><blockquote><p>公路旁边的湖景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-605ddec0710b2463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汤逊湖.jpg"></p><blockquote><p>汤逊湖-暴雨即将降临</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-209588d07b862043.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汤逊湖_暴雨即将来临.jpg"></p><blockquote><p>汤逊湖湖景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a3e78a5ba18b048e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汤逊湖湖景.jpg"></p><h3 id="东湖"><a href="#东湖" class="headerlink" title="东湖"></a>东湖</h3><blockquote><p>东湖楚城</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f42ecd6778a47d2d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="东湖楚城.jpg"></p><blockquote><p>荷花池</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-8bff075361b0cbd0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="东湖荷花.jpg"></p><blockquote><p>东湖湖景，远处的高楼依稀可见</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f8f65b99c418320a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="东湖远景.jpg"></p><h3 id="光谷东-未来科技城"><a href="#光谷东-未来科技城" class="headerlink" title="光谷东-未来科技城"></a>光谷东-未来科技城</h3><blockquote><p>未来科技城的标志性建筑 - 马蹄莲</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-1a361c12a6467897.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="光谷东-未来科技城马蹄莲.jpg"></p><blockquote><p>未来科技城全景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-95ec3757cfe3307c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="光谷东-未来科技城全景图.jpg"></p><h3 id="湖北省博物馆"><a href="#湖北省博物馆" class="headerlink" title="湖北省博物馆"></a>湖北省博物馆</h3><blockquote><p>湖北随州出土的曾侯乙编钟原件</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-688a68be5a5a0a53.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="湖北省博物馆-编钟.jpg"></p><blockquote><p>天下第一剑 - 越王勾践剑</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-2f7c556a261f7e4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="湖北省博物馆-越王勾践剑.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="风景" scheme="http://wysh.site/categories/%E9%A3%8E%E6%99%AF/"/>
    
      <category term="收藏" scheme="http://wysh.site/categories/%E9%A3%8E%E6%99%AF/%E6%94%B6%E8%97%8F/"/>
    
    
      <category term="风景" scheme="http://wysh.site/tags/%E9%A3%8E%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>Selenium 自动化测试流程与规范</title>
    <link href="http://wysh.site/2018/09/10/selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%B8%8E%E8%A7%84%E8%8C%83/"/>
    <id>http://wysh.site/2018/09/10/selenium自动化测试流程与规范/</id>
    <published>2018-09-10T01:54:45.000Z</published>
    <updated>2019-04-01T14:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-目的"><a href="#1-1-目的" class="headerlink" title="1.1.目的"></a>1.1.目的</h3><p>此文档主要描述实施自动化功能测试的主要流程和具体规范，为实施自动化测试提供指导和参考。此文档所描述内容基于Selenium 自动化回归测试解决方案。</p><h3 id="1-2-Selenium简介"><a href="#1-2-Selenium简介" class="headerlink" title="1.2.Selenium简介"></a>1.2.Selenium简介</h3><p>Selenium 是 ThroughtWorks 公司一个强大的开源 Web 功能测试工具系列，包括Selenium-IDE、Selenium-RC、Selenium-Webdriver 以及 Selenium-Grid。在本自动化测试框架中我们可以灵活组合应用到其中的 Selenium-IDE、Selenium-Webdriver。<br>Selenium 2.0 的主要新功能是集成了 Webdriver 的 API。Webdriver 的设计提供一个更简单、更简洁的编程接口以及解决的 Selenium-RC API 中的一些限制。SeleniumWebdriver的开发是为了更好地支持动态网页的页面元素可能已经更改，但本身不被重新加载的页面。 Webdriver 的目标是提供一个设计良好的面向对象的 API、提供更好的支持，为 Web 应用程序测试问题。</p><h3 id="1-3-自动化实施目的"><a href="#1-3-自动化实施目的" class="headerlink" title="1.3.自动化实施目的"></a>1.3.自动化实施目的</h3><ul><li>自动执行重复工作较大回归测试。</li><li>Web 系统在不同环境下的兼容性测试（多操作系统和多浏览器）。</li><li>与 CI 服务集成，作为持续集成实践的一部分。<h3 id="1-4-参考资料"><a href="#1-4-参考资料" class="headerlink" title="1.4.参考资料"></a>1.4.参考资料</h3>《精通 QTP-自动化测试技术领航》 – 51Testing 软件测试组 人民邮电出版谁<br>《自动化软件测试实施指南》 – 译版 机械工业出版社<h2 id="2-Selenium自动化实施方案简介"><a href="#2-Selenium自动化实施方案简介" class="headerlink" title="2.Selenium自动化实施方案简介"></a>2.Selenium自动化实施方案简介</h2><h3 id="2-1-方案和工具介绍"><a href="#2-1-方案和工具介绍" class="headerlink" title="2.1.方案和工具介绍"></a>2.1.方案和工具介绍</h3><h4 id="2-1-1-实施方案"><a href="#2-1-1-实施方案" class="headerlink" title="2.1.1.实施方案"></a>2.1.1.实施方案</h4></li><li>自动化测试框架：Selenium 3（WebDriver）+ Page Object</li><li>用例管理系统：Testlink/TD</li><li>脚本开发：Java 语言</li><li>脚本生成方式：手工编写 + IDE 辅助元素识别</li><li>脚本运行方式：Testng 测试框架调度</li><li>测试数据：Testng 数据驱动</li><li>脚本回放：IE/Chrome/FireFox</li><li>自运行方案：Ant 批处理/CI 调度（Jenkins）</li><li>测试报告：Testng Report<h4 id="2-1-2-工具介绍"><a href="#2-1-2-工具介绍" class="headerlink" title="2.1.2.工具介绍"></a>2.1.2.工具介绍</h4>本套方案的工具组合如下：Eclipse + Selenium + testng + ant + Jenkins</li><li>Eclipse：集成开发工具，用来编写测试代码。</li><li>Selenium：是 ThoughtWorks 专门为 Web 应用而开发的自动化测试工具，适合进行功能测试、验收测试，选用 3.0 版本 WebDriver。</li><li>Testng: TestNG 是一种基于注释的测试框架，通过添加诸如灵活的装置、测试分类、参数测试和依赖方法等特性来克服 JUnit 的一些不足之处。</li><li>Ant：是一个将软件编译、测试、部署等步骤联系在一起加以自动化的一个工具，大多用于 java 环境中的软件开发，其作用是可以脱离开发环境，编译和运行程序。</li><li>Jenkins: 之前叫做 Hudson，是基于 Java 开发的一种持续集成工具，用于监控秩序重复的工作，包括：持续的软件版本发布/测试项目、监控外部调用执行的工作。<h3 id="2-2-Page-Object设计模式简介"><a href="#2-2-Page-Object设计模式简介" class="headerlink" title="2.2.Page Object设计模式简介"></a>2.2.Page Object设计模式简介</h3>Page Object 将测试对象及单个的测试步骤封装在每个 Page 对象中，以 page 为单位进行管理。<br>在 Web 应用程序的用户界面中存在测试交互。Page Object 可以用简单的用测试代码将页面对象模型化，从而减少了重复的代码量，如果 UI 发生变化，只需要在统一的地方变更。<h3 id="2-3-方案特性"><a href="#2-3-方案特性" class="headerlink" title="2.3.方案特性"></a>2.3.方案特性</h3></li><li>支持多环境下的兼容性测试</li><li>支持数据驱动（DDT）</li><li>对象库的分离和管理</li><li>自动化测试脚本的组织和管理</li><li>脚本的可重用（团队）和可配置</li><li>灵活的断言机制</li><li>便捷的后台服务</li><li>直观性的测试报告</li><li>支持与 CI 集成</li><li>强大的场景恢复<h3 id="2-4-方案适用的情形"><a href="#2-4-方案适用的情形" class="headerlink" title="2.4.方案适用的情形"></a>2.4.方案适用的情形</h3>自动化测试之所以能在很多大公司实施起来，就是有它适合自动化测试的特点和高的投资回报率。</li></ul><ol><li>产品型项目<br>产品型的项目，每个项目只改进少量的功能，但每个项目必须反反复复的测试那些没有改动过的功能。这部分测试完全可以让自动化测试来承担，同时可以把新加入的功能的测试也慢慢地加入到自动化测试当中。</li><li>增量式开发、持续集成项目<br>由于这种开发模式是频繁的发布新版本进行测试，也就需要自动化测试来频繁的测试，以便把人从中解脱出来测试新的功能。</li><li>能够自动编译、自动发布的系统<br>要能够完全实现自动化测试，必须能够具有自动化编译，自动化发布系统进行测试的功能。当然，不能达到这个要求也可以在手工干预下进行自动化测试。</li><li>回归测试<br>回归测试是自动化测试的强项，它能够很好的确保你是否引入了新的缺陷，老的缺陷是否修改过来了。在某种程度上可以把自动化测试工具叫做回归测试工具。</li><li>多次重复、机械性动作<br>自动化测试最喜欢测试：多次重复、机械性动作，这样的测试对它来说从不会失败。比如要向系统输入大量的相似数据来测试压力和报表。</li><li>需要频繁运行测试<br>在一个项目中需要频繁的运行测试，测试周期按天算，就能最大限度的利用测试脚本，提高工作效率。</li><li>将烦琐的任务转化为自动化测试<h3 id="2-5-方案不适用的情形"><a href="#2-5-方案不适用的情形" class="headerlink" title="2.5.方案不适用的情形"></a>2.5.方案不适用的情形</h3>自动化测试不是适合所有的公司、所有的项目。</li><li>定制型项目(一次性的)<br>为客户定制的项目，维护期由客户方承担的，甚至采用的开发语言、运行环境也是客户特别要求的，即公司在这方面的测试积累就少，这样的项目不适合做自动化测试。</li><li>项目周期很短的项目<br>项目周期很短，测试周期很短，就不值得花精力去投资自动化测试，好不容易建立起的测试脚本，不能得到重复的利用是不现实的。</li><li>业务规则复杂的对象<br>业务规则特别复杂的对象，有很多的逻辑关系、运算关系，工具就很难测试。</li><li>美观、声音、易用性测试<br>人的感观方面的：界面的美观、声音的体验、易用性的测试，也只有人来测试</li><li>测试很少运行<br>测试很少运行，对自动化测试就是一种浪费。自动化测试就是让它不厌其烦的、反反复复的运行才有效率。</li><li>软件不稳定<br>软件不稳定，则会由于这些不稳定因素导致自动化测试失败。只有当软件达到相对的稳定，没有界面性严重错误和中断错误才能开始自动化测试。</li><li>涉及物理交互<br>工具很难完成与物理设备的交互，比如刷卡的测试等。<h2 id="3-自动化测试环境"><a href="#3-自动化测试环境" class="headerlink" title="3.自动化测试环境"></a>3.自动化测试环境</h2><h3 id="3-1-开发环境"><a href="#3-1-开发环境" class="headerlink" title="3.1.开发环境"></a>3.1.开发环境</h3><h4 id="3-1-1-硬件环境"><a href="#3-1-1-硬件环境" class="headerlink" title="3.1.1.硬件环境"></a>3.1.1.硬件环境</h4>普通开发用的 PC 即可。<h4 id="3-1-2-软件环境"><a href="#3-1-2-软件环境" class="headerlink" title="3.1.2.软件环境"></a>3.1.2.软件环境</h4></li></ol><ul><li>Windows XP/7</li><li>Eclipse 4.2（含 testng 插件）</li><li>JDK 1.6</li><li>testng 6.7.0</li><li>selenium server 2.25 或以上</li><li>IE 8 或 9（含 IEDriver）、Firefox（含 firebug 插件）<h3 id="3-2-运行环境"><a href="#3-2-运行环境" class="headerlink" title="3.2.运行环境"></a>3.2.运行环境</h3><h4 id="3-2-1-硬件环境"><a href="#3-2-1-硬件环境" class="headerlink" title="3.2.1.硬件环境"></a>3.2.1.硬件环境</h4><ul><li>PC Server</li></ul></li><li>双核或四核（更佳）2.0G 以上主频</li><li>4G 或更大内存</li><li>80G 以上磁盘空间</li><li>100M 或以上以太网卡<h4 id="3-2-2-软件环境"><a href="#3-2-2-软件环境" class="headerlink" title="3.2.2.软件环境"></a>3.2.2.软件环境</h4></li><li>Windows、Linux</li><li>JRE 1.6</li><li>testng 6.7.0</li><li>selenium server 2.25 或以上</li><li>ant 1.8.4</li><li>IE（不支持 IE10，含 IEDriver）、Firefox、Google Chrome（含 ChromeDriver）<h2 id="4-自动化测试实施流程"><a href="#4-自动化测试实施流程" class="headerlink" title="4.自动化测试实施流程"></a>4.自动化测试实施流程</h2><h3 id="4-1-前置条件"><a href="#4-1-前置条件" class="headerlink" title="4.1.前置条件"></a>4.1.前置条件</h3>实施自动化测试之前需要对软件开发过程进行分析，以观察其是否适合使用自动化测试。通常需要同时满足以下条件：</li></ul><ol><li>软件需求变动不频繁。<br>测试脚本的稳定性决定了自动化测试的维护成本。如果软件需求变动过于频繁，测试人员需要根据变动的需求来更新测试用例以及相关的测试脚本，而脚本的维护本身就是一个代码开发的过程，需要修改、调试，必要的时候还要修改自动化测试的框架，如果所花费的成本不低于利用其节省的测试成本，那么自动化测试便是失败的。<br>项目中的某些模块相对稳定，而某些模块需求变动性很大。我们便可对相对稳定的模块进行自动化测试，而变动较大的仍是用手工测试。</li><li>项目周期足够长。<br>由于自动化测试需求的确定、自动化测试框架的设计、测试脚本的编写与调试均需要相当长的时间来完成。这样的过程本身就是一个测试软件的开发过程，需要较长的时间来完成。如果项目的周期比较短，没有足够的时间去支持这样一个过程，那么自动化测试便成为笑谈。</li><li>自动化测试脚本可重复使用。<br>如果费尽心思开发了一套近乎完美的自动化测试脚本，但是脚本的重复使用率很低，致使其间所耗费的成本大于所创造的经济价值，自动化测试便成为了测试人员的练手之作，而并非是真正可产生效益的测试手段了。<br>另外，在手工测试无法完成，需要投入大量时间与人力时也需要考虑引入自动化测试。比如性能测试、配置测试、大数据量输入测试等。<h3 id="4-2-流程图"><a href="#4-2-流程图" class="headerlink" title="4.2.流程图"></a>4.2.流程图</h3><img src="https://upload-images.jianshu.io/upload_images/12273007-ddab79712e42c730.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动化测试流程图.jpg"><h3 id="4-3-主要过程描述"><a href="#4-3-主要过程描述" class="headerlink" title="4.3.主要过程描述"></a>4.3.主要过程描述</h3><h4 id="4-3-1-可行性分析"><a href="#4-3-1-可行性分析" class="headerlink" title="4.3.1. 可行性分析"></a>4.3.1. 可行性分析</h4>在进行项目自动化测试之前，第一步就是要确认其可行性，是否可以实行测试自动化。在常见的不可行因素下，如果出现其中任何一种，自动化测试工作都是不应该展开的，项目常见不可行因素如下：</li></ol><ul><li>项目时间紧迫：如果项目进度很紧迫，开发周期的时间表很紧，每次交付间隔时间很短，你就没有时间进行测试自动化，也就不要考虑自动化测试了。</li><li>项目需求变幻无常：测试负责人应该及时和 PM 或专门的需求人员沟通来获得最直接的项目方面、客户方面的现有情况以及未来情况，从而最终通过分析来确认是否要进行自动化测试。因为 PM 和需求人员往往是对项目现今和未来的发展或对客户的思想及个性最了解的人群。如果项目是一个需求时常变化的项目，引入自动化测试的话，必定是个烂尾楼工程。</li><li>项目周期短：如果觉得在写完所有自动化测试脚本后，这些脚本只能仅仅为项目服务几个（6 个或更少）版本，不用多考虑，放弃自动化测试吧。</li><li>自动化测试工具对系统的有效性：如果上述的前 3 个和你所在的项目不沾边，那么请再看看这条因素。我们知道，想要开发自动化测试脚本，那么必须具备一款匹配的自动化测试工具，可以是开源的也可以是商业化的，甚至是自主研发一款。此时，就需要确切地了解这款测试工具能否应付项目中的需要。举个例，假设你所在的公司购买了一款商业化的自动化测试工具，项目系统中全部是一些 Java 控件，但是测试工具自带的插件中又不包含 Java 控件的识别插件，那么此时就算拥有这款自动化测试工具，但由于无法有效地识别到项目中的控件，所以，对于项目来说是毫无作用的。该过程产出物为《可行性分析报告》。<h4 id="4-3-2-抽样-demo-分析"><a href="#4-3-2-抽样-demo-分析" class="headerlink" title="4.3.2.抽样 demo 分析"></a>4.3.2.抽样 demo 分析</h4>通过可行性分析后，接下来要做的就是一个做 demo 了，等待 demo 完成后，可以再次通过分析看看自动化测试工作能否顺利地展开去，因为 demo 已经是一个实体案例，所以，可以完全通过透析 demo来发现是否存在技术上的致命问题。通常在 demo 完成之后，有经验的自动化测试工程师或组长就能对这个项目的自动化测试工作有一个大体的把握了。换言之，可以把 demo 看成更深层次的可行性分析，一旦通过了抽样 demo 分析，自动化测试就可以展开了。关于 demo 的选取，一般直接选择冒烟测试用例（大冒烟）写成测试脚本后执行，检查脚本是否能够成功运行通过，已设计的测试点是否全部执行到即可。<h4 id="4-3-3-测试需求分析"><a href="#4-3-3-测试需求分析" class="headerlink" title="4.3.3.测试需求分析"></a>4.3.3.测试需求分析</h4>到了测试需求分析这一步，分析的就不再是能否在项目中引入测试自动化了，而是在为下一阶段定制具体计划打下基础。测试需求其实就是测试目标，也可看做测试自动化的功能点，也就是自动化测试工程师想完成的任务。比如我们需要分析项目中具体有哪些测试需求（功能点）准备进行自动化测试。一条测试需求可以包含多条自动化测试用例，通过测试需求分析来判定项目中测试自动化要做到什么程度。举个例子，在自动化测试用例的设计上，大体是以正向、反向划分的，一般在自动化测试中，优先考虑实现正向的测试用例后再去实现反向的测试用例，而且反向的测试用例大多都是需要进行分析然后筛选出来的，因为反向的测试用例实在太多了。我们知道，自动化测试是不需要也没有必要做到 100%覆盖率的。所以，在测试需求分析这个阶段，确定测试覆盖率以及自动化测试粒度、测试用例上的筛选等都是重点工作。<h4 id="4-3-4-制定测试计划"><a href="#4-3-4-制定测试计划" class="headerlink" title="4.3.4.制定测试计划"></a>4.3.4.制定测试计划</h4>在经过了测试需求分析阶段后，项目 PM 和自动化测试组长就该正式起草正式方案了。<br>与以前的测试计划过程一致，只是在原来的测试计划中，添加对项目实施自动化测试所需的资源、测试范围、测试进度的描述。该过程产出物为《测试计划》。<h4 id="4-3-5-自动化测试设计"><a href="#4-3-5-自动化测试设计" class="headerlink" title="4.3.5.自动化测试设计"></a>4.3.5.自动化测试设计</h4><strong>框架设计、开发与搭建</strong><br>自动化测试框架是能保证测试的分布执行，脚本模块化,数据驱动，日志分析，错误截图，报表回收,共享对象库，公共函数库，环境配置，统一设计模式，异常处理,场景恢复等的一个无人值守的，针对每个独立项目的测试框架。<br><strong>测试用例设计</strong><br>自动化测试流程其实跟手工测试流程差不太多，要先编写测试用例，只是被叫作自动化测试用例而已。先设计好自动化测试用例，再严格根据设计完成的测试用例编写测试脚本，这是一种规律、一个过程。此过程产出物为《自动化测试用例》。<br>自动化测试用例设计和手工测试用例设计是有明显区别的，手工测试用例是从无到有的过程，而自动化测试用例不是的。自动化测试用例是有参考物的，它就是手工测试用例。它有时候可以直接拿来用、有时候需要稍加修改，在此把整个自动化测试用例设<br>计过程分为 3 步：</li><li>筛选手工测试用例的过程。</li><li>转换手工测试用例的过程。一般转换要素无非两种，一种就是测试用例的格式和规则，另一种就是优化自动化测试业务流程。自动化测试业务流程和手工测试业务流程还是有一定区别的，自动化测试业务流程更精简、严格。</li><li>新增&amp;补充自动化测试用例的过程。<h4 id="4-3-6-测试脚本开发"><a href="#4-3-6-测试脚本开发" class="headerlink" title="4.3.6.测试脚本开发"></a>4.3.6.测试脚本开发</h4>根据《软件需求规格说明书》、《自动化测试用例》、《系统原型》，录制、调试、编写各个功能点的自动化测试脚本，并添加检查点，进行参数化。该过程还需要编写数据文件处理脚本、日志文件处理脚本、数据库处理脚本、公共检查点处理脚本等等。该过程的产出物是各个功能点的自动化测试脚本和其他公共处理脚本。<br>此过程需要注意的是：</li><li>自动化测试脚本代码必须严谨、规范。</li><li>自动化测试脚本需参照自动化测试用例开发，测试用例即是开发参照物。</li><li>尽一切可能使自动化测试脚本更智能、高效、稳定、复用性高。</li><li>开发过程多利用插桩+断点，检查业务组件是否存在缺陷或代码是否存在漏洞。</li><li>脚本开发完毕后，至少运行成功 3 次以上，方可认为脚本已经没有问题。</li><li>必须使用一款优秀的代码版本管理软件来管理好每一个测试版本的自动化测试脚本，这也是自动化测试项目中非常重要的环节。<h4 id="4-3-7-自动化测试数据设计"><a href="#4-3-7-自动化测试数据设计" class="headerlink" title="4.3.7.自动化测试数据设计"></a>4.3.7.自动化测试数据设计</h4>根据《软件需求规格说明书》、《自动化测试用例》设计出对各个功能点和相关业务规则进行测试的输入数据和预期输出，填写入对应的数据文件中。该过程的产出物是各个功能点的数据文件。<h4 id="4-3-8-自动化测试执行"><a href="#4-3-8-自动化测试执行" class="headerlink" title="4.3.8.自动化测试执行"></a>4.3.8.自动化测试执行</h4>测试脚本开发完成后就要对测试脚本进行管理，执行；测试脚本的执行主要包含如下内容：</li><li>测试环境的管理配置</li><li>测试脚本配置</li><li>测试脚本的执行</li><li>测试异常中断处理和恢复<h4 id="4-3-9-自动化测试结果分析"><a href="#4-3-9-自动化测试结果分析" class="headerlink" title="4.3.9.自动化测试结果分析"></a>4.3.9.自动化测试结果分析</h4>对测试结果文件中报告错误的记录进行分析，如果确实是由于被测系统的缺陷导致，则提交缺陷报告。对自动化测试的结果进行总结，分析系统存在的问题，提交《测试报告》。<h3 id="4-3-10-自动化测试脚本维护"><a href="#4-3-10-自动化测试脚本维护" class="headerlink" title="4.3.10.自动化测试脚本维护"></a>4.3.10.自动化测试脚本维护</h3>如果系统发生变更时，对自动化测试脚本和相关文档包括《自动化测试用例》、《自动化脚本设计说明书》进行维护，以适应变更后的系统。<h3 id="4-4-脚本开发流程简述"><a href="#4-4-脚本开发流程简述" class="headerlink" title="4.4.脚本开发流程简述"></a>4.4.脚本开发流程简述</h3></li></ul><ol><li>安装配置开发环境和工具</li></ol><ul><li>安装配置 JDK</li><li>安装 Eclipse</li><li>安装 testng 插件</li><li>新建 testng 测试项目</li><li>导入需要的 jar 包和 driver 驱动</li></ul><ol start="2"><li>制定手工 case</li><li>脚本录制、对象识别</li><li>编写公共方法和公共 case</li><li>Case 分层编码实现</li><li>加入适当的断言覆盖手工 case 的验证点</li><li>调试回放运行<h3 id="4-5-自动化测试项目“标配”"><a href="#4-5-自动化测试项目“标配”" class="headerlink" title="4.5.自动化测试项目“标配”"></a>4.5.自动化测试项目“标配”</h3>下述各角色依据人力资源配备情况，可兼任，建议最少配置 3 人。</li></ol><ul><li>自动化测试组长<br>自动化测试团队最高管理，负责自动化测试项目从自动化立项到进度实施，到验收报告等整个测试流程；负责团队人员调度与管理；负责与上级领导、项目经理、手工测试负责人沟通与协调，并带领整个自动化小组工作</li><li>测试开发工程师<br>需要较高的技术水平，通常负责自动化测试框架的设计与搭建；负责自动化项目实施过程中各类技术难点的解决；负责公共数据的提炼和开发，如公共函数库等。</li><li>用例设计工程师<br>由团队中对业务和手工测试情况最熟悉的人员担当。负责自动化测试用例的设计开发工作，及今后的测试用例维护工作；负责测试脚本的验收工作，监督测试脚本业务逻辑是否与设计好的自动化测试用例一致。</li><li>脚本开发工程师<br>负责自动化测试脚本的设计与开发；负责脚本合并联调工作；负责后期的脚本维护工作。</li><li>配置管理<br>类似文职人员，可以没有代码开发经验。负责整个自动化团队日常工作中的文档变更记录的整理、公共对象库管理、代码版本管理及公共函数库管理等。<h2 id="5-自动化测试实施规范"><a href="#5-自动化测试实施规范" class="headerlink" title="5.自动化测试实施规范"></a>5.自动化测试实施规范</h2><h3 id="5-1-用例选取标准"><a href="#5-1-用例选取标准" class="headerlink" title="5.1.用例选取标准"></a>5.1.用例选取标准</h3></li><li>该测试是否包含核心业务流程</li><li>该测试是否覆盖了最关键的特性路径</li><li>该测试的重复执行率较高</li><li>该测试是否定期运行，比如，经常重用，还作为回归测试或构建测试的一部分</li><li>对于手动运行这个测试是否太昂贵而不可能或是禁止的，如并行，渗透，耐力测试，内存泄漏等</li><li>是否有对时间敏感的组件而必须自动化</li><li>该测试是否覆盖了最复杂的领域（通常是最有可能出错的领域）</li><li>使用相同步骤时，该测试是否需要许多数据组合</li><li>期望的结果是常数吗，比如每一次测试时都不会改变或不同？即使结果不同，是否可参数化（结果可预知）或可测出一个与期望结果的可接受的百分比（结果不可预知）</li><li>该测试是否非常耗时，如对成百上千的输出进行预期的分析</li><li>该测试是否运行在稳定的应用上</li><li>运行速度很慢的 case 不应该选取为自动化实现</li><li>自动化测试用例是否包含了手工测试的基线用例集</li><li>自动化的用例以正向用例为主，辅以个别重要的反向用例<h3 id="5-2-验证点规范"><a href="#5-2-验证点规范" class="headerlink" title="5.2.验证点规范"></a>5.2.验证点规范</h3><h4 id="5-2-1-验证点选取标准"><a href="#5-2-1-验证点选取标准" class="headerlink" title="5.2.1.验证点选取标准"></a>5.2.1.验证点选取标准</h4>自动化 case 的验证点需满足对手工 case 验证点的覆盖，这里说的手工 case 是专门为自动化测试选取的，验证点也是专门为自动化测试优化选取的，验证点选取原则如下：</li><li>要选取能覆盖当前 case 本质的主要验证点</li><li>尽量选取前台的明文验证点，即验证点在页面上可见，方便获取</li><li>前台无法验证的 case，需要去后台验证的情况下，需提供查询的表名与字段以及验证关系</li><li>新增类 case 的验证点需新增保存成功后重新查询比对查询结果得出</li><li>修改类 case 的验证点需修改保存保存成功后重新查询比对查询结果得出</li><li>数据计算类的验证点需要在数据驱动中提供预期结果</li><li>页面跳转类的验证点可以选 page title 或判断页面上比较特殊的元素的存在性<h4 id="5-2-2-脚本断言机制"><a href="#5-2-2-脚本断言机制" class="headerlink" title="5.2.2.脚本断言机制"></a>5.2.2.脚本断言机制</h4>断言是 testng 中提供的一种判断验证点是否通过的机制，需要说明的是：如果某个断言失败，则当前 case 会自动结束并 fail 掉，不会继续执行当前 case 的后续步骤。断言可以添加在业务层即 business 层也可以添加到 case 层，可根据 case 的实际业务选择断言的置，为了代码风格的统一并尽量少的引入 jar 包，断言建议使用 testng 自带断言org.testng.Assert，尽量不要使用 junit 断言。<br>Testng 提供了多种断言方法，详见 Testng API Assert 类。建议优先选用下面的断言：</li><li>Assert.assertEquals(expected, actual);：期望值与实际值比较</li><li>Assert.assertTrue(Boolean expression)：布尔表达式即为验证点的预期值与实际值的关系</li><li>Assert.fail(“failing message”)：对于可预知失败的验证点<h3 id="5-3-待测系统开发规范"><a href="#5-3-待测系统开发规范" class="headerlink" title="5.3.待测系统开发规范"></a>5.3.待测系统开发规范</h3>此章节主要罗列影响自动化测试编码的几个重要的规范，其余规范请遵循 Java Web应用开发通用编码规范。</li><li>元素的 ID 名有意义且尽量不要使用动态 ID</li><li>一个页面上的所有元素的 name 名尽量保证不重复</li><li>日期选择控件需要支持手动输入</li><li>文件上传控件的路径需要支持手动输入</li><li>尽量少的使用弹出页面</li><li>尽量避免使用 js 监听浏览器的关闭事件，会导致浏览器无法正常关闭<h3 id="5-4-自动化脚本编码规范"><a href="#5-4-自动化脚本编码规范" class="headerlink" title="5.4.自动化脚本编码规范"></a>5.4.自动化脚本编码规范</h3><h4 id="5-4-1-基本信息"><a href="#5-4-1-基本信息" class="headerlink" title="5.4.1.基本信息"></a>5.4.1.基本信息</h4>在每个脚本模块的最上面，必须写上脚本运行的软件和硬件环境（如 IE 版本、框架版本、数据库版本等）、项目名称、脚本编写人（使用英文名或中文拼音缩写）、脚本创建时间、脚本修改时间、修改说明、输入参数、输出参数、脚本描述等。<h4 id="5-4-2-常量命名规范"><a href="#5-4-2-常量命名规范" class="headerlink" title="5.4.2.常量命名规范"></a>5.4.2.常量命名规范</h4>常量的命名应该全部用大写，使用”_”作为单词间的分隔符，单词尽量使用全名称，如，final int MY_SCORE = 100;。另外，对常量的声明必须带上类型。<h4 id="5-4-3-变量命名规范"><a href="#5-4-3-变量命名规范" class="headerlink" title="5.4.3. 变量命名规范"></a>5.4.3. 变量命名规范</h4>变量命名应该简单，应尽量使用缩写。如果是一般的值类型（如 int、String），则直接使用变量用途命名。尽量使用全名，例如，String name；如果是一般的临时性变量定义，应该尽可能地简单，例如，int i；如果名称由多个单词组成，则取每个单词的首字母，如 EntityManager 缩写为 em，ProcedureManager 缩写为 pm；如果名称由一个单词组成，则对单词进行分段取首字母，如 Entity 缩写为 et。缩写应该控制在 3 个字母以内，且尽量清晰。<h4 id="5-4-4-参数命名规范"><a href="#5-4-4-参数命名规范" class="headerlink" title="5.4.4. 参数命名规范"></a>5.4.4. 参数命名规范</h4>参数命名的原则是全部用小写，如果参数包括两个或两个以上的单词时，首单词字母小写，其他单词首字母大写，如 stepName、stepDescription。<h4 id="5-4-5-方法命名规范"><a href="#5-4-5-方法命名规范" class="headerlink" title="5.4.5.方法命名规范"></a>5.4.5.方法命名规范</h4>方法表示的是一个动作，所以它的结构应该是动词+名词，动词必须小写，后面的名称首字母大写，如 getMaterialCode。函数命名尽量不要使用缩写，而且它的名称应该使人一目了然，能够从名称就知道这个函数的功能，不要使用无意义的函数名称。当函数名称不足以表达其功能时，应使用在函数头部加上让调用者足够明白的注释。<h4 id="5-4-6-代码注释规范"><a href="#5-4-6-代码注释规范" class="headerlink" title="5.4.6.代码注释规范"></a>5.4.6.代码注释规范</h4>注释务必做到准确简洁，能够充分表达代码实现的功能。<h4 id="5-4-7-空行"><a href="#5-4-7-空行" class="headerlink" title="5.4.7.空行"></a>5.4.7.空行</h4>空行是区分代码块与块的间隔，在函数之间必须加上空行；而在函数内部，变量声明块和实现块（实现块指除变量声明外的其他代码）要使用空行来间隔，实现块的内部，通过空行来标识一个功能段。<h4 id="5-4-8-缩进"><a href="#5-4-8-缩进" class="headerlink" title="5.4.8.缩进"></a>5.4.8.缩进</h4>必须严格执行缩进，变量声明块不缩进，实现块必须保证全部缩进（不可能有实现块是行首对齐的）；对于基本的控制结构来说，必须要有缩进，如 IF、DO、FOR、WHILE块。<h4 id="5-4-9-续行"><a href="#5-4-9-续行" class="headerlink" title="5.4.9.续行"></a>5.4.9.续行</h4>对于过长的语句来说，必须使用续行，续行的位置要有明显意义，例如，sql=”SELECT [code]，[name] FROM [Person]”_&amp;”WHERE [code] LIKE’001%’”。<br>另外，还要通过管理对象库来提高代码的可读性，通过修改命名来达到更加易读的效果。对于使用比较频繁的代码块来说，最好将其写成函数，并尽量将功能复杂的大函数拆分成小函数。<h4 id="5-4-10-检查点检查"><a href="#5-4-10-检查点检查" class="headerlink" title="5.4.10.检查点检查"></a>5.4.10.检查点检查</h4>每个测试脚本都应该有相应的检查点及对应的检查结果输出。<h3 id="5-5-结构分层规范"><a href="#5-5-结构分层规范" class="headerlink" title="5.5.结构分层规范"></a>5.5.结构分层规范</h3><h4 id="5-5-1-Control-层"><a href="#5-5-1-Control-层" class="headerlink" title="5.5.1.Control 层"></a>5.5.1.Control 层</h4>框架底层，定义web page的基本元素类型（含元素识别、属性、方法），勿轻易修改。<h4 id="5-5-2-Util-层"><a href="#5-5-2-Util-层" class="headerlink" title="5.5.2.Util 层"></a>5.5.2.Util 层</h4>对 selenium driver方法的 重定义 与 封 装 （ Selenium2Proxy） 、 自 定 义 通 用 方 法（CommonMethord）、公共case方法（CommonCase），第三方服务等，可根据需要自行添加<h4 id="5-5-3-Page-层"><a href="#5-5-3-Page-层" class="headerlink" title="5.5.3.Page 层"></a>5.5.3.Page 层</h4>以页面为单位，定义页面上的元素识别与基本动作（赋值、点击等），一个页面对应一个java文件<h4 id="5-5-4-Business-层"><a href="#5-5-4-Business-层" class="headerlink" title="5.5.4.Business 层"></a>5.5.4.Business 层</h4>一个页面对应一个java文件，定义该页面上的所有基本事务（查询、新增、删除等），事务是page层所定义元素的动作组合<h4 id="5-5-5-Case-层"><a href="#5-5-5-Case-层" class="headerlink" title="5.5.5.Case 层"></a>5.5.5.Case 层</h4>Case实现层，是business层、page层所定义对象的组合操作，并加入适当的断言（验证点）。Case组织方式请参看“用例组织规范”<h4 id="5-5-6-Data-层"><a href="#5-5-6-Data-层" class="headerlink" title="5.5.6.Data 层"></a>5.5.6.Data 层</h4>数据驱动层，定义case层中的测试方法所用到的数据<h4 id="5-5-7-Config-层"><a href="#5-5-7-Config-层" class="headerlink" title="5.5.7.Config 层"></a>5.5.7.Config 层</h4>配置定义，含浏览器驱动配置、配置文件读取等，勿轻易修改。<h3 id="5-6-用例组织规范"><a href="#5-6-用例组织规范" class="headerlink" title="5.6.用例组织规范"></a>5.6.用例组织规范</h3>如项目 case 总数量不多（1500 以内），为了提高回放通过率，建议使用低耦合的方式组织 case，即每个测试方法结束后将浏览器关闭。如果 case 数量较多，为了保证一次自动化的构建所占用的时间不会特别长以至于无法接受，建议将 case 改造为高耦合的方式 ，即每次启动浏览器后完成一系列相关的 case 执行后再关闭浏览器，case 执行顺序通过 dependsOnMethods 实现。构建两个测试基类，可实现在一个自动化构建中两种方式并存。<br><strong>低耦合方式组织 case</strong></li><li>一个模块对应一个 class</li><li>一个测试对应一个@test，测试方法无需指定执行顺序，默认顺序或者随机顺序执行都可以</li><li>Case 可自定义属于 Groups，如 groups = { “uitest”, “funtest” }</li><li>浏览器的初始化与全局元素等待在基类的@BeforeMethod 中定义</li><li>浏览器的关闭与其他资源回收在基类的@AfterMethod 中定义</li><li>Xml 中配置需要执行的 class 与 groups 即可<br><strong>高耦合方式组织 case</strong></li><li>一个模块下的有关联的一系列 case 对应一个 class</li><li>一个测试对应一个@test，测试方法需指定执行顺序，用 dependsOnMethods 实现</li><li>浏览器的初始化与全局元素等待在基类的@BeforeClass 中定义</li><li>浏览器的关闭与其他资源回收在基类的@AfterClass 中定义</li><li>Xml 中配置需要执行的 class 与 groups 即可<br><img src="https://upload-images.jianshu.io/upload_images/12273007-eaea0f4735f0822b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xml配置.jpg"><h3 id="5-7-对象识别规范"><a href="#5-7-对象识别规范" class="headerlink" title="5.7.对象识别规范"></a>5.7.对象识别规范</h3>Selenium 提供了如下的对象识别方法，参考 API 中 Class By。<br><img src="https://upload-images.jianshu.io/upload_images/12273007-54fac7bc487278ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对象识别.jpg"></li><li>优先选择 By.id,By.name,By.classname</li><li>优先选择当前页面中不重名的属性</li><li>如遇重名属性，使用 List 返回多个元素，使用时根据元素在 List 中的位置调用</li><li>极其难以定位的元素可以考虑使用 xpath 定位<h3 id="5-8-脚本回放规范"><a href="#5-8-脚本回放规范" class="headerlink" title="5.8.脚本回放规范"></a>5.8.脚本回放规范</h3>Selenium 脚本回放由快到慢：htmlunit&gt;chrome&gt;firefox&gt;ie。</li><li>Htmlunit 回放时无界面，对 js 支持不是很好，不建议使用</li><li>本地开发时选择适合自己的回放浏览器（不建议使用 IE6，推荐 IE8 和Chrome）</li><li>执行机批量执行选择可兼容的最快的浏览器进行回放</li><li>浏览器兼容性测试时选择需求规定的浏览器回放</li><li>建议控制每个测试方法的回放速度在 60S 之内，通过优化测试脚本实现</li><li>为防止因某个测试方法卡住很长时间影响整个自动化构建的持续运行，所有测试方法应该加上超时限制，如：timeOut = 120000(ms)，时间长短根据当前case 的复杂程度人为判定</li><li>为提高元素识别的准确率和稳定性，自动化测试回放时浏览器默认最大化处理</li><li>为提高元素识别的准确率与识别速度，自动化测试回放时需设置全局的元素默认等待时间，implicitlyWait(10, TimeUnit.SECONDS)，建议 10S<h2 id="6-其他注意项"><a href="#6-其他注意项" class="headerlink" title="6. 其他注意项"></a>6. 其他注意项</h2></li></ul><ol><li>注意根据项目特点选取 case 的组织形式，如项目 case 较多，建议采用高耦合的方式组织 case，以提高回放执行的效率</li><li>善用 aftermethod 和 afterclass 方法，对资源进行回收，避免脚本执行机器的资源被大量占用而引起当机（常见于浏览器和 driver 没有回收）</li><li>避免死脚本的出现，如数据硬编码，唯一键冲突，无效数据驱动等</li><li>断言失败会导致 case 中断执行，故不是每个步骤都需要加入验证点</li><li>已知处理表格时，全局的元素等待会造成表格遍历的性能问题，故处理表格之前需要将全局元素等待时间归 0，表格处理完毕后再还原</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Selenium" scheme="http://wysh.site/categories/Selenium/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>selenium+python破解滑动验证码</title>
    <link href="http://wysh.site/2018/08/05/selenium+python%E7%A0%B4%E8%A7%A3%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://wysh.site/2018/08/05/selenium+python破解滑动验证码/</id>
    <published>2018-08-05T01:39:59.000Z</published>
    <updated>2019-04-01T14:09:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://upload-images.jianshu.io/upload_images/11925665-d70f3ec59f0edc81.gif?imageMogr2/auto-orient/strip" alt="破解滑动验证码动态图片.gif"></p><blockquote><p>最近在参与公司大数据项目的测试，其中部分数据来源于网络爬虫，想用selenium辅助测试，无奈有验证码（滑动验证码），于是就想着怎么破解，参考了网上的一些破解的方法，发现有一定的失败的概率，自己加以改进后，最终破解成功达到了100%，程序执行破解的过程见如上动图所示：</p></blockquote><h2 id="提示：文中的图片点击可放大"><a href="#提示：文中的图片点击可放大" class="headerlink" title="提示：文中的图片点击可放大  "></a><strong><em>提示：文中的图片点击可放大</em></strong>  </h2><p>破解的原理大概是这样的：使用selenium拖动滑块，识别图片中的缺口，然后将滑块拖动至缺口处，完成拼图。整个过程看似简单，但程序处理起来并不简单：1、怎么判断缺口的位置，这个要对比图片背景的色差，2、怎么模拟人类拖动滑块的操作，匀速滑动或者一次性滑动到位都会被判定为程序行为而非人工操作，从而被禁止，这个可以通过随机函数进行随机滑动，3、操作的时候可能会失败，这个可以递归调用滑动操作，失败后重新刷新验证码并再一次进行滑动操作，直至成功。</p><hr><p>找到了两种破解方法，方法一单次破解的成功率在20%左右，通常需要递归调用4到5次就能破解成功，方法二单次破解成功率在90%左右，通常只用调用1次就能破解成功，最多不超过2次。</p><p>以下是方法一和方法二的源代码：</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> image</span><br><span class="line"><span class="keyword">import</span> time,re, random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬虫模拟的浏览器头部信息</span></span><br><span class="line">agent = <span class="string">'Mozilla/5.0 (Windows NT 5.1; rv:33.0) Gecko/20100101 Firefox/33.0'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: agent</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据位置对图片进行合并还原</span></span><br><span class="line"><span class="comment"># filename:图片</span></span><br><span class="line"><span class="comment"># location_list:图片位置</span></span><br><span class="line"><span class="comment">#内部两个图片处理函数的介绍</span></span><br><span class="line"><span class="comment">#crop函数带的参数为(起始点的横坐标，起始点的纵坐标，宽度，高度）</span></span><br><span class="line"><span class="comment">#paste函数的参数为(需要修改的图片，粘贴的起始点的横坐标，粘贴的起始点的纵坐标）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_merge_image</span><span class="params">(filename,location_list)</span>:</span></span><br><span class="line">    <span class="comment">#打开图片文件</span></span><br><span class="line">    im = image.open(filename)</span><br><span class="line">    <span class="comment">#创建新的图片,大小为260*116</span></span><br><span class="line">    new_im = image.new(<span class="string">'RGB'</span>, (<span class="number">260</span>,<span class="number">116</span>))</span><br><span class="line">    im_list_upper=[]</span><br><span class="line">    im_list_down=[]</span><br><span class="line">    <span class="comment"># 拷贝图片</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> location_list:</span><br><span class="line">        <span class="comment">#上面的图片</span></span><br><span class="line">        <span class="keyword">if</span> location[<span class="string">'y'</span>]==<span class="number">-58</span>:</span><br><span class="line">            im_list_upper.append(im.crop((abs(location[<span class="string">'x'</span>]),<span class="number">58</span>,abs(location[<span class="string">'x'</span>])+<span class="number">10</span>,<span class="number">166</span>)))</span><br><span class="line">        <span class="comment">#下面的图片</span></span><br><span class="line">        <span class="keyword">if</span> location[<span class="string">'y'</span>]==<span class="number">0</span>:</span><br><span class="line">            im_list_down.append(im.crop((abs(location[<span class="string">'x'</span>]),<span class="number">0</span>,abs(location[<span class="string">'x'</span>])+<span class="number">10</span>,<span class="number">58</span>)))</span><br><span class="line">    new_im = image.new(<span class="string">'RGB'</span>, (<span class="number">260</span>,<span class="number">116</span>))</span><br><span class="line">    x_offset = <span class="number">0</span></span><br><span class="line">    <span class="comment">#黏贴图片</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_upper:</span><br><span class="line">        new_im.paste(im, (x_offset,<span class="number">0</span>))</span><br><span class="line">        x_offset += im.size[<span class="number">0</span>]</span><br><span class="line">    x_offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_down:</span><br><span class="line">        new_im.paste(im, (x_offset,<span class="number">58</span>))</span><br><span class="line">        x_offset += im.size[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> new_im</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载并还原图片</span></span><br><span class="line"><span class="comment"># driver:webdriver</span></span><br><span class="line"><span class="comment"># div:图片的div</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image</span><span class="params">(driver,div)</span>:</span></span><br><span class="line">    <span class="comment">#找到图片所在的div</span></span><br><span class="line">    background_images=driver.find_elements_by_xpath(div)</span><br><span class="line">    location_list=[]</span><br><span class="line">    imageurl=<span class="string">''</span></span><br><span class="line">    <span class="comment">#图片是被CSS按照位移的方式打乱的,我们需要找出这些位移,为后续还原做好准备</span></span><br><span class="line">    <span class="keyword">for</span> background_image <span class="keyword">in</span> background_images:</span><br><span class="line">        location=&#123;&#125;</span><br><span class="line">        <span class="comment">#在html里面解析出小图片的url地址，还有长高的数值</span></span><br><span class="line">        location[<span class="string">'x'</span>]=int(re.findall(<span class="string">"background-image: url\(\"(.*)\"\); background-position: (.*)px (.*)px;"</span>,background_image.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">        location[<span class="string">'y'</span>]=int(re.findall(<span class="string">"background-image: url\(\"(.*)\"\); background-position: (.*)px (.*)px;"</span>,background_image.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">        imageurl=re.findall(<span class="string">"background-image: url\(\"(.*)\"\); background-position: (.*)px (.*)px;"</span>,background_image.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        location_list.append(location)</span><br><span class="line">    <span class="comment">#替换图片的后缀,获得图片的URL</span></span><br><span class="line">    imageurl=imageurl.replace(<span class="string">"webp"</span>,<span class="string">"jpg"</span>)</span><br><span class="line">    <span class="comment">#获得图片的名字</span></span><br><span class="line">    <span class="comment"># imageName = imageurl.split('/')[-1]</span></span><br><span class="line">    imageName = <span class="string">'77777777'</span></span><br><span class="line">    <span class="comment">#获得图片</span></span><br><span class="line">    session = requests.session()</span><br><span class="line">    r = session.get(imageurl, headers = headers, verify = <span class="keyword">False</span>)</span><br><span class="line">    <span class="comment">#下载图片</span></span><br><span class="line">    <span class="keyword">with</span> open(imageName, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="comment">#重新合并还原图片</span></span><br><span class="line">    image=get_merge_image(imageName, location_list)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment">#对比RGB值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_similar</span><span class="params">(image1,image2,x,y)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#获取指定位置的RGB值</span></span><br><span class="line">    pixel1=image1.getpixel((x,y))</span><br><span class="line">    pixel2=image2.getpixel((x,y))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="comment"># 如果相差超过50则就认为找到了缺口的位置</span></span><br><span class="line">        <span class="keyword">if</span> abs(pixel1[i]-pixel2[i])&gt;=<span class="number">50</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算缺口的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_diff_location</span><span class="params">(image1,image2)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="comment"># 两张原始图的大小都是相同的260*116</span></span><br><span class="line">    <span class="comment"># 那就通过两个for循环依次对比每个像素点的RGB值</span></span><br><span class="line">    <span class="comment"># 如果相差超过50则就认为找到了缺口的位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">260</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">116</span>):</span><br><span class="line">            <span class="keyword">if</span> is_similar(image1,image2,i,j)==<span class="keyword">False</span>:</span><br><span class="line">                <span class="keyword">return</span>  i</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据缺口的位置模拟x轴移动的轨迹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(length)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    list=[]</span><br><span class="line">    <span class="comment">#间隔通过随机范围函数来获得,每次移动一步或者两步</span></span><br><span class="line">    x=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#生成轨迹并保存到list内</span></span><br><span class="line">    <span class="keyword">while</span> length-x&gt;=<span class="number">5</span>:</span><br><span class="line">        list.append(x)</span><br><span class="line">        length=length-x</span><br><span class="line">        x=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#最后五步都是一步步移动</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        list.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">(driver)</span>:</span></span><br><span class="line">     <span class="comment"># 等待页面的上元素刷新出来</span></span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">         <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>).is_displayed())</span><br><span class="line">     element = driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>)</span><br><span class="line">     element.click()</span><br><span class="line">     time.sleep(<span class="number">1</span>)</span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">        <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">"//div[@class='gt_slider_knob gt_show']"</span>).is_displayed())</span><br><span class="line">     <span class="comment"># driver.find_element_by_css_selector("/html/body/div[4]/div[2]/div[2]/div[2]/div[2]']").click()</span></span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">        <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">"//div[@class='gt_cut_bg gt_show']"</span>).is_displayed())</span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">        <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">"//div[@class='gt_cut_fullbg gt_show']"</span>).is_displayed())</span><br><span class="line">     element = driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>)</span><br><span class="line">     element.click()</span><br><span class="line">     time.sleep(<span class="number">1</span>)</span><br><span class="line">     <span class="comment"># 下载图片</span></span><br><span class="line">     image1 = get_image(driver, <span class="string">"//div[@class='gt_cut_bg gt_show']/div"</span>)</span><br><span class="line">     image2 = get_image(driver, <span class="string">"//div[@class='gt_cut_fullbg gt_show']/div"</span>)</span><br><span class="line">     <span class="comment"># 计算缺口位置</span></span><br><span class="line">     loc=get_diff_location(image1, image2)</span><br><span class="line">     <span class="comment">#生成x的移动轨迹点</span></span><br><span class="line">     track_list=get_track(loc)</span><br><span class="line">     <span class="comment">#找到滑动的圆球</span></span><br><span class="line">     element=driver.find_element_by_xpath(<span class="string">"//div[@class='gt_slider_knob gt_show']"</span>)</span><br><span class="line">     location=element.location</span><br><span class="line">     <span class="comment">#获得滑动圆球的高度</span></span><br><span class="line">     y=location[<span class="string">'y'</span>]</span><br><span class="line">     <span class="comment">#鼠标点击元素并按住不放</span></span><br><span class="line">     <span class="keyword">print</span> (<span class="string">"第一步,点击元素"</span>)</span><br><span class="line">     ActionChains(driver).click_and_hold(on_element=element).perform()</span><br><span class="line">     time.sleep(<span class="number">0.15</span>)</span><br><span class="line">     <span class="keyword">print</span> (<span class="string">"第二步，拖动元素"</span>)</span><br><span class="line">     track_string = <span class="string">""</span></span><br><span class="line">     <span class="keyword">for</span> track <span class="keyword">in</span> track_list:</span><br><span class="line">        <span class="comment">#不能移动太快,否则会被认为是程序执行</span></span><br><span class="line">        track_string = track_string + <span class="string">"&#123;%d,%d&#125;,"</span> % (track, y - <span class="number">445</span>)</span><br><span class="line">        <span class="comment">#xoffset=track+22:这里的移动位置的值是相对于滑动圆球左上角的相对值，而轨迹变量里的是圆球的中心点，所以要加上圆球长度的一半。</span></span><br><span class="line">        <span class="comment">#yoffset=y-445:这里也是一样的。不过要注意的是不同的浏览器渲染出来的结果是不一样的，要保证最终的计算后的值是22，也就是圆球高度的一半</span></span><br><span class="line">        ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=track+<span class="number">22</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">        <span class="comment">#间隔时间也通过随机函数来获得,间隔不能太快,否则会被认为是程序执行</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">10</span>,<span class="number">50</span>)/<span class="number">100</span>)</span><br><span class="line">     <span class="keyword">print</span> (track_string)</span><br><span class="line">     <span class="comment">#xoffset=21，本质就是向后退一格。这里退了5格是因为圆球的位置和滑动条的左边缘有5格的距离</span></span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     <span class="keyword">print</span> (<span class="string">"第三步，释放鼠标"</span>)</span><br><span class="line">     <span class="comment">#释放鼠标</span></span><br><span class="line">     ActionChains(driver).release(on_element=element).perform()</span><br><span class="line">     time.sleep(<span class="number">3</span>)</span><br><span class="line">     s = driver.find_elements_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/p'</span>)</span><br><span class="line">     <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">         print(<span class="string">"滑动解锁失败"</span>)</span><br><span class="line">         slide(driver)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         print(<span class="string">"滑动解锁成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#滑动验证码破解程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#打开火狐浏览器</span></span><br><span class="line">    driver=webdriver.Chrome(<span class="string">"D:\Google\Chrome\Application\chromedriver.exe"</span>)</span><br><span class="line">    <span class="comment">#用火狐浏览器打开网页</span></span><br><span class="line">    driver.get(<span class="string">"http://www.sgs.gov.cn/notice/"</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">"keyword"</span>).send_keys(<span class="string">'中国长城工业上海有限公司'</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">"buttonSearch"</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    slide(driver)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#点击验证</span></span><br><span class="line">    <span class="comment"># submit = driver.find_element_by_xpath("//div[@class='gt_ajax_tip success']")</span></span><br><span class="line">    <span class="comment"># print(submit.location)</span></span><br><span class="line">    <span class="comment"># time.sleep(5)</span></span><br><span class="line">    <span class="comment">#关闭浏览器,为了演示方便,暂时注释掉.</span></span><br><span class="line">    <span class="comment">#driver.quit()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time, re</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vincent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        chrome_option = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># chrome_option.set_headless()</span></span><br><span class="line"></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=<span class="string">r"D:\Google\Chrome\Application\chromedriver.exe"</span>, chrome_options=chrome_option)</span><br><span class="line">        <span class="comment"># self.driver =webdriver.Chrome("D:\Google\Chrome\Application\chromedriver.exe")</span></span><br><span class="line">        self.driver.set_window_size(<span class="number">1440</span>, <span class="number">900</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.driver.get("https://www.Vincent.com/")</span></span><br><span class="line">        self.driver.get(<span class="string">"http://www.sgs.gov.cn/notice/"</span>)</span><br><span class="line"></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"keyword"</span>).send_keys(<span class="string">'中国长城工业上海有限公司'</span>)</span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>, <span class="number">0.5</span>).until(EC.element_to_be_clickable((By.ID, <span class="string">'buttonSearch'</span>)))</span><br><span class="line">        reg_element = self.driver.find_element_by_id(<span class="string">"buttonSearch"</span>)</span><br><span class="line">        reg_element.click()</span><br><span class="line"></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>, <span class="number">0.5</span>).until(</span><br><span class="line">            EC.element_to_be_clickable((By.XPATH, <span class="string">'//div[@class="gt_slider_knob gt_show"]'</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进入模拟拖动流程</span></span><br><span class="line">        self.analog_drag()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analog_drag</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 鼠标移动到拖动按钮，显示出拖动图片</span></span><br><span class="line">        element = self.driver.find_element_by_xpath(<span class="string">'//div[@class="gt_slider_knob gt_show"]'</span>)</span><br><span class="line">        ActionChains(self.driver).move_to_element(element).perform()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 刷新一下极验图片</span></span><br><span class="line">        element = self.driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>)</span><br><span class="line">        element.click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取图片地址和位置坐标列表</span></span><br><span class="line">        cut_image_url, cut_location = self.get_image_url(<span class="string">'//div[@class="gt_cut_bg_slice"]'</span>)</span><br><span class="line">        full_image_url, full_location = self.get_image_url(<span class="string">'//div[@class="gt_cut_fullbg_slice"]'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据坐标拼接图片</span></span><br><span class="line">        cut_image = self.mosaic_image(cut_image_url, cut_location)</span><br><span class="line">        full_image = self.mosaic_image(full_image_url, full_location)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存图片方便查看</span></span><br><span class="line">        cut_image.save(<span class="string">"cut.jpg"</span>)</span><br><span class="line">        full_image.save(<span class="string">"full.jpg"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据两个图片计算距离</span></span><br><span class="line">        distance = self.get_offset_distance(cut_image, full_image)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始移动</span></span><br><span class="line">        self.start_move(distance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果出现error</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            WebDriverWait(self.driver, <span class="number">5</span>, <span class="number">0.5</span>).until(</span><br><span class="line">                EC.element_to_be_clickable((By.XPATH, <span class="string">'//div[@class="gt_ajax_tip gt_error"]'</span>)))</span><br><span class="line">            print(<span class="string">"验证失败"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> TimeoutException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否验证成功</span></span><br><span class="line">        s = self.driver.find_elements_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/p'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"滑动解锁失败,继续尝试"</span>)</span><br><span class="line">            self.analog_drag()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"滑动解锁成功"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            ss=self.driver.find_element_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/div[2]'</span>).get_attribute(<span class="string">"onclick"</span>)</span><br><span class="line">            print(ss)</span><br><span class="line">            ss=self.driver.find_element_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/div[2]'</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取图片和位置列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_image_url</span><span class="params">(self, xpath)</span>:</span></span><br><span class="line">        link = re.compile(<span class="string">'background-image: url\("(.*?)"\); background-position: (.*?)px (.*?)px;'</span>)</span><br><span class="line">        elements = self.driver.find_elements_by_xpath(xpath)</span><br><span class="line">        image_url = <span class="keyword">None</span></span><br><span class="line">        location = list()</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">            style = element.get_attribute(<span class="string">"style"</span>)</span><br><span class="line">            groups = link.search(style)</span><br><span class="line">            url = groups[<span class="number">1</span>]</span><br><span class="line">            x_pos = groups[<span class="number">2</span>]</span><br><span class="line">            y_pos = groups[<span class="number">3</span>]</span><br><span class="line">            location.append((int(x_pos), int(y_pos)))</span><br><span class="line">            image_url = url</span><br><span class="line">        <span class="keyword">return</span> image_url, location</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mosaic_image</span><span class="params">(self, image_url, location)</span>:</span></span><br><span class="line">        resq = requests.get(image_url)</span><br><span class="line">        file = BytesIO(resq.content)</span><br><span class="line">        img = Image.open(file)</span><br><span class="line">        image_upper_lst = []</span><br><span class="line">        image_down_lst = []</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> location:</span><br><span class="line">            <span class="keyword">if</span> pos[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># y值==0的图片属于上半部分，高度58</span></span><br><span class="line">                image_upper_lst.append(img.crop((abs(pos[<span class="number">0</span>]), <span class="number">0</span>, abs(pos[<span class="number">0</span>]) + <span class="number">10</span>, <span class="number">58</span>)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># y值==58的图片属于下半部分</span></span><br><span class="line">                image_down_lst.append(img.crop((abs(pos[<span class="number">0</span>]), <span class="number">58</span>, abs(pos[<span class="number">0</span>]) + <span class="number">10</span>, img.height)))</span><br><span class="line"></span><br><span class="line">        x_offset = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 创建一张画布，x_offset主要为新画布使用</span></span><br><span class="line">        new_img = Image.new(<span class="string">"RGB"</span>, (<span class="number">260</span>, img.height))</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> image_upper_lst:</span><br><span class="line">            new_img.paste(img, (x_offset, <span class="number">58</span>))</span><br><span class="line">            x_offset += img.width</span><br><span class="line"></span><br><span class="line">        x_offset = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> image_down_lst:</span><br><span class="line">            new_img.paste(img, (x_offset, <span class="number">0</span>))</span><br><span class="line">            x_offset += img.width</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_img</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断颜色是否相近</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_similar_color</span><span class="params">(self, x_pixel, y_pixel)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i, pixel <span class="keyword">in</span> enumerate(x_pixel):</span><br><span class="line">            <span class="keyword">if</span> abs(y_pixel[i] - pixel) &gt; <span class="number">50</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算距离</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_offset_distance</span><span class="params">(self, cut_image, full_image)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(cut_image.width):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(cut_image.height):</span><br><span class="line">                cpx = cut_image.getpixel((x, y))</span><br><span class="line">                fpx = full_image.getpixel((x, y))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.is_similar_color(cpx, fpx):</span><br><span class="line">                    img = cut_image.crop((x, y, x + <span class="number">50</span>, y + <span class="number">40</span>))</span><br><span class="line">                    <span class="comment"># 保存一下计算出来位置图片，看看是不是缺口部分</span></span><br><span class="line">                    img.save(<span class="string">"1.jpg"</span>)</span><br><span class="line">                    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始移动</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_move</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        element = self.driver.find_element_by_xpath(<span class="string">'//div[@class="gt_slider_knob gt_show"]'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里就是根据移动进行调试，计算出来的位置不是百分百正确的，加上一点偏移</span></span><br><span class="line">        distance -= element.size.get(<span class="string">'width'</span>) / <span class="number">2</span></span><br><span class="line">        distance += <span class="number">15</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按下鼠标左键</span></span><br><span class="line">        ActionChains(self.driver).click_and_hold(element).perform()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">while</span> distance &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> distance &gt; <span class="number">10</span>:</span><br><span class="line">                <span class="comment"># 如果距离大于10，就让他移动快一点</span></span><br><span class="line">                span = random.randint(<span class="number">5</span>, <span class="number">8</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 快到缺口了，就移动慢一点</span></span><br><span class="line">                span = random.randint(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">            ActionChains(self.driver).move_by_offset(span, <span class="number">0</span>).perform()</span><br><span class="line">            distance -= span</span><br><span class="line">            time.sleep(random.randint(<span class="number">10</span>, <span class="number">50</span>) / <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        ActionChains(self.driver).move_by_offset(distance, <span class="number">1</span>).perform()</span><br><span class="line">        ActionChains(self.driver).release(on_element=element).perform()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    h = Vincent()</span><br><span class="line">    h.visit_index()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="selenium" scheme="http://wysh.site/categories/selenium/"/>
    
      <category term="爬虫" scheme="http://wysh.site/categories/selenium/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://wysh.site/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>详解服务器性能测试的全生命周期？——从测试、结果分析到优化策略</title>
    <link href="http://wysh.site/2017/06/24/%E8%AF%A6%E8%A7%A3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E5%85%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%8E%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%88%B0%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://wysh.site/2017/06/24/详解服务器性能测试的全生命周期从测试结果分析到优化策略/</id>
    <published>2017-06-24T06:20:17.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>服务器性能测试是一项非常重要而且必要的工作，本文是作者Micheal在对服务器进行性能测试的过程中不断摸索出来的一些实用策略，通过定位问题，分析原因以及解决问题，实现对服务器进行更有针对性的优化，提升服务器的性能。  </p></blockquote><h2 id="1-服务器性能测试小结"><a href="#1-服务器性能测试小结" class="headerlink" title="1. 服务器性能测试小结"></a>1. 服务器性能测试小结</h2><p> 讲到服务器性能大部分人会想到这个服务器的架构是什么样子的，用的什么epoll，select，spring，tornado之类的。其实从本质上来看的话目前大部分的服务器主要包括逻辑层以及DB层，我们采用的各种框架组件处于逻辑服务器中，如下图所示。<br> <img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7OGDJykZM7QvZRFPOjExHgjvKXhGN4bW1s3ic0rqM7OhhhKLkIia9jOrQ/0?wx_fmt=gif" alt="image">  </p><p> 服务器性能测试是一项比较繁琐的事情，作为没有做过性能测试的同学可能需要理清楚以下几个事情。</p><h3 id="1-1-协议分析"><a href="#1-1-协议分析" class="headerlink" title="1.1. 协议分析"></a>1.1. 协议分析</h3><p>首先是协议分析，性能测试本质上是我们用代码来模拟真实的用户请求，所以我们必须要知道发送出去的请求内容才能模拟。在典型的CS服务器中很多使用了protobuf，thrift，tdr（腾讯自研）来序列化以及反序列号请求内容。  </p><p>序列化之后一方面可以对数据进行压缩处理，另一方面也避免请求内容明文传输造成被抓包·泄漏数据的危险。之前有过服务器传输数据的时候使用的是明文直接发送，而且这个数据是一些敏感的sql语句，这样首先暴露了数据库的表结构，同时不法分子可以通过模拟发包造成“脱裤”甚至是数据被清空。  </p><h4 id="1-1-1-Protobuf"><a href="#1-1-1-Protobuf" class="headerlink" title="1.1.1.   Protobuf"></a>1.1.1.   Protobuf</h4><p>谷歌出品，必属精品。Protobuf使用起来很方便，学习成本非常低，而且序列化和反序列号的接口很容易使用。同时它相对于xml以及json，极大的的减小了数据占用的空间，减少了传输成本。目前支持包括C，java以及python等多个语言。Protobuf目前用的比较多，打解包也很方便，比较推荐使用。  </p><h4 id="1-1-2-Thrift"><a href="#1-1-2-Thrift" class="headerlink" title="1.1.2.   Thrift"></a>1.1.2.   Thrift</h4><p>Thrift是一个跨语言的轻量级rpc消息和数据交换框架。Thrift支持几乎绝大部分主流的语言，包括C, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml，虽然大部分我都没有用过。相对于protobuf，thrift提供了全套RPC解决方案，包括序列化机制、传输层、并发处理框架等，也因为如此thrift的学习成本比较高。  </p><h4 id="1-1-3-腾讯自研协议tdr"><a href="#1-1-3-腾讯自研协议tdr" class="headerlink" title="1.1.3.   腾讯自研协议tdr"></a>1.1.3.   腾讯自研协议tdr</h4><p>Tdr是腾讯自研跨平台多语言数据表示组件，主要用于基于数据的序列化反序列化（支持二进制方式和XML文本方式）以及ORM数据存储。广泛用于互娱自研游戏和部分代理游戏。在性能上基本和protobuf差不多，主要应用在C程序中。<br>在做服务器性能测试之前，我们需要了解它的协议是怎么定义的。</p><h3 id="1-2-机器人管理"><a href="#1-2-机器人管理" class="headerlink" title="1.2.  机器人管理"></a>1.2.  机器人管理</h3><p>本质上机器人管理就是一个调度控制器，在获取需要发送的请求协议之后，需要有一个框架来管理所有的机器人，控制机器人的启动，发送请求以及停止的动作。框架的选择需要根据服务器的实际情况来，不同的业务场景，使用不同的框架产生的压力上限也会不一样。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7Sf2V9LvI1Hcb0PibfLTRj1L8OlS5on0wpP0kFl452ODdlPRd4kjCA4A/0?wx_fmt=gif" alt="image">   </p><p>以一个简单的多线程框架为例，主线程负责控制逻辑，管理所有的机器人状态信息。子线程执行每个机器人的任务，包括连接服务器，发送数据，接收数据，断开连接等。</p><h3 id="1-3-结果统计"><a href="#1-3-结果统计" class="headerlink" title="1.3.  结果统计"></a>1.3.  结果统计</h3><p>机器人发送请求包之后，一般是要等待服务器的响应回包。服务器那边可以计算本次压测过程中各项业务数据，包括TPS，总的收发包量等。    </p><p>不可能在测试过程中一直盯着各个数据看，我们需要把每项数据记录下来，后续综合各项结果进行分析。<br>这里的结果统计除了需要统计每个机器人收到回包的结果，还需要统计服务器在压测过程中的各项性能数据变化。一旦客户端的压力上到一定值时，服务器某项资源支撑不了的话，说明这个资源可能存在短板，存在可以优化的空间。    </p><p>性能结果分析是一个比较复杂的过程。需要综合硬件、操作系统、应用程序等多方面来定位。  </p><h3 id="2-1-硬件的影响"><a href="#2-1-硬件的影响" class="headerlink" title="2.1.  硬件的影响"></a>2.1.  硬件的影响</h3><p>硬件对服务器性能影响还是蛮大的，如果是土豪的话，可以直接买最好的。我们分析硬件主要是希望选择合适的配置，节约资源，避免出现高射炮打蚊子的情况。  </p><h5 id="2-1-1-CPU"><a href="#2-1-1-CPU" class="headerlink" title="2.1.1.   CPU"></a>2.1.1.   CPU</h5><p>在资金的充足下，一般来说CPU的数量越多，主频越高，那么服务器的性能也就会越好。在实际测试过程中，如果在大压力下持续观察CPU的使用率很低，那么CPU的资源基本上是可以满足服务器要求的。这样的情况其实是有点浪费CPU资源的，比较理想的情况是压力不大的时候CPU利用率比较低，压力上来之后CPU利用率保持在60%-70%。  </p><p>大部分的CPU在同一时间内只能运行一个线程，但是超线程的处理器可以在同一个时间运行多个线程，我们可以利用处理前超线程特性提高系统性能。虽然采用超线程技术能同时执行两个线程，但它并不象两个真正的CPU那样，每个CPU都具有独立的资源。当两个线程都同时需要某一个资源时，其中一个要暂时停止，并让出资源，直到这些资源闲置后才能继续。因此超线程的性能并不等于两颗CPU的性能。  </p><h4 id="2-1-2-内存"><a href="#2-1-2-内存" class="headerlink" title="2.1.2.   内存"></a>2.1.2.   内存</h4><p>内存的大小也是影响服务器性能的一个重要因素。内存太小，系统进程要被阻塞，应用程序会变得缓慢，甚至是失去响应；如果太大的话，也是造成一种浪费。Linux系统中采用物理内存和虚拟内存两种方式，使用虚拟内存可以缓解物理内存的不足，但是如果占用过多的虚拟内存的话，应用程序的性能会明显的下降。  </p><h4 id="2-1-3-网络带宽"><a href="#2-1-3-网络带宽" class="headerlink" title="2.1.3.   网络带宽"></a>2.1.3.   网络带宽</h4><p>网络带宽的大小限制了客户端与服务器交互的流量，相对其他硬件资源，网络带宽在价格上更贵。这需要我们合理预估服务器的可服务器能力，需要占用的带宽资源。  </p><h4 id="2-1-4-磁盘IO"><a href="#2-1-4-磁盘IO" class="headerlink" title="2.1.4.   磁盘IO"></a>2.1.4.   磁盘IO</h4><p>目前磁盘都是机械方式运作的，主要体现在磁盘读写前寻找磁道的过程。磁盘自带的读写缓存大小，对于磁盘读写速度至关重要。读写速度快的磁盘，通常都带有较大的读写缓存。磁盘的寻道过程是机械方式，决定了其随机读写速度将明显低于顺序读写。在我们做系统设计和实现时，需要考虑到磁盘的这一特性  </p><h3 id="2-2-操作系统及软件"><a href="#2-2-操作系统及软件" class="headerlink" title="2.2.  操作系统及软件"></a>2.2.  操作系统及软件</h3><h5 id="2-2-1-版本"><a href="#2-2-1-版本" class="headerlink" title="2.2.1.   版本"></a>2.2.1.   版本</h5><p>不同的操作系统在内核实现上可能各不相同，因而对运行在上面的应用程序来说可能影响比较大。  </p><p>笔者并没有做过分析不同操作系统对服务器性能的影响，因为只用过Linux开发服务器程序。Linux操作系统在这十几年发展的异常迅猛，目前大部分的服务器都是运行在Linux操作系统上的。Linux目前具有最好的生态系统，服务器端的各种软件都为它而设计，默认都认为你是在 Linux 上跑，你要是整一个非 Linux 的服务器，你得有足够的心理准备，因为出现任何问题，你可能未必能找到能帮你解决问题的人。  </p><h4 id="2-2-2-参数配置"><a href="#2-2-2-参数配置" class="headerlink" title="2.2.2.   参数配置"></a>2.2.2.   参数配置</h4><p>先说一个小故事。福特公司一套重要设备出现故障，找了很多人来维修，结果都没有维修好，没办法了，就在购买设备的英国公司高价聘请一位工程师过来维修，工程师来到之后，反复查找原因，最后在一个小零件上划了一条线，然后对旁边福特公司的人说，在划线的地方切掉就好了，果不其然，切掉之后故障真的解除了，按照合约，福特公司应支付公司一万美元，周围的人都唏嘘不已，感叹一条线就可以价值一万美元，工程师回答到：那条线只值一美元，而怎样找到那条线值9999美元。  </p><p>我们在测试服务器的过程中，经常会遇到性能上不去。查看CPU，网络，IO消耗都挺低的，就是定位不到问题的原因。有经验的程序员可能会告诉你你把某个参数修改一下，立马性能噌噌噌上去了。比如mysql相关设置，系统文件描述符，缓冲区大小，time_wait快速回收设置等，甚至是线程池配置的线程个数也会对服务器的性能产生较大的影响。  </p><p>关于数据库参数的设置，比如mysql的配置文件my.cnf文件中，修改不同的配置（比如innodb_flush_log_at_trx_commit 设置为0，1还是2 ）可能会对数据库的读写性能影响很大。  </p><h4 id="2-2-3-应用程序本身实现"><a href="#2-2-3-应用程序本身实现" class="headerlink" title="2.2.3.   应用程序本身实现"></a>2.2.3.   应用程序本身实现</h4><p>比如程序中需要频繁申请内存，使用bzero和memset对服务器性能影响差距可能会很大。  </p><p>另外程序中的一些查询操作，采用不同的数据结构，可以实现时间和空间上的相互转化，从而影响服务器的性能。  </p><h2 id="3-Linux下的数据监控工具"><a href="#3-Linux下的数据监控工具" class="headerlink" title="3. Linux下的数据监控工具"></a>3. Linux下的数据监控工具</h2><h3 id="3-1-Vmstat"><a href="#3-1-Vmstat" class="headerlink" title="3.1. Vmstat"></a>3.1. Vmstat</h3><p>Vmstat，virtual memmory statistics（虚拟内存统计），主要是对操作系统的内存信息、进程状态、cpu活动等进行监视，但是它不能对某个进程进行深入的分析。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7aUzjib2mpwyibh8GDrDrp8MoTalMAJRBH2zvO0SQhdabMSGg4feOsxbA/640?wx_fmt=jpeg" alt="image">  </p><p>Procs中r列表示运行和等待CPU时间片的进程数，如果r值长期大于CPU个数，说明CPU资源不够用啦，可以适当增加CPU数量。  </p><p>Procs中b列表示当前等待资源的进程数，包括等待I/O，内存等。  </p><p>Swpd列表示切换到内存交换区的KB数，一般si，so为0的话基本不影响系统的性能。  </p><p>Cache是page cache的内存数量，Linux会把空闲的物理内存的一部分拿来做文件和目录的缓存，以便提高程序执行的性能。如果cache的值较大的话，说明缓存了太多的文件，如果bi值小的话，说明文件系统效率比较高。  </p><p>Si是每秒从磁盘读入虚拟内存的大小，如果这个值一直大于0，表示物理内存不够用或者内存泄露了，需要查找耗内存进程解决掉。  </p><p>Bi，bo是表示从块设备读入数据的总量以及写到块设备的数据总量。如果bi+bo值比较大，而且wa值也比较大的话，说明系统磁盘I/O可能有问题，性能不高。  </p><p>In和cs是每秒钟的设备中断数以及上下文切换数。它们很大的话，表面内核消耗的CPU时间较多。  </p><h3 id="3-2-Top"><a href="#3-2-Top" class="headerlink" title="3.2. Top"></a>3.2. Top</h3><p>Top是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。它可以按照系统中当前进程的CPU利用率以及占用的内存大小进行排序，可以比较快速定位出系统响应迟钝的原因。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7uyVhIzfMjOK5qEMjEMbbicwhDl3KozIE9Yg8VZbSAPg8yibzczD8vKlg/640?wx_fmt=jpeg" alt="image"> </p><p>top是一个显示数据较多的工具，第一行显示的是系统的开机运行时间，机器的CPU负载信息；第二行显示当前系统任务的总数，以及各个状态的进程数；第三行显示的是CPU资源的使用情况总览；第四行显示内存的使用情况总览；第五行显示的是内存交换区的使用情况总览；后面开始是每个进程对资源使用的情况。  </p><h3 id="3-3-Nmon"><a href="#3-3-Nmon" class="headerlink" title="3.3.  Nmon"></a>3.3.  Nmon</h3><p>Nmon提供对CPU、内存、网络、磁盘等系统资源占用情况分析，相比其他Linux命令获取到的数据，nmon的功能更为集中、配置性更强。通过nmon采集到数据之后可以在windows系统中使用nmon_analyser做数据的展示以及分析工作，可视化效果比较好。  </p><p>由于一般Linux系统都不自带nmon，使用之前需要下载安装。  </p><h3 id="3-4-Uptime"><a href="#3-4-Uptime" class="headerlink" title="3.4. Uptime"></a>3.4. Uptime</h3><p>Uptime命令显示系统已经运行了多长时间，它依次显示当前时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。  </p><p>关于系统平均负载，它表示在特定时间间隔内运行队列中的平均进程数。如果一个进程满足以下条件则其就会位于运行队列中：没有在等待I/O操作的结果；没有主动进入等待状态；没有被停止。  </p><h3 id="3-5-Netstat"><a href="#3-5-Netstat" class="headerlink" title="3.5.  Netstat"></a>3.5.  Netstat</h3><p>Netstat命令可以显示本机的网络连接情况，监听端口以及路由表等各种网络相关信息。Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。  </p><p>比较常用的可以用次命令查看当前开启监听的服务器进程信息以及端口信息。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7ZNdk6KukibDGHBqPDPFPLJpHqib3iaAYE9yhcrsAia0s7Te9rVYMOxrS2g/640?wx_fmt=jpeg" alt="image">  </p><h3 id="3-6-Free"><a href="#3-6-Free" class="headerlink" title="3.6.  Free"></a>3.6.  Free</h3><p>Free是监控Linux使用情况最常用的命令。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7QcDjcBdOpd4ReiaVQMeoxYtZ5gtaZe17hKEzBoXKtpmOhRfm4Lc7Olg/640?wx_fmt=jpeg" alt="image">  </p><p>“Free -m”可以查看以M为单位的使用情况，这里主要观察free和cached两列。  </p><p>一般来说，如果应用程序可用内存/系统物理内存&gt;70%时，表明目前系统内存资源比较充足，不影响系统性能；如果应用程序可用内存/系统物理内存&lt;20%时，表明目前系统内存资源比较紧缺，需要释放其他程序内存或者增加内存；如果应用程序可用内存/系统物理内存在20%-70%之间，表明目前系统的内存资源基本满足应用需求，暂时不影响系统的性能  </p><h3 id="3-7-Sar"><a href="#3-7-Sar" class="headerlink" title="3.7. Sar"></a>3.7. Sar</h3><p>Sar也是一个强大的分析系统性能的工具，它可以比较全面的获取系统的CPU，运行队列，磁盘IO，分页，内存，CPU中断，网络等多项数据。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc74HZibcLbxKLdyY0AszSFmlWtrS2roXKABh9GJvGPdGHIZKibOibFzf8TQ/640?wx_fmt=jpeg" alt="image"><br>上图是使用sar获取系统CPU的整体负责情况，每隔1秒统计一次，统计3次，最后会给出3次的平均值。需要查看其他的数据可以查看手册使用。  </p><h3 id="3-8-Iostat"><a href="#3-8-Iostat" class="headerlink" title="3.8.  Iostat"></a>3.8.  Iostat</h3><p>Iostat是I/O statistics的缩写，主要功能是对系统的磁盘I/O操作进行监控。它的输出主要显示磁盘读写操作的统计信息，同时也会给出CPU的使用情况。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7wsOoyicvK4ugliayMCaJGTTAMlXY05ytmUg1rkx6jGbGpl2DwrrdJHpA/640?wx_fmt=jpeg" alt="image">  </p><p>这里显示的是查看CPU和磁盘的信息，统计间隔2秒，共3次。  </p><h3 id="3-9-Valgrind"><a href="#3-9-Valgrind" class="headerlink" title="3.9. Valgrind"></a>3.9. Valgrind</h3><p>Valgrind是一款广泛用于监控程序运行过程进行内存调试、内存泄漏检测以及性能分析的工具。它会给出内存泄漏的统计，包括definitely lost,indirectly lost,possibly lost,still reachable ,suppressed等，我们可以使用valgrind来测试程序中内存不规范使用的部分。同时对于地址越界问题也可以通过valgrind扫出来，它会统计invalid write的情况。  </p><h2 id="4-服务器的性能优化"><a href="#4-服务器的性能优化" class="headerlink" title="4. 服务器的性能优化"></a>4. 服务器的性能优化</h2><h3 id="4-1-存储的优化"><a href="#4-1-存储的优化" class="headerlink" title="4.1. 存储的优化"></a>4.1. 存储的优化</h3><p>IO相对来说比较耗时，我们都知道越靠近CPU的存储，其访问速度越快，但是其价格越贵。下图来展示了不同存储的容量以及访问时间。  </p><p>目前很多同学在优化服务器性能的时候都会从存储这方面入手。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7MHDxSkicjSIYGFibxxmCB9ib1Qz2scSZqJLnPG1o7ibP8SBjibq03KkKZ0w/0?wx_fmt=gif" alt="image">  </p><h4 id="4-1-1-用内存换时间"><a href="#4-1-1-用内存换时间" class="headerlink" title="4.1.1. 用内存换时间"></a>4.1.1. 用内存换时间</h4><h6 id="4-1-1-1-增加缓存"><a href="#4-1-1-1-增加缓存" class="headerlink" title="4.1.1.1. 增加缓存"></a><strong>4.1.1.1. 增加缓存</strong></h6><p>很多web应用是有大量的静态内容，这些静态内容主要都是一些小文件，并且会被频繁的读，采用Apache以及nginx作为web服务器。在web访问量不大的时候，这两个http服务器可以说是非常的迅速和高效，如果负载量很大的时候，我们可以采用在前端搭建cache服务器，将服务器中的静态资源文件缓存到操作系统内存中直接进行读操作，因为直接从内存读取数据的速度要远大于从硬盘读取。这个其实也是增加内存的成本来降低访问磁盘带来的时间消耗。</p><h6 id="4-1-1-2-内存数据库"><a href="#4-1-1-2-内存数据库" class="headerlink" title="4.1.1.2. 内存数据库"></a><strong>4.1.1.2. 内存数据库</strong></h6><p>内存数据库，其实就是将数据放在内存中直接操作的数据库。相对于磁盘，内存的数据读写速度要高出几个数量级，将数据保存在内存中相比从磁盘上访问能够极大地提高应用的性能。内存数据库抛弃了磁盘数据管理的传统方式，基于全部数据都在内存中重新设计了体系结构，并且在数据缓存、快速算法、并行操作方面也进行了相应的改进，所以数据处理速度比传统数据库的数据处理速度要快很多。  </p><p>但是安全性的问题可以说是内存数据库最大的硬伤。因为内存本身有掉电丢失的天然缺陷，因此我们在使用内存数据库的时候，通常需要，提前对内存上的数据采取一些保护机制，比如备份，记录日志，热备或集群，与磁盘数据库同步等方式。  </p><p>对于一些重要性不高但是又想要快速响应用户请求的部分数据可以考虑内存数据库来存储，同时可以定期把数据固化到磁盘。  </p><h6 id="4-1-1-3-RDD"><a href="#4-1-1-3-RDD" class="headerlink" title="4.1.1.3. RDD"></a><strong>4.1.1.3. RDD</strong></h6><p>这里图个新鲜，说说内存换时间在大数据云计算相关领域的一些应用。Spark最近很火，它的核心要数RDD了，RDD最早来源与Berkeley实验室的一篇论文《Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing》。现有的数据流系统对两种应用的处理并不高效：一是迭代式算法，这在图应用和机器学习领域很常见；二是交互式数据挖掘工具。这两种情况下，将数据保存在内存中能够极大地提高性能。这里不详细说RDD了，只是想说程序员一直是觊觎内存的读取速度的。</p><h4 id="4-1-2-使用SSD等"><a href="#4-1-2-使用SSD等" class="headerlink" title="4.1.2.  使用SSD等"></a>4.1.2.  使用SSD等</h4><p>除了对内存方面的优化，还可以对磁盘这边进行优化。跟传统机械硬盘相比，固态硬盘具有快速读写、质量轻、能耗低以及体积小等特点。但是ssd的价格相比传统机械硬盘要贵，有条件的可以使用ssd来代替机械硬盘。</p><h3 id="4-2-数据库优化"><a href="#4-2-数据库优化" class="headerlink" title="4.2.  数据库优化"></a>4.2.  数据库优化</h3><p>大部分的服务器请求最终都是要落到数据库中，随着数据量的增加，数据库的访问速度也会越来越慢。想要提升请求处理速度，必须要对原来的单表进行动刀了。目前主流的Linux服务器使用的数据库要属mysql了，如果我们使用mysql存储的数据单个表的记录达到千万级别的话，查询速度会很慢的。  </p><p>根据业务上合适的规则对数据库进行分区分表，可以有效提高数据库的访问速度，提升服务器的整体性能。  </p><p>另外对于业务上查询请求，在建表的时候可以根据相关需求设置索引等，以提高查询速度。  </p><h3 id="4-3-利用多核优势"><a href="#4-3-利用多核优势" class="headerlink" title="4.3. 利用多核优势"></a>4.3. 利用多核优势</h3><p>现在运行服务器的主流机器配置都是多核CPU的，我们在设计服务器的时候可以利用多核心的特点，采用多进程或者多线程的框架。  </p><p>关于选择多线程还是多进程可以根据实际的需求，结合各自的优缺点进行选择。  </p><p>对于多线程的使用，特别是使用线程池的时候可以通过测试不同线程池服务器的性能来设置合适的线程池。  </p><h3 id="4-4-选择合适的IO模型"><a href="#4-4-选择合适的IO模型" class="headerlink" title="4.4.  选择合适的IO模型"></a>4.4.  选择合适的IO模型</h3><p>《UNIX网络编程卷1:套接字联网API》中有一幅图比较经典。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7TS8Sab5XbCibHdGgb6HvWNASNPhmkGSib0ibFibibEBfcDgTX7GjlmkesOg/0?wx_fmt=gif" alt="image"></p><p>信号驱动：首先开启套接口信号驱动I/O功能,并通过系统调用sigaction安装一个信号处理函数。当数据报准备好被读时，就为该进程生成一个SIGIO信号。随即可以在信号处理程序中调用recvfrom来读数据报，井通知主循环数据已准备好被处理中。也可以通知主循环，让它来读数据报。  </p><p>异步的IO模型：告知内核启动某个操作，并让内核在整个操作完成后(包括将数据从内核拷贝到用户自己的缓冲区)通知我们。  </p><p>这里并不是说一定要用某个模型，epoll也并不是在所有情况下都比select性能要好的，在选择的时候还是要结合业务需求来。  </p><h3 id="4-5-分布式部署程序"><a href="#4-5-分布式部署程序" class="headerlink" title="4.5.  分布式部署程序"></a>4.5.  分布式部署程序</h3><p>当单机服务器已经找不到合适的优化点时，我们可以通过分布式部署来提高服务器的响应能力。优秀的服务器开发都会为自己的服务器的扩容，容灾提出一些解决方案。个人觉得服务器设计的时候简单点比较好，这样后期扩容的时候会很方便。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务器性能测试是一项比较繁琐的事情，作为没有做过性能测试的同学需要事先了解服务器的协议是如何定义的，建立框架管理机器人、统计测试中机器人收到回包的结果以及压测过程中各项性能数据的变化。在完成了测试的过程后，可以从硬件、操作系统以及应用程序等多个方面进行对性能结果进行定位。最后在明确业务需求的前提下，通过存储优化、数据库优化以及分布式部署程序等手段完成服务器的性能优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="测试文档" scheme="http://wysh.site/categories/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="测试文档" scheme="http://wysh.site/tags/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Web安全测试基础一 （一：跨SQL注入，二：跨站脚本攻击，三，命令执行漏洞，四，跨站请求伪造，五，文件上传漏洞，六，文件包含漏洞）</title>
    <link href="http://wysh.site/2017/06/23/Web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://wysh.site/2017/06/23/Web安全测试基础/</id>
    <published>2017-06-23T00:45:34.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Web安全漏洞概念及原理分析"><a href="#一、Web安全漏洞概念及原理分析" class="headerlink" title="一、Web安全漏洞概念及原理分析"></a>一、Web安全漏洞概念及原理分析</h2><h3 id="1-1-跨SQL注入"><a href="#1-1-跨SQL注入" class="headerlink" title="1.1 跨SQL注入"></a>1.1 跨SQL注入</h3><p><strong>概念</strong>：SQL Injection按照字面意思来翻译就是“SQL注射”，常被叫做“SQL注入”，它的含义就是利用某些数据库的外部接口把用户数据插入到实际数据库操作语言当中，从而达到入侵数据库乃至操作系统的目的。SQL注入漏洞形成原因是：用户输入的数据被SQL解释器执行。  </p><p><strong>原理分析：</strong> 假设如下URL存在漏洞  </p><p><a href="http://www.xxx.com/xx.asp?id=666" target="_blank" rel="noopener">http://www.xxx.com/xx.asp?id=666</a>  </p><p><strong>构造数据库原型：</strong>   </p><p>select * from table_name where id=1  </p><p>那么<strong>提交：</strong>    </p><p><a href="http://www.xxx.com/xx.asp?id=666" target="_blank" rel="noopener">http://www.xxx.com/xx.asp?id=666</a> and [查询语句]  </p><p>select * from table_name where username=‘or’=‘or’ And pass=‘or’=’or’  </p><p>这样，如果页面和id=666返回相同的结果，就说明附加查询条件成立，如果不同，就说明不成立。  </p><p><strong>手工判断能否进行SQL注入方法：</strong>    </p><p>第一步先把IE菜单=&gt;工具=&gt;Internet选项=&gt;高级=&gt;显示友好 HTTP 错误信息前面的勾去掉。否则，不论服务器返回什么错误，IE都只显示为HTTP 500服务器错误，不能获得更多的提示信息。  </p><p>简单判定有无漏洞： 粗略型：提交单引号’  </p><p>逻辑型（数字型注入）：and 1=1 / and 1=2  </p><p>逻辑型（字符型注入）：’ and ‘1’=’1 / ‘ and ‘1’=’2  </p><p>逻辑型（搜索型注入）： 关键字%’ and 1=1 and ‘%’=’% / 关键字%’ and 1=2 and ‘%’=’%  </p><p>危害：获取数据库信息，脱裤，获取服务器权限，植入webshell，获取服务器后门，读取服务器敏感文件等。  </p><p><strong>示例：</strong>  </p><p>如下，user id查询框中输入1，则正常显示结果如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNeuFYQXMXyPZGvMicnNsAS6sqjRALlkofaGJuHwcIvYFJicGiaEIHXgblHeru3dKCjy9Z91mL6WFicPQ/0?wx_fmt=png" alt="image">  </p><p>但是，当user id查询框中输入1’时，则显示输出如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNeuFYQXMXyPZGvMicnNsAS6mKCEthLiaribe6OIhf3qoz9theKIQwz7bk5e8ztMqCSS5QVyAOuqw8Xw/0?wx_fmt=png" alt="image">  </p><p>则该处存在sql注入漏洞。  </p><p>目前流行的注入工具有：<strong>SQLMap、Pangolin（穿山甲）、Havij</strong>等。  </p><h3 id="1-2-跨站脚本攻击（XSS）"><a href="#1-2-跨站脚本攻击（XSS）" class="headerlink" title="1.2 跨站脚本攻击（XSS）"></a>1.2 跨站脚本攻击（XSS）</h3><p><strong>概念：</strong> 通常指黑客通过“HTML注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，实现控制用户浏览器行为的一种攻击方式。  </p><p><strong>全称：</strong> Cross Site Script（本来缩写是CSS，但是为了和层叠样式表CSS有所区别，所以在安全领域叫做“XSS”）  </p><p><strong>危害：</strong> 盗取用户信息、篡改页面钓鱼、制造蠕虫等。  </p><p><strong>XSS分类：</strong> 存储型、反射型、DOM型  </p><blockquote><p><strong>反射型XSS</strong>  </p></blockquote><p>反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功  </p><p>如下，查询name信息，正常用户请求：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaead33ibWaTOG4ZKKHX5HoaWQY7yUia6UuVptaPQfyMTWAgQmC7eVRRVG6gA/0?wx_fmt=png" alt="image">  </p><p>如果那name参数1修改成，则显示结果：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadIQLibZ8H6uRHP7JDR8DUDYzuCniabe63LrZ1ouOGdqSsUQvNT8ib657tA/0?wx_fmt=png" alt="image">  </p><p><strong>存储型XSS</strong>  </p><p>如下，正常留言或者评论，显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadCQNziaPT5nzvnCQGYZDswzibPY7UadP0nEwp6sibTiavnlTvDUpmJE99uw/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadGOG9siaQzy5JCVRz3V9re9mqV5g5uMOXTOVibOUt4eDIaRicMIOzbsWMA/0?wx_fmt=png" alt="image">  </p><p>如果将message信息写成，则显示  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadw5pbD7KgK55aiaAJ8c1NGVLtXExNG0Q7vBqR8Wmo0EjyqPuPOBpIwUg/0?wx_fmt=png" alt="image">  </p><p><strong>DOM XSS</strong>  </p><p>基于DOM型的XSS是不需要与服务器端交互的，它只发生在客户端处理数据阶段。  </p><p>下面一段经典的DOM型XSS示例。  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeaduIQO5JiclvGq4CdTgfXHtk7NgIlbnSb3SLFogr1cianaM1mRfqmPrlCA/0?wx_fmt=png" alt="image">  </p><p>上述代码的意思是获取URL中content参数的值，并且输出，如果输入<a href="http://www.xxx.com/dom.html?content=，就会产生XSS漏洞。" target="_blank" rel="noopener">http://www.xxx.com/dom.html?content=，就会产生XSS漏洞。</a>  </p><p>各种类型原理分析  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadEX3QXTFyGKfRKjjtMN5RsYVSmQp0wauxYsHwOJbfv6R3BVggYL6LIw/0?wx_fmt=png" alt="image">  </p><h3 id="1-3-命令执行漏洞"><a href="#1-3-命令执行漏洞" class="headerlink" title="1.3 命令执行漏洞"></a>1.3 命令执行漏洞</h3><p><strong>漏洞产生原因:</strong> 程序中因为某些功能需要执行系统命令，并通过网页传递参数到 后台执行。然而最根本的原因是没有对输入框的内容做代码过滤，正常情况下输入框只能接收指定类型的数据。  </p><p><strong>漏洞影响:</strong>  命令注入漏洞可以使攻击者在受攻击的服务器上执行任意的系统命令。  </p><p><strong>示例:</strong>  </p><p>正常情况下，在 ip 地址输入框中输入 127.0.0.1，结果如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTZGRcw9F10xORucTMNQTYVibatNznw2hf7N0eyjeN82aqTv54f7mOjtw/0?wx_fmt=png" alt="image">  </p><p>但是，当我们输入 127.0.0.1&amp;&net; user 时，输出结果如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dT1wNHsejdz6Bbtd7pUic6fntrZOIsC71rUIfz7iaAFNcf4VeuQAw5ibsPQ/0?wx_fmt=png" alt="image">  </p><p>结果显示不仅仅执行了 ping 127.0.0.1 操作，而且也执行了 net user 命令，我们可 以把 net user 换成其他任意命令进行攻击。  </p><h3 id="1-4-跨站请求伪造-CSRF"><a href="#1-4-跨站请求伪造-CSRF" class="headerlink" title="1.4 跨站请求伪造(CSRF)"></a>1.4 跨站请求伪造(CSRF)</h3><p><strong>概念:</strong> Cross-Site request forgery，利用用户已登录的身份，在用户毫不知情的情 况下，以用户的名义完成非法操作。  </p><p>CSRF 攻击迫使终端用户在通过验证后 web 应用中执行不必要的操作。在社会工 程帮助下(如通过电子邮件/聊天发送的链接)，攻击者可能会迫使 Web 应用程序 用户执行攻击者所选择的行动。  </p><p><strong>危害:</strong> 执行恶意操作(“被转账”、“被发表垃圾评论”等)、制造蠕虫等 漏洞影响:当一个成功的 CSRF 漏洞的目标是普通用户时，它能够危害终端用户 的数据操作。但如果最终的目标用户是管理员账户，一个 CERF 攻击可以损害整 个 Web 应用程序。  </p><p><strong>示例:</strong>  </p><p>如下，正常修改密码页面，New password 输入 test，Confirm new password 输入 test，然后提交，密码修改成功。   </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTmz78um8aVZvV3sfp0jQUziciacB3oN6VibU3wSW87tBfYAAnG7ViapZEiaw/0?wx_fmt=png" alt="image">  </p><p>我们发现，这个修改密码的请求为 “ <a href="http://10.4.70.188/DVWA-1.9/vulnerabilities/csrf/?password_new=test&password;" target="_blank" rel="noopener">http://10.4.70.188/DVWA-1.9/vulnerabilities/csrf/?password_new=test&password;</a>_ conf=test&Change;=Change ”， 此 时 ， 我 们 打 开 新 的 窗 口 ， 修 改 password_new=password 和 password_conf=password，访问显示如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTEsajjB72Ns0ubsFL1icX4HxUKVAbQ7vLvg30ygt5SYyfYR5cM1SoIlw/0?wx_fmt=png" alt="image">  </p><p>此时，密码已经被修改成功，如果该 URL 被黑客通过电子邮件或其他途径精心 伪造，诱惑你触发点击，则可直接修改当前用户配置，后果不堪设想。  </p><h3 id="1-5-文件上传漏洞"><a href="#1-5-文件上传漏洞" class="headerlink" title="1.5 文件上传漏洞"></a>1.5 文件上传漏洞</h3><p>文件上传漏洞，是指用户上传了一个可执行的脚本文件，并通过此脚本文件获取了执行服务器端命令的能力。这种攻击方式是最为直接和有效的，有时候几乎没有什么技术门槛。  </p><p>如下，选择正常的图片文件test.jpg上传，上传成功后显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSiaTyibL3CcodZxlabpYicg4pBu6CbmjPGYFvslrpuodyy2DfBWXq9fghQ/0?wx_fmt=png" alt="image">  </p><p>我们根据显示的路径信息，推测上传图片的地址为“<a href="http://10.4.70.188/DVWA-1.9/hackable/uploads/test.jpg”，在浏览器中打开：" target="_blank" rel="noopener">http://10.4.70.188/DVWA-1.9/hackable/uploads/test.jpg”，在浏览器中打开：</a>  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSfo1IwEia6WhxdCZ9cwZD5fnN2obnMGuHQnDwoU2DPBJyef9yZLwAzAQ/0?wx_fmt=png" alt="image">  </p><p>那么，我们写一个文件phpinfo.ini，内容为，上传成功后，我们访问该文件显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSic81UkEE5gL2bdUeFJPtpnyZebAibvEDBia61jZe2yT2ibgSHlgibdOxbGg/0?wx_fmt=png" alt="image">  </p><p>如果我们编辑一句话shell：” “为cmd.php文件，上传成功后访问文件url并且传参cmd=phpinfo()，查看结果如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSjibvswpiaqmC7RUE4RCiakml8tAyI8MYRLQBJ4hbJZMpksmIfnl2CyQQA/0?wx_fmt=png" alt="image">  </p><p>我们修改cmd参数为任意命令，如cmd= system(‘dir’); ，显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSJBfU82pYNGCMKOUqzRbcL2xVaDtiaOKFOBq7tnpHd15XhDMPRBfNHFw/0?wx_fmt=png" alt="image">  </p><p>一旦被黑客利用，后果不堪设想。  </p><h3 id="1-6-文件包含漏洞"><a href="#1-6-文件包含漏洞" class="headerlink" title="1.6 文件包含漏洞"></a>1.6 文件包含漏洞</h3><p>如下页面，点击file1、file2、file3，页面地址都会随之变化为  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarNC2CELvmwtTTX2Muk7dFhx85sYabX7HricrrHFK14T6r7YA0sJr74bQ/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiaricpOlozTPkUv86wjBpW7yNAHx6cicVYMNbsCYNujgdYXm6iaOoJl0KClw/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarp9Bj02HHsys7uEdq6hnJlENshtTJFELMFJ190ZwOvb8SXPLTzdG8Cg/0?wx_fmt=png" alt="image">  </p><p>由此，page参数就是我们可以利用的地方，我们修改page参数为随意字段，如abc.php访问，则显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarkFcpCOmg3jo1CuoG2rFKSb3lYOstBJmGA7HOjeiaVjCZWRkzcnl2CibQ/0?wx_fmt=png" alt="image">  </p><p>报错信息中，我们获取到文件的物理路径，可以利用该漏洞读取本地文件，如读取dvwa目录下的php.ini文件，将文件路径进行如下修改：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarM7OKmOjZK2LmK6epwer4U8DibaoEKItsIl5f54DO1TkWcwOgiaricYeSQ/0?wx_fmt=png" alt="image">  </p><p>也就是page参数为”../../php.info”，访问显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarHHEbN4Ywu3Q3I1iadzsR4WCJF6Da5C4tmEVUv7kHIZbHbKL7LBAMSog/0?wx_fmt=png" alt="image">  </p><p>成功读取服务端文件信息，当然，攻击者肯定不满足读取本地文件，攻击者可以修改成可执行php代码进行攻击。  </p><h3 id="1-7-点击劫持（ClickJacking）"><a href="#1-7-点击劫持（ClickJacking）" class="headerlink" title="1.7 点击劫持（ClickJacking）"></a>1.7 点击劫持（ClickJacking）</h3><p>点击劫持是一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的iframe，覆盖在一个网页上，然后诱使用户在该网页上进行操作，此时用户将在不知情的情况下点击透明的iframe页面。通过调整iframe页面的位置，可以诱使用户恰好点击在iframe页面的一些功能性按钮上。也就是通过覆盖不可见的框架误导受害者点击而造成的攻击行为。   </p><p>隐蔽性高，骗取用户操作，也称UI-覆盖攻击，是利用iframe或者其他标签的属性，如flash也可以。  </p><h3 id="1-8-URL跳转漏洞与钓鱼"><a href="#1-8-URL跳转漏洞与钓鱼" class="headerlink" title="1.8 URL跳转漏洞与钓鱼"></a>1.8 URL跳转漏洞与钓鱼</h3><p>借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十二:Bug管理规范）</title>
    <link href="http://wysh.site/2016/11/23/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81%E4%BA%8CBug%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <id>http://wysh.site/2016/11/23/产品测试规范十二Bug管理规范/</id>
    <published>2016-11-23T00:34:34.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-11-Bug管理规范"><a href="#1-11-Bug管理规范" class="headerlink" title="1.11 Bug管理规范"></a>1.11 Bug管理规范</h2><h3 id="1-11-1-bug提交规范"><a href="#1-11-1-bug提交规范" class="headerlink" title="1.11.1 bug提交规范"></a>1.11.1 bug提交规范</h3><p>Bug的报告要求描述内容清晰、简介、易懂，让用根据简要描述就可以大致了解问题所在：  </p><p><strong>缺陷ID</strong>  </p><p>BUG的唯一标识，由BUG管理工具自动生成。  </p><p><strong>项目名称</strong>  </p><p>每个要测试的软件项目都有唯一的名称。  </p><p><strong>问题类型（严重程度）</strong>  </p><p>BUG所属的类型（即严重程度），包括致命问题、严重问题、一般  问题、优化建议等。缺陷标题简明的对BUG进行概要描述。  </p><p><strong>缺陷标题</strong>  </p><p>简明的对BUG进行概要描述。  </p><p><strong>优先级</strong>  </p><p>BUG解决的优先级。  </p><p><strong>所属模块</strong>  </p><p>项目的各个组成模块。  </p><p><strong>测试版本</strong>  </p><p>提交BUG时，一定要正确填写产生BUG的软件版本号。  </p><p><strong>分派人</strong>  </p><p>BUG需要指派处理的人员，如果不清楚统一给项目负责人。  </p><p><strong>报告人</strong>  </p><p>报告BUG的人员。  </p><p><strong>测试环境</strong>  </p><p>可根据实际描述当前测试的软硬件环境，以作为参考。</p><p><strong>详细描述</strong>  </p><p>在详细描述中，可对BUG产生的前提条件、操作的步骤、实际结 果、预期结果等进行描述。</p><p><strong>文字注释与附图</strong>  </p><p>在提交BUG时，可上传必要的附图，便于确认错误的表现形式和 错误位置等。  </p><p>在提交BUG时，提交人可根据提交BUG的紧急程度，选择对应的“优先级”，同时建议开发人员在处理BUG的时候能够根据优先级进行处理，优先级别较高的可以最先进行处理。  </p><p>在BUG详细描述中，可在从BUG产生的前提条件、操作的步骤、实际结果、预期结果等方面进行描述：  </p><ol><li><p>前提条件：有些BUG的产生是需要在一定条件下才会出现，例如浏览器、分辨率、Office版本等，所以就要求在描述时描述清楚前提条件；  </p></li><li><p>BUG的操作步骤：详细的、有次序的、每一步的操作步骤，包括输入的数据，尽可能的重新操作的步骤；</p></li><li><p>实际结果：指的我按照以上的操作步骤，最后得出的结果是什么， 例如我点击“增加”按钮后出现白页，这就是实际结果；</p></li><li><p>预期结果：指的我按照以上的操作步骤，我想要得到的结果是什么，例如我点击“增加”按钮想要得到的预期结果是提示我“增加成功”提示；</p></li><li><p>图文描述：在必要的情况下可上传截图并注释文字，这样更便于确认错误的表现形式和错误位置等。</p></li></ol><p>一般情况下，开发人员在提交BUG时，“分派人”可指定对应的处理人员，如果无法确定“分派人”，可分派给项目的负责人，然后由项目负责人进行二次分派给对应的开发人员进行处理。在分派时可以添加一些对应的批注信息。</p><h3 id="1-1-2-bug级别定义"><a href="#1-1-2-bug级别定义" class="headerlink" title="1.1.2 bug级别定义"></a>1.1.2 bug级别定义</h3><p>具体的优先级别有以下几种   </p><p><strong>1</strong>  </p><p><strong>致命问题(一级bug)</strong>  </p><p>致命问题：不能完全满足系统正常的功能操作要求，系统停止运行，系统的重要部件无法运行，系统崩溃或挂起等导致系统不能继续运行。  </p><ol><li><p>常规操作下因程序问题导致系统崩溃，迫使整个系统无法使用（其中非程序问题有：系统配置、数据结构变动、session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。  </p></li><li><p>常规操作下因程序问题导致程序重启、死机或非法退出。</p></li><li><p>常规操作下系统出现死循环。</p></li><li><p>数据丢失或异常。</p></li><li><p>模块间数据传递及取值错误（如：输入A，预期结果应该是B，但实际结果不是B等）。</p></li><li><p>流程输出错误（包括业务流程和事件流程。如：输入流程A，但实际流程处理中未能按A流程处理数据；点击某按钮，应跳转增加页面，结果跳转成修改页面等）。</p></li><li><p>按照需求文档，功能未在程序中体现出来，即系统无此功能（据项目经理及相关负责人确认此功能必须具备的）；功能不符合用户需求，功能实现不正确（由项目经理及相关负责人确认此功能必须具备的）。</p></li></ol><p><strong>2</strong>  </p><p><strong>严重问题(二级bug)</strong>  </p><p> 严重问题：严重地影响系统要求或基本功能的实现，且没有更正办法（重新安装或重新启动该软件不属于更正办法）。使系统不稳定、或破坏数据、或产生错误结果，或部分功能无法执行，而且是常规操作中经常发生或非常规操作中不可避免（不能用其他操作修复问题）的主要问题，系统无法满足主要的业务要求，性能、功能或可用性严重降低。  </p><ol><li><p>数据计算错误。</p></li><li><p>因程序问题迫使正在操作的流程无法继续且无其他操作可以修复问题的（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>常规操作下功能异常，如：结果与实际查询条件不一致、页面按钮点击没反应等。</p></li><li><p>功能项的某些项目（可为所有控件）使用无效（对系统非致命的）。</p></li><li><p>因程序问题迫使正在操作的流程无法继续且有其他操作可以修复问题的（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>多余功能，且该功能影响了程序的正常使用（需项目经理及相关负责人确认），如客户名称录入项需要录入汉字和英文，但程序限制了只能输入汉字等。</p></li><li><p>常规操作下，程序打印、导出的内容错误。</p></li><li><p>在程序安装配置无误的情况下相关功能js报错，且该功能影响业务流的正常进行。</p></li><li><p>在1024*768分辨率下，页面严重变形，使数据无法浏览。</p></li><li><p>在Session超时，无友情页面提示</p></li></ol><p><strong>3</strong>  </p><p><strong>中级问题（三级bug）</strong>  </p><p>系统可以满足业务要求，系统性能或响应时间变慢、产生错误的中间结果但不影响最终结果等影响有限的问题，另外，还包括系统健壮性方面的测试。</p><ol><li><p>对于一些重要数据的操作、重要环节的变动且相关的操作和变动不可挽回时，系统应给出相应的操作确认提示，防止误操作，如数据删除、审批等。</p></li><li><p>常规操作下页面跳转至错误友情提示页面，且操作其他模块，程序可正常运行（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录）。</p></li><li><p>功能实现不完整，如删除时没有考虑数据关联。</p></li><li><p>因错误操作且因程序问题导致系统崩溃，迫使整个系统无法使用（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>数据添加、修改、查看界面中控件没有一一对应或对应控件长度、格式、验证性提示信息内容等不一致，但又不影响程序功能的进一步的操作（最终以需求规格说明书中内容规定为准）。</p></li><li><p>响应时间较慢。（不可超过1分钟）</p></li><li><p>功能性建议。</p></li><li><p>操作界面错误（包括数据窗口内列名定义、含义是否一致）。</p></li><li><p>简单的输入限制未放在前台进行控制。</p></li><li><p>虽然正确性不受影响，但系统性能和响应时间受到影响。</p></li><li><p>常规操作下，程序显示、打印、导出的内容格式错误，如页面变形、金额类数据未加货币符号等。</p></li><li><p>在程序安装配置无误的情况下相关功能js报错，且该功能不影响业务流的正常进行。</p></li><li><p>页面验证提示信息位置或内容错误，如空值验证对应位置或内容错误、提示对话框内容错误等（最终以需求规格说明书中内容规定为准）。</p></li><li><p>在1024*768分辨率下，页面变形，但不影响数据的浏览。</p></li><li><p>输入超长数据或特殊字符导致程序报黄页或跳转到友情提示页面等影响程序进一步的操作（需跳转友情页面）。</p></li><li><p>在Session超时（需友情页面）、网络中断时，出现浏览器卡死、报黄页等异常情况，且没有对应的错误捕获机制并给出友情提示。</p></li><li><p>滚动条无效，但不影响数据的显示与浏览。</p></li><li><p>界面不规范，页面表现形式、样式与其他类似功能模块不一致，且差异明显的。</p></li><li><p>必填项与非必填项应加以区别。</p></li></ol><p><strong>4</strong>  </p><p><strong>轻微问题</strong>  </p><p>轻微问题：使操作者不方便或遇到麻烦，但它不影响执行工作功能或重要功能。界面拼写错误或用户使用不方便等小问题或需要完善的问题。  </p><ol><li><p>页面表现建议。</p></li><li><p>功能操作建议。</p></li><li><p>非程序代码导致黄页（如：手动删除、修改、增加数据库中的数据；缺少相应的系统配置；项目缺少目录或文件、因不明操作导致数据库中数据不符合正常逻辑关系）。</p></li><li><p>辅助说明字体大小、颜色明显与页面整体表现形式不协调或者文字描述不清楚。</p></li><li><p>长时间操作未给用户提示（不可超过1分钟），但程序一直在正常运行的，没有出现卡死等情况，如给出旋转的loading图标或程序后台操作进度条或显示进度百分比等。</p></li><li><p>提示窗口文字未采用行业术语。</p></li><li><p>可输入区域和只读区域没有明显的区分标志，如只读区域置灰显示等。</p></li><li><p>键盘支持不好，如在可输入多行的字段中不支持回车换行，输入查询条件后不支持回车触发查询。</p></li><li><p>界面不能及时刷新，如需要重新执行查询或加载页面等（最终以需求规格说明书中内容为准）。</p></li></ol><p>以上就是产品的测试规范，囊括了从需求到测试计划、测试准备、测试执行、结果分析、上线准备、跟踪测试到项目总结的整个流程，规范了产品测试流程。</p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防    </p><p>1.10.2 app常见产品问题及预防</p><p>[TOC]  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十一:Bug预防体系）</title>
    <link href="http://wysh.site/2016/11/07/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81%E4%B8%80Bug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/11/07/产品测试规范十一Bug预防体系/</id>
    <published>2016-11-07T11:23:38.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-10-2-app常见产品问题及预防"><a href="#1-10-2-app常见产品问题及预防" class="headerlink" title="1.10.2 app常见产品问题及预防"></a>1.10.2 app常见产品问题及预防</h3><p><strong>11</strong>  </p><p><strong>网络机制(2)</strong>  </p><p>a：未加载完图片时切换到相似tab，切回不再加载图片；  </p><p>b：进入一个tab，该页面已经加载完成，选择点击某个详细信息页面返回时，页面会闪一下。  </p><p><strong>预防方法：</strong>  </p><p>a：一个页面有多个tab页时，用户切换tab可不轻易取消线程，取而代之使用暂停线程，退出页面时才回收清除；  </p><p>b：启动负载分摊机制的请求，可先保存请求地址，供返回时判断避免重复加载。  </p><p><strong>12</strong>  </p><p><strong>网络机制(3)</strong>  </p><p>a：iOS弱网络下获取不到配置，导致启动卡死；  </p><p>b：sim卡未激活，无移动网络，某些功能卡死；  </p><p>c：断网下启动，登录状态丢失，某些功能信息未正确显示。  </p><p><strong>预防方法：</strong>  </p><p>a：启动逻辑中的网络类请求不能阻塞UI主线程，即网络请求数据可不即时响应（可在下次启动时生效）；  </p><p>b：按钮的点击事件不跟接口关联，做成异步处理不管是否有返回，都可以正常进行点击操作；  </p><p>c：离线操作类，不因与当前网络状态有影响。  </p><p><strong>13</strong>  </p><p><strong>下载空间有效性判断</strong>  </p><p>a：空间不足时，无法保存信息时，没有提示和提前判断；  </p><p>b：本地存储空间不足时，保存文件时没有相应提示；  </p><p>c：空间不足时，文件下载不成功，导致重复不停下载，浪费用户流量。  </p><p><strong>预防方法：</strong>   </p><p>a：对磁盘剩余空间的判断和自动清理逻辑可以做统一封装，提供各不同下载业务使用  </p><p>b：可结合系统硬件配置的10%作为有效剩余空间阀值；  </p><p>c：针对手机内外置SDCard，可以在空间不足情况下做分区切换机制。  </p><p><strong>14</strong>  </p><p><strong>下载文件完整性判断(1)</strong>  </p><p>a：换肤图片未下载完，就触发换肤操作，导致换肤效果错误；  </p><p>b：图片无法下载完全，导致图片展示不完整；  </p><p>c：文件下载完成后，由于网络错误与源文件不符，导致下载后无法播放；  </p><p>d：上传文件功能，目标物理文件不存在（界面缺显示存在），导致传送文件页面一直处于等待中。  </p><p><strong>预防方法：</strong>  </p><p>a：通过判断下载前后文件的size或者文件内容签名，确保下载文件完整后再触发文件使用相关的逻辑；  </p><p>b：文件传输时检查文件是否存在，若不存在则视为传输失败，不阻塞后续传输。  </p><p><strong>15</strong>  </p><p><strong>阻断连续操作</strong>  </p><p>a：连续快速切换界面，或者频繁触发某些功能操作，导致程序卡死；  </p><p>b：连续多次点击同一张图片，导致该图片下载错误。  </p><p><strong>预防方法：</strong>  </p><p>a：使用间隔响应、延迟响应的方式，达到多次相同操作只的触发一次有效逻辑。  </p><p>b：操作一次后，可将按钮等元素设定为禁用状态，防止用户多次点击和请求。  </p><p><strong>16</strong>  </p><p><strong>有效统计逻辑</strong>  </p><p>a：操作页面某些元素，也会导致发送页面使用的统计信息。  </p><p><strong>预防方法：</strong>   </p><p>a：为确保统计数据上传的有效性，只针对真正展示的界面做上报统计，对于展示不完整、非针对性展示不做统计上报。  </p><p><strong>17</strong>  </p><p><strong>程序健壮性判断(1)</strong>  </p><p>a：分享到新浪微博（手机未装新浪微博客户端） ,app崩溃；  </p><p>b：后台接口变更（返回值和类型发生变化），客户端不兼容新格式判断，抛出崩溃异常；  </p><p>c：搜索默认操作崩溃；  </p><p>d：使用外部第三方数据，出现空数据或者非标准格式，则app崩溃  </p><p>e：输入框没有限制字符长度，保存时导致溢出崩溃。  </p><p><strong>预防方法：</strong>   </p><p>a：客户端针对接口返回需做容错处理，如返回为空、返回数据类型不一致；  </p><p>b：任何文本框类型的需要限制输入长度。  </p><p><strong>18</strong>  </p><p><strong>程序健壮性判断(2)</strong>  </p><p>a：某些功能的初始化逻辑没有加入启动逻辑，导致功能使用失败；  </p><p>b：退出重启app，无法自动登录。 </p><p><strong>预防方法:</strong>  </p><p>a：制定启动加载逻辑规范；  </p><p>b：对于重要的业务建议加入启动逻辑，并在业务实际使用时再根据状态多一层判断和加载；  </p><p>c：产品人员需要考虑是否需要保存自动登录功能，并明确告之开发和测试人员。  </p><p><strong>19</strong></p><p><strong>安全机制</strong>  </p><p>a：在URL中不要带有明文的用户信息写代码的时候，不要把密码等敏感的用户信息明文的显示在url中；  </p><p>b：即使要传递密码参数也不要使用pwd、passpord这样的参数名称来进行传递，防止被截获；  </p><p>c：要在传递参数的操作中使用NoCache参数，防止将url参数进行缓存。  </p><p><strong>预防方法：</strong>  </p><p>a：建立标准的数据传输和命名规范，并制作一些网页开发模板或者规范供参考。  </p><p><strong>20</strong>  </p><p><strong>日志调试管理</strong>  </p><p>a：上线以后，调试日志没有关闭，影响程序性能。  </p><p><strong>预防方法：</strong>  </p><p>a：日志统一开关，编译正式包需要关闭；  </p><p>b：再程序界面有入口可以检查是否关闭，方便及时校验；  </p><p>c：方便定位问题，可以做日志动态开启的隐藏开关；  </p><p>d：方便收集问题，可以对问题类型做上报处理（典型如崩溃日志上报）。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>[TOC]  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
