<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vincent&#39;s Home</title>
  
  <subtitle>欢迎访问！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wysh.site/"/>
  <updated>2018-05-01T17:47:44.000Z</updated>
  <id>http://wysh.site/</id>
  
  <author>
    <name>吴勇胜（Vincent）</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>详解服务器性能测试的全生命周期？——从测试、结果分析到优化策略</title>
    <link href="http://wysh.site/2017/06/24/%E8%AF%A6%E8%A7%A3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E5%85%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%8E%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%88%B0%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://wysh.site/2017/06/24/详解服务器性能测试的全生命周期从测试结果分析到优化策略/</id>
    <published>2017-06-24T06:20:17.000Z</published>
    <updated>2018-05-01T17:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>服务器性能测试是一项非常重要而且必要的工作，本文是作者Micheal在对服务器进行性能测试的过程中不断摸索出来的一些实用策略，通过定位问题，分析原因以及解决问题，实现对服务器进行更有针对性的优化，提升服务器的性能。  </p></blockquote><h2 id="1-服务器性能测试小结"><a href="#1-服务器性能测试小结" class="headerlink" title="1. 服务器性能测试小结"></a>1. 服务器性能测试小结</h2><p> 讲到服务器性能大部分人会想到这个服务器的架构是什么样子的，用的什么epoll，select，spring，tornado之类的。其实从本质上来看的话目前大部分的服务器主要包括逻辑层以及DB层，我们采用的各种框架组件处于逻辑服务器中，如下图所示。<br> <img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7OGDJykZM7QvZRFPOjExHgjvKXhGN4bW1s3ic0rqM7OhhhKLkIia9jOrQ/0?wx_fmt=gif" alt="image">  </p><p> 服务器性能测试是一项比较繁琐的事情，作为没有做过性能测试的同学可能需要理清楚以下几个事情。</p><h3 id="1-1-协议分析"><a href="#1-1-协议分析" class="headerlink" title="1.1. 协议分析"></a>1.1. 协议分析</h3><p>首先是协议分析，性能测试本质上是我们用代码来模拟真实的用户请求，所以我们必须要知道发送出去的请求内容才能模拟。在典型的CS服务器中很多使用了protobuf，thrift，tdr（腾讯自研）来序列化以及反序列号请求内容。  </p><p>序列化之后一方面可以对数据进行压缩处理，另一方面也避免请求内容明文传输造成被抓包·泄漏数据的危险。之前有过服务器传输数据的时候使用的是明文直接发送，而且这个数据是一些敏感的sql语句，这样首先暴露了数据库的表结构，同时不法分子可以通过模拟发包造成“脱裤”甚至是数据被清空。  </p><h4 id="1-1-1-Protobuf"><a href="#1-1-1-Protobuf" class="headerlink" title="1.1.1.   Protobuf"></a>1.1.1.   Protobuf</h4><p>谷歌出品，必属精品。Protobuf使用起来很方便，学习成本非常低，而且序列化和反序列号的接口很容易使用。同时它相对于xml以及json，极大的的减小了数据占用的空间，减少了传输成本。目前支持包括C，java以及python等多个语言。Protobuf目前用的比较多，打解包也很方便，比较推荐使用。  </p><h4 id="1-1-2-Thrift"><a href="#1-1-2-Thrift" class="headerlink" title="1.1.2.   Thrift"></a>1.1.2.   Thrift</h4><p>Thrift是一个跨语言的轻量级rpc消息和数据交换框架。Thrift支持几乎绝大部分主流的语言，包括C, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml，虽然大部分我都没有用过。相对于protobuf，thrift提供了全套RPC解决方案，包括序列化机制、传输层、并发处理框架等，也因为如此thrift的学习成本比较高。  </p><h4 id="1-1-3-腾讯自研协议tdr"><a href="#1-1-3-腾讯自研协议tdr" class="headerlink" title="1.1.3.   腾讯自研协议tdr"></a>1.1.3.   腾讯自研协议tdr</h4><p>Tdr是腾讯自研跨平台多语言数据表示组件，主要用于基于数据的序列化反序列化（支持二进制方式和XML文本方式）以及ORM数据存储。广泛用于互娱自研游戏和部分代理游戏。在性能上基本和protobuf差不多，主要应用在C程序中。<br>在做服务器性能测试之前，我们需要了解它的协议是怎么定义的。</p><h3 id="1-2-机器人管理"><a href="#1-2-机器人管理" class="headerlink" title="1.2.  机器人管理"></a>1.2.  机器人管理</h3><p>本质上机器人管理就是一个调度控制器，在获取需要发送的请求协议之后，需要有一个框架来管理所有的机器人，控制机器人的启动，发送请求以及停止的动作。框架的选择需要根据服务器的实际情况来，不同的业务场景，使用不同的框架产生的压力上限也会不一样。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7Sf2V9LvI1Hcb0PibfLTRj1L8OlS5on0wpP0kFl452ODdlPRd4kjCA4A/0?wx_fmt=gif" alt="image">   </p><p>以一个简单的多线程框架为例，主线程负责控制逻辑，管理所有的机器人状态信息。子线程执行每个机器人的任务，包括连接服务器，发送数据，接收数据，断开连接等。</p><h3 id="1-3-结果统计"><a href="#1-3-结果统计" class="headerlink" title="1.3.  结果统计"></a>1.3.  结果统计</h3><p>机器人发送请求包之后，一般是要等待服务器的响应回包。服务器那边可以计算本次压测过程中各项业务数据，包括TPS，总的收发包量等。    </p><p>不可能在测试过程中一直盯着各个数据看，我们需要把每项数据记录下来，后续综合各项结果进行分析。<br>这里的结果统计除了需要统计每个机器人收到回包的结果，还需要统计服务器在压测过程中的各项性能数据变化。一旦客户端的压力上到一定值时，服务器某项资源支撑不了的话，说明这个资源可能存在短板，存在可以优化的空间。    </p><p>性能结果分析是一个比较复杂的过程。需要综合硬件、操作系统、应用程序等多方面来定位。  </p><h3 id="2-1-硬件的影响"><a href="#2-1-硬件的影响" class="headerlink" title="2.1.  硬件的影响"></a>2.1.  硬件的影响</h3><p>硬件对服务器性能影响还是蛮大的，如果是土豪的话，可以直接买最好的。我们分析硬件主要是希望选择合适的配置，节约资源，避免出现高射炮打蚊子的情况。  </p><h5 id="2-1-1-CPU"><a href="#2-1-1-CPU" class="headerlink" title="2.1.1.   CPU"></a>2.1.1.   CPU</h5><p>在资金的充足下，一般来说CPU的数量越多，主频越高，那么服务器的性能也就会越好。在实际测试过程中，如果在大压力下持续观察CPU的使用率很低，那么CPU的资源基本上是可以满足服务器要求的。这样的情况其实是有点浪费CPU资源的，比较理想的情况是压力不大的时候CPU利用率比较低，压力上来之后CPU利用率保持在60%-70%。  </p><p>大部分的CPU在同一时间内只能运行一个线程，但是超线程的处理器可以在同一个时间运行多个线程，我们可以利用处理前超线程特性提高系统性能。虽然采用超线程技术能同时执行两个线程，但它并不象两个真正的CPU那样，每个CPU都具有独立的资源。当两个线程都同时需要某一个资源时，其中一个要暂时停止，并让出资源，直到这些资源闲置后才能继续。因此超线程的性能并不等于两颗CPU的性能。  </p><h4 id="2-1-2-内存"><a href="#2-1-2-内存" class="headerlink" title="2.1.2.   内存"></a>2.1.2.   内存</h4><p>内存的大小也是影响服务器性能的一个重要因素。内存太小，系统进程要被阻塞，应用程序会变得缓慢，甚至是失去响应；如果太大的话，也是造成一种浪费。Linux系统中采用物理内存和虚拟内存两种方式，使用虚拟内存可以缓解物理内存的不足，但是如果占用过多的虚拟内存的话，应用程序的性能会明显的下降。  </p><h4 id="2-1-3-网络带宽"><a href="#2-1-3-网络带宽" class="headerlink" title="2.1.3.   网络带宽"></a>2.1.3.   网络带宽</h4><p>网络带宽的大小限制了客户端与服务器交互的流量，相对其他硬件资源，网络带宽在价格上更贵。这需要我们合理预估服务器的可服务器能力，需要占用的带宽资源。  </p><h4 id="2-1-4-磁盘IO"><a href="#2-1-4-磁盘IO" class="headerlink" title="2.1.4.   磁盘IO"></a>2.1.4.   磁盘IO</h4><p>目前磁盘都是机械方式运作的，主要体现在磁盘读写前寻找磁道的过程。磁盘自带的读写缓存大小，对于磁盘读写速度至关重要。读写速度快的磁盘，通常都带有较大的读写缓存。磁盘的寻道过程是机械方式，决定了其随机读写速度将明显低于顺序读写。在我们做系统设计和实现时，需要考虑到磁盘的这一特性  </p><h3 id="2-2-操作系统及软件"><a href="#2-2-操作系统及软件" class="headerlink" title="2.2.  操作系统及软件"></a>2.2.  操作系统及软件</h3><h5 id="2-2-1-版本"><a href="#2-2-1-版本" class="headerlink" title="2.2.1.   版本"></a>2.2.1.   版本</h5><p>不同的操作系统在内核实现上可能各不相同，因而对运行在上面的应用程序来说可能影响比较大。  </p><p>笔者并没有做过分析不同操作系统对服务器性能的影响，因为只用过Linux开发服务器程序。Linux操作系统在这十几年发展的异常迅猛，目前大部分的服务器都是运行在Linux操作系统上的。Linux目前具有最好的生态系统，服务器端的各种软件都为它而设计，默认都认为你是在 Linux 上跑，你要是整一个非 Linux 的服务器，你得有足够的心理准备，因为出现任何问题，你可能未必能找到能帮你解决问题的人。  </p><h4 id="2-2-2-参数配置"><a href="#2-2-2-参数配置" class="headerlink" title="2.2.2.   参数配置"></a>2.2.2.   参数配置</h4><p>先说一个小故事。福特公司一套重要设备出现故障，找了很多人来维修，结果都没有维修好，没办法了，就在购买设备的英国公司高价聘请一位工程师过来维修，工程师来到之后，反复查找原因，最后在一个小零件上划了一条线，然后对旁边福特公司的人说，在划线的地方切掉就好了，果不其然，切掉之后故障真的解除了，按照合约，福特公司应支付公司一万美元，周围的人都唏嘘不已，感叹一条线就可以价值一万美元，工程师回答到：那条线只值一美元，而怎样找到那条线值9999美元。  </p><p>我们在测试服务器的过程中，经常会遇到性能上不去。查看CPU，网络，IO消耗都挺低的，就是定位不到问题的原因。有经验的程序员可能会告诉你你把某个参数修改一下，立马性能噌噌噌上去了。比如mysql相关设置，系统文件描述符，缓冲区大小，time_wait快速回收设置等，甚至是线程池配置的线程个数也会对服务器的性能产生较大的影响。  </p><p>关于数据库参数的设置，比如mysql的配置文件my.cnf文件中，修改不同的配置（比如innodb_flush_log_at_trx_commit 设置为0，1还是2 ）可能会对数据库的读写性能影响很大。  </p><h4 id="2-2-3-应用程序本身实现"><a href="#2-2-3-应用程序本身实现" class="headerlink" title="2.2.3.   应用程序本身实现"></a>2.2.3.   应用程序本身实现</h4><p>比如程序中需要频繁申请内存，使用bzero和memset对服务器性能影响差距可能会很大。  </p><p>另外程序中的一些查询操作，采用不同的数据结构，可以实现时间和空间上的相互转化，从而影响服务器的性能。  </p><h2 id="3-Linux下的数据监控工具"><a href="#3-Linux下的数据监控工具" class="headerlink" title="3. Linux下的数据监控工具"></a>3. Linux下的数据监控工具</h2><h3 id="3-1-Vmstat"><a href="#3-1-Vmstat" class="headerlink" title="3.1. Vmstat"></a>3.1. Vmstat</h3><p>Vmstat，virtual memmory statistics（虚拟内存统计），主要是对操作系统的内存信息、进程状态、cpu活动等进行监视，但是它不能对某个进程进行深入的分析。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7aUzjib2mpwyibh8GDrDrp8MoTalMAJRBH2zvO0SQhdabMSGg4feOsxbA/640?wx_fmt=jpeg" alt="image">  </p><p>Procs中r列表示运行和等待CPU时间片的进程数，如果r值长期大于CPU个数，说明CPU资源不够用啦，可以适当增加CPU数量。  </p><p>Procs中b列表示当前等待资源的进程数，包括等待I/O，内存等。  </p><p>Swpd列表示切换到内存交换区的KB数，一般si，so为0的话基本不影响系统的性能。  </p><p>Cache是page cache的内存数量，Linux会把空闲的物理内存的一部分拿来做文件和目录的缓存，以便提高程序执行的性能。如果cache的值较大的话，说明缓存了太多的文件，如果bi值小的话，说明文件系统效率比较高。  </p><p>Si是每秒从磁盘读入虚拟内存的大小，如果这个值一直大于0，表示物理内存不够用或者内存泄露了，需要查找耗内存进程解决掉。  </p><p>Bi，bo是表示从块设备读入数据的总量以及写到块设备的数据总量。如果bi+bo值比较大，而且wa值也比较大的话，说明系统磁盘I/O可能有问题，性能不高。  </p><p>In和cs是每秒钟的设备中断数以及上下文切换数。它们很大的话，表面内核消耗的CPU时间较多。  </p><h3 id="3-2-Top"><a href="#3-2-Top" class="headerlink" title="3.2. Top"></a>3.2. Top</h3><p>Top是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。它可以按照系统中当前进程的CPU利用率以及占用的内存大小进行排序，可以比较快速定位出系统响应迟钝的原因。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7uyVhIzfMjOK5qEMjEMbbicwhDl3KozIE9Yg8VZbSAPg8yibzczD8vKlg/640?wx_fmt=jpeg" alt="image"> </p><p>top是一个显示数据较多的工具，第一行显示的是系统的开机运行时间，机器的CPU负载信息；第二行显示当前系统任务的总数，以及各个状态的进程数；第三行显示的是CPU资源的使用情况总览；第四行显示内存的使用情况总览；第五行显示的是内存交换区的使用情况总览；后面开始是每个进程对资源使用的情况。  </p><h3 id="3-3-Nmon"><a href="#3-3-Nmon" class="headerlink" title="3.3.  Nmon"></a>3.3.  Nmon</h3><p>Nmon提供对CPU、内存、网络、磁盘等系统资源占用情况分析，相比其他Linux命令获取到的数据，nmon的功能更为集中、配置性更强。通过nmon采集到数据之后可以在windows系统中使用nmon_analyser做数据的展示以及分析工作，可视化效果比较好。  </p><p>由于一般Linux系统都不自带nmon，使用之前需要下载安装。  </p><h3 id="3-4-Uptime"><a href="#3-4-Uptime" class="headerlink" title="3.4. Uptime"></a>3.4. Uptime</h3><p>Uptime命令显示系统已经运行了多长时间，它依次显示当前时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。  </p><p>关于系统平均负载，它表示在特定时间间隔内运行队列中的平均进程数。如果一个进程满足以下条件则其就会位于运行队列中：没有在等待I/O操作的结果；没有主动进入等待状态；没有被停止。  </p><h3 id="3-5-Netstat"><a href="#3-5-Netstat" class="headerlink" title="3.5.  Netstat"></a>3.5.  Netstat</h3><p>Netstat命令可以显示本机的网络连接情况，监听端口以及路由表等各种网络相关信息。Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。  </p><p>比较常用的可以用次命令查看当前开启监听的服务器进程信息以及端口信息。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7ZNdk6KukibDGHBqPDPFPLJpHqib3iaAYE9yhcrsAia0s7Te9rVYMOxrS2g/640?wx_fmt=jpeg" alt="image">  </p><h3 id="3-6-Free"><a href="#3-6-Free" class="headerlink" title="3.6.  Free"></a>3.6.  Free</h3><p>Free是监控Linux使用情况最常用的命令。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7QcDjcBdOpd4ReiaVQMeoxYtZ5gtaZe17hKEzBoXKtpmOhRfm4Lc7Olg/640?wx_fmt=jpeg" alt="image">  </p><p>“Free -m”可以查看以M为单位的使用情况，这里主要观察free和cached两列。  </p><p>一般来说，如果应用程序可用内存/系统物理内存&gt;70%时，表明目前系统内存资源比较充足，不影响系统性能；如果应用程序可用内存/系统物理内存&lt;20%时，表明目前系统内存资源比较紧缺，需要释放其他程序内存或者增加内存；如果应用程序可用内存/系统物理内存在20%-70%之间，表明目前系统的内存资源基本满足应用需求，暂时不影响系统的性能  </p><h3 id="3-7-Sar"><a href="#3-7-Sar" class="headerlink" title="3.7. Sar"></a>3.7. Sar</h3><p>Sar也是一个强大的分析系统性能的工具，它可以比较全面的获取系统的CPU，运行队列，磁盘IO，分页，内存，CPU中断，网络等多项数据。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc74HZibcLbxKLdyY0AszSFmlWtrS2roXKABh9GJvGPdGHIZKibOibFzf8TQ/640?wx_fmt=jpeg" alt="image"><br>上图是使用sar获取系统CPU的整体负责情况，每隔1秒统计一次，统计3次，最后会给出3次的平均值。需要查看其他的数据可以查看手册使用。  </p><h3 id="3-8-Iostat"><a href="#3-8-Iostat" class="headerlink" title="3.8.  Iostat"></a>3.8.  Iostat</h3><p>Iostat是I/O statistics的缩写，主要功能是对系统的磁盘I/O操作进行监控。它的输出主要显示磁盘读写操作的统计信息，同时也会给出CPU的使用情况。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7wsOoyicvK4ugliayMCaJGTTAMlXY05ytmUg1rkx6jGbGpl2DwrrdJHpA/640?wx_fmt=jpeg" alt="image">  </p><p>这里显示的是查看CPU和磁盘的信息，统计间隔2秒，共3次。  </p><h3 id="3-9-Valgrind"><a href="#3-9-Valgrind" class="headerlink" title="3.9. Valgrind"></a>3.9. Valgrind</h3><p>Valgrind是一款广泛用于监控程序运行过程进行内存调试、内存泄漏检测以及性能分析的工具。它会给出内存泄漏的统计，包括definitely lost,indirectly lost,possibly lost,still reachable ,suppressed等，我们可以使用valgrind来测试程序中内存不规范使用的部分。同时对于地址越界问题也可以通过valgrind扫出来，它会统计invalid write的情况。  </p><h2 id="4-服务器的性能优化"><a href="#4-服务器的性能优化" class="headerlink" title="4. 服务器的性能优化"></a>4. 服务器的性能优化</h2><h3 id="4-1-存储的优化"><a href="#4-1-存储的优化" class="headerlink" title="4.1. 存储的优化"></a>4.1. 存储的优化</h3><p>IO相对来说比较耗时，我们都知道越靠近CPU的存储，其访问速度越快，但是其价格越贵。下图来展示了不同存储的容量以及访问时间。  </p><p>目前很多同学在优化服务器性能的时候都会从存储这方面入手。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7MHDxSkicjSIYGFibxxmCB9ib1Qz2scSZqJLnPG1o7ibP8SBjibq03KkKZ0w/0?wx_fmt=gif" alt="image">  </p><h4 id="4-1-1-用内存换时间"><a href="#4-1-1-用内存换时间" class="headerlink" title="4.1.1. 用内存换时间"></a>4.1.1. 用内存换时间</h4><h6 id="4-1-1-1-增加缓存"><a href="#4-1-1-1-增加缓存" class="headerlink" title="4.1.1.1. 增加缓存"></a><strong>4.1.1.1. 增加缓存</strong></h6><p>很多web应用是有大量的静态内容，这些静态内容主要都是一些小文件，并且会被频繁的读，采用Apache以及nginx作为web服务器。在web访问量不大的时候，这两个http服务器可以说是非常的迅速和高效，如果负载量很大的时候，我们可以采用在前端搭建cache服务器，将服务器中的静态资源文件缓存到操作系统内存中直接进行读操作，因为直接从内存读取数据的速度要远大于从硬盘读取。这个其实也是增加内存的成本来降低访问磁盘带来的时间消耗。</p><h6 id="4-1-1-2-内存数据库"><a href="#4-1-1-2-内存数据库" class="headerlink" title="4.1.1.2. 内存数据库"></a><strong>4.1.1.2. 内存数据库</strong></h6><p>内存数据库，其实就是将数据放在内存中直接操作的数据库。相对于磁盘，内存的数据读写速度要高出几个数量级，将数据保存在内存中相比从磁盘上访问能够极大地提高应用的性能。内存数据库抛弃了磁盘数据管理的传统方式，基于全部数据都在内存中重新设计了体系结构，并且在数据缓存、快速算法、并行操作方面也进行了相应的改进，所以数据处理速度比传统数据库的数据处理速度要快很多。  </p><p>但是安全性的问题可以说是内存数据库最大的硬伤。因为内存本身有掉电丢失的天然缺陷，因此我们在使用内存数据库的时候，通常需要，提前对内存上的数据采取一些保护机制，比如备份，记录日志，热备或集群，与磁盘数据库同步等方式。  </p><p>对于一些重要性不高但是又想要快速响应用户请求的部分数据可以考虑内存数据库来存储，同时可以定期把数据固化到磁盘。  </p><h6 id="4-1-1-3-RDD"><a href="#4-1-1-3-RDD" class="headerlink" title="4.1.1.3. RDD"></a><strong>4.1.1.3. RDD</strong></h6><p>这里图个新鲜，说说内存换时间在大数据云计算相关领域的一些应用。Spark最近很火，它的核心要数RDD了，RDD最早来源与Berkeley实验室的一篇论文《Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing》。现有的数据流系统对两种应用的处理并不高效：一是迭代式算法，这在图应用和机器学习领域很常见；二是交互式数据挖掘工具。这两种情况下，将数据保存在内存中能够极大地提高性能。这里不详细说RDD了，只是想说程序员一直是觊觎内存的读取速度的。</p><h4 id="4-1-2-使用SSD等"><a href="#4-1-2-使用SSD等" class="headerlink" title="4.1.2.  使用SSD等"></a>4.1.2.  使用SSD等</h4><p>除了对内存方面的优化，还可以对磁盘这边进行优化。跟传统机械硬盘相比，固态硬盘具有快速读写、质量轻、能耗低以及体积小等特点。但是ssd的价格相比传统机械硬盘要贵，有条件的可以使用ssd来代替机械硬盘。</p><h3 id="4-2-数据库优化"><a href="#4-2-数据库优化" class="headerlink" title="4.2.  数据库优化"></a>4.2.  数据库优化</h3><p>大部分的服务器请求最终都是要落到数据库中，随着数据量的增加，数据库的访问速度也会越来越慢。想要提升请求处理速度，必须要对原来的单表进行动刀了。目前主流的Linux服务器使用的数据库要属mysql了，如果我们使用mysql存储的数据单个表的记录达到千万级别的话，查询速度会很慢的。  </p><p>根据业务上合适的规则对数据库进行分区分表，可以有效提高数据库的访问速度，提升服务器的整体性能。  </p><p>另外对于业务上查询请求，在建表的时候可以根据相关需求设置索引等，以提高查询速度。  </p><h3 id="4-3-利用多核优势"><a href="#4-3-利用多核优势" class="headerlink" title="4.3. 利用多核优势"></a>4.3. 利用多核优势</h3><p>现在运行服务器的主流机器配置都是多核CPU的，我们在设计服务器的时候可以利用多核心的特点，采用多进程或者多线程的框架。  </p><p>关于选择多线程还是多进程可以根据实际的需求，结合各自的优缺点进行选择。  </p><p>对于多线程的使用，特别是使用线程池的时候可以通过测试不同线程池服务器的性能来设置合适的线程池。  </p><h3 id="4-4-选择合适的IO模型"><a href="#4-4-选择合适的IO模型" class="headerlink" title="4.4.  选择合适的IO模型"></a>4.4.  选择合适的IO模型</h3><p>《UNIX网络编程卷1:套接字联网API》中有一幅图比较经典。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7TS8Sab5XbCibHdGgb6HvWNASNPhmkGSib0ibFibibEBfcDgTX7GjlmkesOg/0?wx_fmt=gif" alt="image"></p><p>信号驱动：首先开启套接口信号驱动I/O功能,并通过系统调用sigaction安装一个信号处理函数。当数据报准备好被读时，就为该进程生成一个SIGIO信号。随即可以在信号处理程序中调用recvfrom来读数据报，井通知主循环数据已准备好被处理中。也可以通知主循环，让它来读数据报。  </p><p>异步的IO模型：告知内核启动某个操作，并让内核在整个操作完成后(包括将数据从内核拷贝到用户自己的缓冲区)通知我们。  </p><p>这里并不是说一定要用某个模型，epoll也并不是在所有情况下都比select性能要好的，在选择的时候还是要结合业务需求来。  </p><h3 id="4-5-分布式部署程序"><a href="#4-5-分布式部署程序" class="headerlink" title="4.5.  分布式部署程序"></a>4.5.  分布式部署程序</h3><p>当单机服务器已经找不到合适的优化点时，我们可以通过分布式部署来提高服务器的响应能力。优秀的服务器开发都会为自己的服务器的扩容，容灾提出一些解决方案。个人觉得服务器设计的时候简单点比较好，这样后期扩容的时候会很方便。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务器性能测试是一项比较繁琐的事情，作为没有做过性能测试的同学需要事先了解服务器的协议是如何定义的，建立框架管理机器人、统计测试中机器人收到回包的结果以及压测过程中各项性能数据的变化。在完成了测试的过程后，可以从硬件、操作系统以及应用程序等多个方面进行对性能结果进行定位。最后在明确业务需求的前提下，通过存储优化、数据库优化以及分布式部署程序等手段完成服务器的性能优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="测试文档" scheme="http://wysh.site/categories/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="测试文档" scheme="http://wysh.site/tags/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Web安全测试基础一 （一：跨SQL注入，二：跨站脚本攻击，三，命令执行漏洞，四，跨站请求伪造，五，文件上传漏洞，六，文件包含漏洞）</title>
    <link href="http://wysh.site/2017/06/23/Web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://wysh.site/2017/06/23/Web安全测试基础/</id>
    <published>2017-06-23T00:45:34.000Z</published>
    <updated>2018-05-02T13:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Web安全漏洞概念及原理分析"><a href="#一、Web安全漏洞概念及原理分析" class="headerlink" title="一、Web安全漏洞概念及原理分析"></a>一、Web安全漏洞概念及原理分析</h2><h3 id="1-1-跨SQL注入"><a href="#1-1-跨SQL注入" class="headerlink" title="1.1 跨SQL注入"></a>1.1 跨SQL注入</h3><p><strong>概念</strong>：SQL Injection按照字面意思来翻译就是“SQL注射”，常被叫做“SQL注入”，它的含义就是利用某些数据库的外部接口把用户数据插入到实际数据库操作语言当中，从而达到入侵数据库乃至操作系统的目的。SQL注入漏洞形成原因是：用户输入的数据被SQL解释器执行。  </p><p><strong>原理分析：</strong> 假设如下URL存在漏洞  </p><p><a href="http://www.xxx.com/xx.asp?id=666" target="_blank" rel="noopener">http://www.xxx.com/xx.asp?id=666</a>  </p><p><strong>构造数据库原型：</strong>   </p><p>select * from table_name where id=1  </p><p>那么<strong>提交：</strong>    </p><p><a href="http://www.xxx.com/xx.asp?id=666" target="_blank" rel="noopener">http://www.xxx.com/xx.asp?id=666</a> and [查询语句]  </p><p>select * from table_name where username=‘or’=‘or’ And pass=‘or’=’or’  </p><p>这样，如果页面和id=666返回相同的结果，就说明附加查询条件成立，如果不同，就说明不成立。  </p><p><strong>手工判断能否进行SQL注入方法：</strong>    </p><p>第一步先把IE菜单=&gt;工具=&gt;Internet选项=&gt;高级=&gt;显示友好 HTTP 错误信息前面的勾去掉。否则，不论服务器返回什么错误，IE都只显示为HTTP 500服务器错误，不能获得更多的提示信息。  </p><p>简单判定有无漏洞： 粗略型：提交单引号’  </p><p>逻辑型（数字型注入）：and 1=1 / and 1=2  </p><p>逻辑型（字符型注入）：’ and ‘1’=’1 / ‘ and ‘1’=’2  </p><p>逻辑型（搜索型注入）： 关键字%’ and 1=1 and ‘%’=’% / 关键字%’ and 1=2 and ‘%’=’%  </p><p>危害：获取数据库信息，脱裤，获取服务器权限，植入webshell，获取服务器后门，读取服务器敏感文件等。  </p><p><strong>示例：</strong>  </p><p>如下，user id查询框中输入1，则正常显示结果如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNeuFYQXMXyPZGvMicnNsAS6sqjRALlkofaGJuHwcIvYFJicGiaEIHXgblHeru3dKCjy9Z91mL6WFicPQ/0?wx_fmt=png" alt="image">  </p><p>但是，当user id查询框中输入1’时，则显示输出如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNeuFYQXMXyPZGvMicnNsAS6mKCEthLiaribe6OIhf3qoz9theKIQwz7bk5e8ztMqCSS5QVyAOuqw8Xw/0?wx_fmt=png" alt="image">  </p><p>则该处存在sql注入漏洞。  </p><p>目前流行的注入工具有：<strong>SQLMap、Pangolin（穿山甲）、Havij</strong>等。  </p><h3 id="1-2-跨站脚本攻击（XSS）"><a href="#1-2-跨站脚本攻击（XSS）" class="headerlink" title="1.2 跨站脚本攻击（XSS）"></a>1.2 跨站脚本攻击（XSS）</h3><p><strong>概念：</strong> 通常指黑客通过“HTML注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，实现控制用户浏览器行为的一种攻击方式。  </p><p><strong>全称：</strong> Cross Site Script（本来缩写是CSS，但是为了和层叠样式表CSS有所区别，所以在安全领域叫做“XSS”）  </p><p><strong>危害：</strong> 盗取用户信息、篡改页面钓鱼、制造蠕虫等。  </p><p><strong>XSS分类：</strong> 存储型、反射型、DOM型  </p><blockquote><p><strong>反射型XSS</strong>  </p></blockquote><p>反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功  </p><p>如下，查询name信息，正常用户请求：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaead33ibWaTOG4ZKKHX5HoaWQY7yUia6UuVptaPQfyMTWAgQmC7eVRRVG6gA/0?wx_fmt=png" alt="image">  </p><p>如果那name参数1修改成，则显示结果：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadIQLibZ8H6uRHP7JDR8DUDYzuCniabe63LrZ1ouOGdqSsUQvNT8ib657tA/0?wx_fmt=png" alt="image">  </p><p><strong>存储型XSS</strong>  </p><p>如下，正常留言或者评论，显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadCQNziaPT5nzvnCQGYZDswzibPY7UadP0nEwp6sibTiavnlTvDUpmJE99uw/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadGOG9siaQzy5JCVRz3V9re9mqV5g5uMOXTOVibOUt4eDIaRicMIOzbsWMA/0?wx_fmt=png" alt="image">  </p><p>如果将message信息写成，则显示  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadw5pbD7KgK55aiaAJ8c1NGVLtXExNG0Q7vBqR8Wmo0EjyqPuPOBpIwUg/0?wx_fmt=png" alt="image">  </p><p><strong>DOM XSS</strong>  </p><p>基于DOM型的XSS是不需要与服务器端交互的，它只发生在客户端处理数据阶段。  </p><p>下面一段经典的DOM型XSS示例。  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeaduIQO5JiclvGq4CdTgfXHtk7NgIlbnSb3SLFogr1cianaM1mRfqmPrlCA/0?wx_fmt=png" alt="image">  </p><p>上述代码的意思是获取URL中content参数的值，并且输出，如果输入<a href="http://www.xxx.com/dom.html?content=，就会产生XSS漏洞。" target="_blank" rel="noopener">http://www.xxx.com/dom.html?content=，就会产生XSS漏洞。</a>  </p><p>各种类型原理分析  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadEX3QXTFyGKfRKjjtMN5RsYVSmQp0wauxYsHwOJbfv6R3BVggYL6LIw/0?wx_fmt=png" alt="image">  </p><h3 id="1-3-命令执行漏洞"><a href="#1-3-命令执行漏洞" class="headerlink" title="1.3 命令执行漏洞"></a>1.3 命令执行漏洞</h3><p><strong>漏洞产生原因:</strong> 程序中因为某些功能需要执行系统命令，并通过网页传递参数到 后台执行。然而最根本的原因是没有对输入框的内容做代码过滤，正常情况下输入框只能接收指定类型的数据。  </p><p><strong>漏洞影响:</strong>  命令注入漏洞可以使攻击者在受攻击的服务器上执行任意的系统命令。  </p><p><strong>示例:</strong>  </p><p>正常情况下，在 ip 地址输入框中输入 127.0.0.1，结果如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTZGRcw9F10xORucTMNQTYVibatNznw2hf7N0eyjeN82aqTv54f7mOjtw/0?wx_fmt=png" alt="image">  </p><p>但是，当我们输入 127.0.0.1&amp;&net; user 时，输出结果如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dT1wNHsejdz6Bbtd7pUic6fntrZOIsC71rUIfz7iaAFNcf4VeuQAw5ibsPQ/0?wx_fmt=png" alt="image">  </p><p>结果显示不仅仅执行了 ping 127.0.0.1 操作，而且也执行了 net user 命令，我们可 以把 net user 换成其他任意命令进行攻击。  </p><h3 id="1-4-跨站请求伪造-CSRF"><a href="#1-4-跨站请求伪造-CSRF" class="headerlink" title="1.4 跨站请求伪造(CSRF)"></a>1.4 跨站请求伪造(CSRF)</h3><p><strong>概念:</strong> Cross-Site request forgery，利用用户已登录的身份，在用户毫不知情的情 况下，以用户的名义完成非法操作。  </p><p>CSRF 攻击迫使终端用户在通过验证后 web 应用中执行不必要的操作。在社会工 程帮助下(如通过电子邮件/聊天发送的链接)，攻击者可能会迫使 Web 应用程序 用户执行攻击者所选择的行动。  </p><p><strong>危害:</strong> 执行恶意操作(“被转账”、“被发表垃圾评论”等)、制造蠕虫等 漏洞影响:当一个成功的 CSRF 漏洞的目标是普通用户时，它能够危害终端用户 的数据操作。但如果最终的目标用户是管理员账户，一个 CERF 攻击可以损害整 个 Web 应用程序。  </p><p><strong>示例:</strong>  </p><p>如下，正常修改密码页面，New password 输入 test，Confirm new password 输入 test，然后提交，密码修改成功。   </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTmz78um8aVZvV3sfp0jQUziciacB3oN6VibU3wSW87tBfYAAnG7ViapZEiaw/0?wx_fmt=png" alt="image">  </p><p>我们发现，这个修改密码的请求为 “ <a href="http://10.4.70.188/DVWA-1.9/vulnerabilities/csrf/?password_new=test&password;" target="_blank" rel="noopener">http://10.4.70.188/DVWA-1.9/vulnerabilities/csrf/?password_new=test&password;</a>_ conf=test&Change;=Change ”， 此 时 ， 我 们 打 开 新 的 窗 口 ， 修 改 password_new=password 和 password_conf=password，访问显示如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTEsajjB72Ns0ubsFL1icX4HxUKVAbQ7vLvg30ygt5SYyfYR5cM1SoIlw/0?wx_fmt=png" alt="image">  </p><p>此时，密码已经被修改成功，如果该 URL 被黑客通过电子邮件或其他途径精心 伪造，诱惑你触发点击，则可直接修改当前用户配置，后果不堪设想。  </p><h3 id="1-5-文件上传漏洞"><a href="#1-5-文件上传漏洞" class="headerlink" title="1.5 文件上传漏洞"></a>1.5 文件上传漏洞</h3><p>文件上传漏洞，是指用户上传了一个可执行的脚本文件，并通过此脚本文件获取了执行服务器端命令的能力。这种攻击方式是最为直接和有效的，有时候几乎没有什么技术门槛。  </p><p>如下，选择正常的图片文件test.jpg上传，上传成功后显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSiaTyibL3CcodZxlabpYicg4pBu6CbmjPGYFvslrpuodyy2DfBWXq9fghQ/0?wx_fmt=png" alt="image">  </p><p>我们根据显示的路径信息，推测上传图片的地址为“<a href="http://10.4.70.188/DVWA-1.9/hackable/uploads/test.jpg”，在浏览器中打开：" target="_blank" rel="noopener">http://10.4.70.188/DVWA-1.9/hackable/uploads/test.jpg”，在浏览器中打开：</a>  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSfo1IwEia6WhxdCZ9cwZD5fnN2obnMGuHQnDwoU2DPBJyef9yZLwAzAQ/0?wx_fmt=png" alt="image">  </p><p>那么，我们写一个文件phpinfo.ini，内容为，上传成功后，我们访问该文件显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSic81UkEE5gL2bdUeFJPtpnyZebAibvEDBia61jZe2yT2ibgSHlgibdOxbGg/0?wx_fmt=png" alt="image">  </p><p>如果我们编辑一句话shell：” “为cmd.php文件，上传成功后访问文件url并且传参cmd=phpinfo()，查看结果如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSjibvswpiaqmC7RUE4RCiakml8tAyI8MYRLQBJ4hbJZMpksmIfnl2CyQQA/0?wx_fmt=png" alt="image">  </p><p>我们修改cmd参数为任意命令，如cmd= system(‘dir’); ，显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSJBfU82pYNGCMKOUqzRbcL2xVaDtiaOKFOBq7tnpHd15XhDMPRBfNHFw/0?wx_fmt=png" alt="image">  </p><p>一旦被黑客利用，后果不堪设想。  </p><h3 id="1-6-文件包含漏洞"><a href="#1-6-文件包含漏洞" class="headerlink" title="1.6 文件包含漏洞"></a>1.6 文件包含漏洞</h3><p>如下页面，点击file1、file2、file3，页面地址都会随之变化为  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarNC2CELvmwtTTX2Muk7dFhx85sYabX7HricrrHFK14T6r7YA0sJr74bQ/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiaricpOlozTPkUv86wjBpW7yNAHx6cicVYMNbsCYNujgdYXm6iaOoJl0KClw/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarp9Bj02HHsys7uEdq6hnJlENshtTJFELMFJ190ZwOvb8SXPLTzdG8Cg/0?wx_fmt=png" alt="image">  </p><p>由此，page参数就是我们可以利用的地方，我们修改page参数为随意字段，如abc.php访问，则显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarkFcpCOmg3jo1CuoG2rFKSb3lYOstBJmGA7HOjeiaVjCZWRkzcnl2CibQ/0?wx_fmt=png" alt="image">  </p><p>报错信息中，我们获取到文件的物理路径，可以利用该漏洞读取本地文件，如读取dvwa目录下的php.ini文件，将文件路径进行如下修改：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarM7OKmOjZK2LmK6epwer4U8DibaoEKItsIl5f54DO1TkWcwOgiaricYeSQ/0?wx_fmt=png" alt="image">  </p><p>也就是page参数为”../../php.info”，访问显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarHHEbN4Ywu3Q3I1iadzsR4WCJF6Da5C4tmEVUv7kHIZbHbKL7LBAMSog/0?wx_fmt=png" alt="image">  </p><p>成功读取服务端文件信息，当然，攻击者肯定不满足读取本地文件，攻击者可以修改成可执行php代码进行攻击。  </p><h3 id="1-7-点击劫持（ClickJacking）"><a href="#1-7-点击劫持（ClickJacking）" class="headerlink" title="1.7 点击劫持（ClickJacking）"></a>1.7 点击劫持（ClickJacking）</h3><p>点击劫持是一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的iframe，覆盖在一个网页上，然后诱使用户在该网页上进行操作，此时用户将在不知情的情况下点击透明的iframe页面。通过调整iframe页面的位置，可以诱使用户恰好点击在iframe页面的一些功能性按钮上。也就是通过覆盖不可见的框架误导受害者点击而造成的攻击行为。   </p><p>隐蔽性高，骗取用户操作，也称UI-覆盖攻击，是利用iframe或者其他标签的属性，如flash也可以。  </p><h3 id="1-8-URL跳转漏洞与钓鱼"><a href="#1-8-URL跳转漏洞与钓鱼" class="headerlink" title="1.8 URL跳转漏洞与钓鱼"></a>1.8 URL跳转漏洞与钓鱼</h3><p>借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十二:Bug管理规范）</title>
    <link href="http://wysh.site/2016/11/23/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81%E4%BA%8CBug%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <id>http://wysh.site/2016/11/23/产品测试规范十二Bug管理规范/</id>
    <published>2016-11-23T00:34:34.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-11-Bug管理规范"><a href="#1-11-Bug管理规范" class="headerlink" title="1.11 Bug管理规范"></a>1.11 Bug管理规范</h2><h3 id="1-11-1-bug提交规范"><a href="#1-11-1-bug提交规范" class="headerlink" title="1.11.1 bug提交规范"></a>1.11.1 bug提交规范</h3><p>Bug的报告要求描述内容清晰、简介、易懂，让用根据简要描述就可以大致了解问题所在：  </p><p><strong>缺陷ID</strong>  </p><p>BUG的唯一标识，由BUG管理工具自动生成。  </p><p><strong>项目名称</strong>  </p><p>每个要测试的软件项目都有唯一的名称。  </p><p><strong>问题类型（严重程度）</strong>  </p><p>BUG所属的类型（即严重程度），包括致命问题、严重问题、一般  问题、优化建议等。缺陷标题简明的对BUG进行概要描述。  </p><p><strong>缺陷标题</strong>  </p><p>简明的对BUG进行概要描述。  </p><p><strong>优先级</strong>  </p><p>BUG解决的优先级。  </p><p><strong>所属模块</strong>  </p><p>项目的各个组成模块。  </p><p><strong>测试版本</strong>  </p><p>提交BUG时，一定要正确填写产生BUG的软件版本号。  </p><p><strong>分派人</strong>  </p><p>BUG需要指派处理的人员，如果不清楚统一给项目负责人。  </p><p><strong>报告人</strong>  </p><p>报告BUG的人员。  </p><p><strong>测试环境</strong>  </p><p>可根据实际描述当前测试的软硬件环境，以作为参考。</p><p><strong>详细描述</strong>  </p><p>在详细描述中，可对BUG产生的前提条件、操作的步骤、实际结 果、预期结果等进行描述。</p><p><strong>文字注释与附图</strong>  </p><p>在提交BUG时，可上传必要的附图，便于确认错误的表现形式和 错误位置等。  </p><p>在提交BUG时，提交人可根据提交BUG的紧急程度，选择对应的“优先级”，同时建议开发人员在处理BUG的时候能够根据优先级进行处理，优先级别较高的可以最先进行处理。  </p><p>在BUG详细描述中，可在从BUG产生的前提条件、操作的步骤、实际结果、预期结果等方面进行描述：  </p><ol><li><p>前提条件：有些BUG的产生是需要在一定条件下才会出现，例如浏览器、分辨率、Office版本等，所以就要求在描述时描述清楚前提条件；  </p></li><li><p>BUG的操作步骤：详细的、有次序的、每一步的操作步骤，包括输入的数据，尽可能的重新操作的步骤；</p></li><li><p>实际结果：指的我按照以上的操作步骤，最后得出的结果是什么， 例如我点击“增加”按钮后出现白页，这就是实际结果；</p></li><li><p>预期结果：指的我按照以上的操作步骤，我想要得到的结果是什么，例如我点击“增加”按钮想要得到的预期结果是提示我“增加成功”提示；</p></li><li><p>图文描述：在必要的情况下可上传截图并注释文字，这样更便于确认错误的表现形式和错误位置等。</p></li></ol><p>一般情况下，开发人员在提交BUG时，“分派人”可指定对应的处理人员，如果无法确定“分派人”，可分派给项目的负责人，然后由项目负责人进行二次分派给对应的开发人员进行处理。在分派时可以添加一些对应的批注信息。</p><h3 id="1-1-2-bug级别定义"><a href="#1-1-2-bug级别定义" class="headerlink" title="1.1.2 bug级别定义"></a>1.1.2 bug级别定义</h3><p>具体的优先级别有以下几种   </p><p><strong>1</strong>  </p><p><strong>致命问题(一级bug)</strong>  </p><p>致命问题：不能完全满足系统正常的功能操作要求，系统停止运行，系统的重要部件无法运行，系统崩溃或挂起等导致系统不能继续运行。  </p><ol><li><p>常规操作下因程序问题导致系统崩溃，迫使整个系统无法使用（其中非程序问题有：系统配置、数据结构变动、session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。  </p></li><li><p>常规操作下因程序问题导致程序重启、死机或非法退出。</p></li><li><p>常规操作下系统出现死循环。</p></li><li><p>数据丢失或异常。</p></li><li><p>模块间数据传递及取值错误（如：输入A，预期结果应该是B，但实际结果不是B等）。</p></li><li><p>流程输出错误（包括业务流程和事件流程。如：输入流程A，但实际流程处理中未能按A流程处理数据；点击某按钮，应跳转增加页面，结果跳转成修改页面等）。</p></li><li><p>按照需求文档，功能未在程序中体现出来，即系统无此功能（据项目经理及相关负责人确认此功能必须具备的）；功能不符合用户需求，功能实现不正确（由项目经理及相关负责人确认此功能必须具备的）。</p></li></ol><p><strong>2</strong>  </p><p><strong>严重问题(二级bug)</strong>  </p><p> 严重问题：严重地影响系统要求或基本功能的实现，且没有更正办法（重新安装或重新启动该软件不属于更正办法）。使系统不稳定、或破坏数据、或产生错误结果，或部分功能无法执行，而且是常规操作中经常发生或非常规操作中不可避免（不能用其他操作修复问题）的主要问题，系统无法满足主要的业务要求，性能、功能或可用性严重降低。  </p><ol><li><p>数据计算错误。</p></li><li><p>因程序问题迫使正在操作的流程无法继续且无其他操作可以修复问题的（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>常规操作下功能异常，如：结果与实际查询条件不一致、页面按钮点击没反应等。</p></li><li><p>功能项的某些项目（可为所有控件）使用无效（对系统非致命的）。</p></li><li><p>因程序问题迫使正在操作的流程无法继续且有其他操作可以修复问题的（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>多余功能，且该功能影响了程序的正常使用（需项目经理及相关负责人确认），如客户名称录入项需要录入汉字和英文，但程序限制了只能输入汉字等。</p></li><li><p>常规操作下，程序打印、导出的内容错误。</p></li><li><p>在程序安装配置无误的情况下相关功能js报错，且该功能影响业务流的正常进行。</p></li><li><p>在1024*768分辨率下，页面严重变形，使数据无法浏览。</p></li><li><p>在Session超时，无友情页面提示</p></li></ol><p><strong>3</strong>  </p><p><strong>中级问题（三级bug）</strong>  </p><p>系统可以满足业务要求，系统性能或响应时间变慢、产生错误的中间结果但不影响最终结果等影响有限的问题，另外，还包括系统健壮性方面的测试。</p><ol><li><p>对于一些重要数据的操作、重要环节的变动且相关的操作和变动不可挽回时，系统应给出相应的操作确认提示，防止误操作，如数据删除、审批等。</p></li><li><p>常规操作下页面跳转至错误友情提示页面，且操作其他模块，程序可正常运行（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录）。</p></li><li><p>功能实现不完整，如删除时没有考虑数据关联。</p></li><li><p>因错误操作且因程序问题导致系统崩溃，迫使整个系统无法使用（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>数据添加、修改、查看界面中控件没有一一对应或对应控件长度、格式、验证性提示信息内容等不一致，但又不影响程序功能的进一步的操作（最终以需求规格说明书中内容规定为准）。</p></li><li><p>响应时间较慢。（不可超过1分钟）</p></li><li><p>功能性建议。</p></li><li><p>操作界面错误（包括数据窗口内列名定义、含义是否一致）。</p></li><li><p>简单的输入限制未放在前台进行控制。</p></li><li><p>虽然正确性不受影响，但系统性能和响应时间受到影响。</p></li><li><p>常规操作下，程序显示、打印、导出的内容格式错误，如页面变形、金额类数据未加货币符号等。</p></li><li><p>在程序安装配置无误的情况下相关功能js报错，且该功能不影响业务流的正常进行。</p></li><li><p>页面验证提示信息位置或内容错误，如空值验证对应位置或内容错误、提示对话框内容错误等（最终以需求规格说明书中内容规定为准）。</p></li><li><p>在1024*768分辨率下，页面变形，但不影响数据的浏览。</p></li><li><p>输入超长数据或特殊字符导致程序报黄页或跳转到友情提示页面等影响程序进一步的操作（需跳转友情页面）。</p></li><li><p>在Session超时（需友情页面）、网络中断时，出现浏览器卡死、报黄页等异常情况，且没有对应的错误捕获机制并给出友情提示。</p></li><li><p>滚动条无效，但不影响数据的显示与浏览。</p></li><li><p>界面不规范，页面表现形式、样式与其他类似功能模块不一致，且差异明显的。</p></li><li><p>必填项与非必填项应加以区别。</p></li></ol><p><strong>4</strong>  </p><p><strong>轻微问题</strong>  </p><p>轻微问题：使操作者不方便或遇到麻烦，但它不影响执行工作功能或重要功能。界面拼写错误或用户使用不方便等小问题或需要完善的问题。  </p><ol><li><p>页面表现建议。</p></li><li><p>功能操作建议。</p></li><li><p>非程序代码导致黄页（如：手动删除、修改、增加数据库中的数据；缺少相应的系统配置；项目缺少目录或文件、因不明操作导致数据库中数据不符合正常逻辑关系）。</p></li><li><p>辅助说明字体大小、颜色明显与页面整体表现形式不协调或者文字描述不清楚。</p></li><li><p>长时间操作未给用户提示（不可超过1分钟），但程序一直在正常运行的，没有出现卡死等情况，如给出旋转的loading图标或程序后台操作进度条或显示进度百分比等。</p></li><li><p>提示窗口文字未采用行业术语。</p></li><li><p>可输入区域和只读区域没有明显的区分标志，如只读区域置灰显示等。</p></li><li><p>键盘支持不好，如在可输入多行的字段中不支持回车换行，输入查询条件后不支持回车触发查询。</p></li><li><p>界面不能及时刷新，如需要重新执行查询或加载页面等（最终以需求规格说明书中内容为准）。</p></li></ol><p>以上就是产品的测试规范，囊括了从需求到测试计划、测试准备、测试执行、结果分析、上线准备、跟踪测试到项目总结的整个流程，规范了产品测试流程。</p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防    </p><p>1.10.2 app常见产品问题及预防</p><p>[TOC]  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十一:Bug预防体系）</title>
    <link href="http://wysh.site/2016/11/07/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81%E4%B8%80Bug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/11/07/产品测试规范十一Bug预防体系/</id>
    <published>2016-11-07T11:23:38.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-10-2-app常见产品问题及预防"><a href="#1-10-2-app常见产品问题及预防" class="headerlink" title="1.10.2 app常见产品问题及预防"></a>1.10.2 app常见产品问题及预防</h3><p><strong>11</strong>  </p><p><strong>网络机制(2)</strong>  </p><p>a：未加载完图片时切换到相似tab，切回不再加载图片；  </p><p>b：进入一个tab，该页面已经加载完成，选择点击某个详细信息页面返回时，页面会闪一下。  </p><p><strong>预防方法：</strong>  </p><p>a：一个页面有多个tab页时，用户切换tab可不轻易取消线程，取而代之使用暂停线程，退出页面时才回收清除；  </p><p>b：启动负载分摊机制的请求，可先保存请求地址，供返回时判断避免重复加载。  </p><p><strong>12</strong>  </p><p><strong>网络机制(3)</strong>  </p><p>a：iOS弱网络下获取不到配置，导致启动卡死；  </p><p>b：sim卡未激活，无移动网络，某些功能卡死；  </p><p>c：断网下启动，登录状态丢失，某些功能信息未正确显示。  </p><p><strong>预防方法：</strong>  </p><p>a：启动逻辑中的网络类请求不能阻塞UI主线程，即网络请求数据可不即时响应（可在下次启动时生效）；  </p><p>b：按钮的点击事件不跟接口关联，做成异步处理不管是否有返回，都可以正常进行点击操作；  </p><p>c：离线操作类，不因与当前网络状态有影响。  </p><p><strong>13</strong>  </p><p><strong>下载空间有效性判断</strong>  </p><p>a：空间不足时，无法保存信息时，没有提示和提前判断；  </p><p>b：本地存储空间不足时，保存文件时没有相应提示；  </p><p>c：空间不足时，文件下载不成功，导致重复不停下载，浪费用户流量。  </p><p><strong>预防方法：</strong>   </p><p>a：对磁盘剩余空间的判断和自动清理逻辑可以做统一封装，提供各不同下载业务使用  </p><p>b：可结合系统硬件配置的10%作为有效剩余空间阀值；  </p><p>c：针对手机内外置SDCard，可以在空间不足情况下做分区切换机制。  </p><p><strong>14</strong>  </p><p><strong>下载文件完整性判断(1)</strong>  </p><p>a：换肤图片未下载完，就触发换肤操作，导致换肤效果错误；  </p><p>b：图片无法下载完全，导致图片展示不完整；  </p><p>c：文件下载完成后，由于网络错误与源文件不符，导致下载后无法播放；  </p><p>d：上传文件功能，目标物理文件不存在（界面缺显示存在），导致传送文件页面一直处于等待中。  </p><p><strong>预防方法：</strong>  </p><p>a：通过判断下载前后文件的size或者文件内容签名，确保下载文件完整后再触发文件使用相关的逻辑；  </p><p>b：文件传输时检查文件是否存在，若不存在则视为传输失败，不阻塞后续传输。  </p><p><strong>15</strong>  </p><p><strong>阻断连续操作</strong>  </p><p>a：连续快速切换界面，或者频繁触发某些功能操作，导致程序卡死；  </p><p>b：连续多次点击同一张图片，导致该图片下载错误。  </p><p><strong>预防方法：</strong>  </p><p>a：使用间隔响应、延迟响应的方式，达到多次相同操作只的触发一次有效逻辑。  </p><p>b：操作一次后，可将按钮等元素设定为禁用状态，防止用户多次点击和请求。  </p><p><strong>16</strong>  </p><p><strong>有效统计逻辑</strong>  </p><p>a：操作页面某些元素，也会导致发送页面使用的统计信息。  </p><p><strong>预防方法：</strong>   </p><p>a：为确保统计数据上传的有效性，只针对真正展示的界面做上报统计，对于展示不完整、非针对性展示不做统计上报。  </p><p><strong>17</strong>  </p><p><strong>程序健壮性判断(1)</strong>  </p><p>a：分享到新浪微博（手机未装新浪微博客户端） ,app崩溃；  </p><p>b：后台接口变更（返回值和类型发生变化），客户端不兼容新格式判断，抛出崩溃异常；  </p><p>c：搜索默认操作崩溃；  </p><p>d：使用外部第三方数据，出现空数据或者非标准格式，则app崩溃  </p><p>e：输入框没有限制字符长度，保存时导致溢出崩溃。  </p><p><strong>预防方法：</strong>   </p><p>a：客户端针对接口返回需做容错处理，如返回为空、返回数据类型不一致；  </p><p>b：任何文本框类型的需要限制输入长度。  </p><p><strong>18</strong>  </p><p><strong>程序健壮性判断(2)</strong>  </p><p>a：某些功能的初始化逻辑没有加入启动逻辑，导致功能使用失败；  </p><p>b：退出重启app，无法自动登录。 </p><p><strong>预防方法:</strong>  </p><p>a：制定启动加载逻辑规范；  </p><p>b：对于重要的业务建议加入启动逻辑，并在业务实际使用时再根据状态多一层判断和加载；  </p><p>c：产品人员需要考虑是否需要保存自动登录功能，并明确告之开发和测试人员。  </p><p><strong>19</strong></p><p><strong>安全机制</strong>  </p><p>a：在URL中不要带有明文的用户信息写代码的时候，不要把密码等敏感的用户信息明文的显示在url中；  </p><p>b：即使要传递密码参数也不要使用pwd、passpord这样的参数名称来进行传递，防止被截获；  </p><p>c：要在传递参数的操作中使用NoCache参数，防止将url参数进行缓存。  </p><p><strong>预防方法：</strong>  </p><p>a：建立标准的数据传输和命名规范，并制作一些网页开发模板或者规范供参考。  </p><p><strong>20</strong>  </p><p><strong>日志调试管理</strong>  </p><p>a：上线以后，调试日志没有关闭，影响程序性能。  </p><p><strong>预防方法：</strong>  </p><p>a：日志统一开关，编译正式包需要关闭；  </p><p>b：再程序界面有入口可以检查是否关闭，方便及时校验；  </p><p>c：方便定位问题，可以做日志动态开启的隐藏开关；  </p><p>d：方便收集问题，可以对问题类型做上报处理（典型如崩溃日志上报）。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>[TOC]  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十:Bug预防体系）</title>
    <link href="http://wysh.site/2016/11/07/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81Bug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/11/07/产品测试规范十Bug预防体系/</id>
    <published>2016-11-07T11:23:38.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-10-2-app常见产品问题及预防"><a href="#1-10-2-app常见产品问题及预防" class="headerlink" title="1.10.2 app常见产品问题及预防"></a>1.10.2 app常见产品问题及预防</h3><p><strong>01</strong>  </p><p><strong>界面适配</strong>  </p><p>a：手机分辨率为1920x7080的高分辨率手机，在调整手机字体大小时，会导致页面显示出现变形；  </p><p>b：因用户设置的特殊字体导致列表的字母条不显示；  </p><p>c：某些 banner 图片在部分机型只能显示一半。  </p><p><strong>预防方法：</strong>  </p><p>a：文字或者图片需要适配不同分辨率的机型时，建议使用dp方式进行开发，即使是使用dp,也需要考虑特殊分辨率的机型显示；  </p><p>b：适应宽度/适应高度/高宽均适应的；  </p><p>c：针对程序需求，设定合适的适配机制。  </p><p><strong>02</strong>  </p><p><strong>系统适配</strong>  </p><p>a：调用高版本API，导致某些机型进入主页显示空白页面。   </p><p><strong>预防方法：</strong>  </p><p>a：调用高版本API，需要考虑兼容性，开发团队需要制定程序API调用规范。  </p><p><strong>03</strong>  </p><p><strong>交互适配（1）</strong>  </p><p>a：在输入框操作时，调出系统输入法软键盘后，没有有效启用键盘上的 “下一项”、“确定”、“搜索”等按键；  </p><p>b：系统软键盘，在关闭当前页面时没有及时收起软键盘。  </p><p><strong>预防方法：</strong>  </p><p>a：需求设计过程中需要考虑输入法操作键的使用细节，确保所有软键盘的输入键可使用；  </p><p>b：设计规范：程序/页面设计针对输入法操作键的使用制定规范  </p><p><strong>04</strong>  </p><p><strong>交互适配（2）</strong>  </p><p>a：APP界面的“返回”操作与手机系统的“返回”按键操作效果不一致；或界面未提供“返回”，在无系统“返回”按键的手机上，无法返回。  </p><p><strong>预防方法：</strong>   </p><p>a：设计规范：程序设计针对手机返回键制定使用规范；  </p><p>b：在设计中要综合界面需求设定是否提供 “返回”操作。  </p><p><strong>05</strong>  </p><p><strong>界面风格</strong>  </p><p>a：对话框标点、英文字符出现全角、半角的不统一；  </p><p>b：对话框、提示浮动框提示语风格不同，显示位置均不同，产品友好度下降；  </p><p>c：字体和字号要在app中是不同的风格。  </p><p><strong>预防方法：-语言文字提示规范</strong>  </p><p>a：全角字符和半角字符都要使用一个空格分开；  </p><p>b：英文和数字之间要有空格分开；  </p><p>c：汉字和英文、数字要有空格分开；  </p><p>d：带有汉字的话要使用全角字符；  </p><p>e：语言中不要混用全角和半角标点；  </p><p>f：字体和字号要保持统一的风格。  </p><p><strong>06</strong>  </p><p><strong>性能优化(1)</strong>  </p><p>a：进入一些列表，若数量较多则会出现卡死:；  </p><p>b：界面显示对象数量较多，某些会导致页面操作卡顿，用户体验很差；  </p><p>c：处理大量数据时，用户等待时间过长，无进度条提示进度。  </p><p><strong>预防方法： </strong>  </p><p>a：程序对耗时较多的操作逻辑、判断逻辑，不放入UI主线程；  </p><p>b：对数据库记录较多的操作，可以改成数据库批量操作，或者 调用批量接口；c：程序在后台处理用户的输入，则提供进度条或对话框。  </p><p><strong>07</strong>  </p><p><strong>性能优化(2)</strong>  </p><p>a：后台播放内存泄露；  </p><p>b：程序后台运行的时候，手机一直处于占用CPU的运行状态；  </p><p>c：页面中的动态效果（如：马灯滚动）次数无限制，导致界面不断刷新消耗资源。  </p><p><strong>预防方法： </strong>  </p><p>a：使用静态分析工具或代码检查方式检查内容的分配和释放；  </p><p>b：WakeLock机制是防回收技术，当没有播放、下载等操作时，应该主动关闭后台的唤醒锁，减少耗电。当再次需要使用播放、下载功能时才去开启唤醒；  </p><p>c：对刷新消耗资源类操作，要有次数限制。  </p><p><strong>08</strong>  </p><p><strong>多服务、多进程</strong></p><p>a：某些功能操作后， app 无法连接网络；  </p><p>b：进程被杀死后重启，通知栏中显示的信息不正确，没有显示正确的信息；  </p><p>c：app未启动，通过其他第三方app的调用入口调用app,无法正常使用某些功能；  </p><p>d：服务停止后，无法被启动；  </p><p>f：程序被手动退出后，进程仍然在后台存在。  </p><p><strong>预防方法： </strong>  </p><p>a：重新初始化时获取值时读取到空值，因此赋予一个默认值；  </p><p>b：服务重启被回收重启时，初始化对象时要判断当前是否已存在，若存在则复用并更新内容  </p><p>c：任务独立，需要创建不同的服务，生命周期不会互相影响，服务独立可以避免某个服务结束会影响到其他功能的正常使用。  </p><p>总体，对有启用多服务、多进程的程序，有需要做好服务、进程的一致性管理。  </p><p><strong>09</strong>  </p><p><strong>外部调用</strong>  </p><p>a：某些机型启动app之后一直在调用某些外部服务（通过后台服务可以看到其他服务进程，退出app后，有些服务进程消失）  </p><p>b：某些功能模块被扫描成存在木马病毒；  </p><p>c：安全管家告警程序获取绝密权限（通讯录权限）。  </p><p><strong>预防方法：</strong>   </p><p>a：调用第三方功能作为统计或者监控作用时，需要考虑该sdk是否会一直唤醒app导致耗电或者程序无法真正关闭问题；  </p><p>b：调用外部第三方SDK，要考虑被安全工具（上次有广告被扫描到病毒）扫描的设计需求；  </p><p>c：及时关闭不需要的服务进程，在能满足需求的情况下，尽量减少使用敏感的系统权限。  </p><p><strong>10</strong>  </p><p><strong>网络机制(1)</strong>  </p><p>a：网络重试操作机制不统一，导致页面超时体验风格不统一；  </p><p>b：某些应用页面，访问响应慢。   </p><p><strong>预防方法： </strong>  </p><p>a：对底层网络重试机制做统一封装后，供上层调用；   </p><p>b：固定好每次重试间隔（建议10s重试）和重试总次数（建议3次）；   </p><p>c：为使页面提示可以区分网络层与业务解析层不同错误，需对不同错误类型做分类的异常处理，并提示用户原因或让用户重试；  </p><p>d：对多个网络请求的界面，网络接口并行请求有利于提高响应速度。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>[TOC]  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（九: Bug预防体系）</title>
    <link href="http://wysh.site/2016/10/28/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B9%9DBug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/10/28/产品测试规范九Bug预防体系/</id>
    <published>2016-10-28T08:23:52.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-10-1-web常见产品问题及预防"><a href="#1-10-1-web常见产品问题及预防" class="headerlink" title="1.10.1 web常见产品问题及预防"></a>1.10.1 web常见产品问题及预防</h3><p><strong>11</strong>  </p><p><strong>多个ie同时访问</strong>  </p><p> 用户可能打开不同的IE使用相同的用户登录后进行操作，程序处理的时候要考虑到数据的一致性和同步问题  </p><p> 多个IE使用不同用户，则cookie操作不会出现用户信息混乱的问题  </p><p><strong>预防方法：</strong></p><p> 开发：提前考虑到多个IE操作和多用户操作的使用场景，在使用cookie本地信息时需要做好针对性的程序处理，依据以往出现的问题设计开发规范  </p><p> 测试：按照多浏览器和多用户的使用情况，进行更多场景的测试  </p><p><strong>12</strong>  </p><p><strong>安全考虑</strong>  </p><p> 在URL中不要带有明文的用户信息写代码的时候，不要把密码等敏感的用户信息明文的显示在url中  </p><p>  即使要传递密码参数也不要使用pwd、passpord这样的参数名称来进行传递，防止被截获  </p><p> 要在传递参数的操作中使用NoCache参数，防止将url参数进行缓存  </p><p><strong>预防方法：</strong>  </p><p> 开发： 建立数据传输技术规范和参数命名规范标准，严格参照执行，防止信息被拦截，造成应用系统的信息泄露  </p><p> 测试：在缓存目录验证缓存信息是否有敏感信息，通过抓包方式验证是否暴露了敏感信息  </p><p><strong>13</strong>   </p><p><strong>直接URL链接检查</strong>  </p><p>在Web系统中，匿名在地址栏直接输入各个功能页面的URL地址，检查系统是否处理了权限控制  </p><p><strong>预防方法：</strong>  </p><p> 开发：代码走查的方式确认所有页面的具有权限验证逻辑  </p><p> 测试：获取所有系统url，在非登录情况下进行遍历截图，或关键字判断，验证非登录状态下无法访问具有访问权限限定的  </p><p><strong>14</strong>  </p><p><strong>防止sql注入和跨站攻击</strong>  </p><p> 不要把数据库或者程序的任何报错信息显示在页面上。  </p><p> 数据库中设计到操作权限的表名和字段名不要使用过于通俗易懂的命名，尤其是用户和密码之类的信息，禁止使用明文存储密码  </p><p> 页面回显的input text, input hidden中的文本内容需过滤 “ &lt;、 &gt;、 ”、 ’等字符（半角转换为全角或者删除掉），防止 Javascript 的跨站攻击  </p><p><strong>预防方法：</strong>   </p><p> 开发：出错的时候使用错误处理页面，建立标准的过滤关键字程序，统一数据库设计命名规范将敏感的表名做特殊命名处理，密码使用Md5或其他加密方式保存  </p><p> 测试：验证所有页面不会暴露系统的任何出错信息使用安全工具appscan 或其他工具扫描系统的sql注入漏洞和跨站攻击漏洞  </p><p><strong>15</strong>   </p><p><strong>关于cookie</strong>  </p><p>Cookie没有设定过期时间IE不支持Cookie的时候没有任何提示信息Cookie中的敏感信息没有进行加密  </p><p><strong>预防方法：</strong>  </p><p> 开发：明确cookie生存期，并对生成的cookie进行检查，建立标准的检查浏览器对cookie支持的程序函数  </p><p> 测试：检查cookie的生存周期，以及是否存在敏感内容  </p><p><strong>16</strong>  </p><p><strong>各种资源链接的释放</strong>  </p><p>有的时候，系统莫名访问不了，有可能是数据库连接没有释放压力测试的时候，连接释放如果效率不高，则有可能出现大量连接超时失败内存泄露，长时间工作内存被占满了。  </p><p><strong>预防方法：</strong>  </p><p> 开发：系统资源的释放过程，最好通过代码review的方式来互相监督  </p><p> 测试：进行稳定性测试，验证长时间工作情况下的资源是否可以释放  </p><p><strong>关于keepalive的设置：</strong>  </p><p>如果需要在一个连接同时获取多个资源，则需要打开apache或者resin的Keepalive参数为On，来提高系统的处理能力，减少多次建立连接所消耗的资源。如果大量的处理只是一次性连接，则不要打开Keepalive设置。在实际工作中，需要将keepalive分别设置On或者Off来验证哪个设置的性能更好。  </p><p><strong>17</strong>  </p><p><strong>系统上线的log配置</strong>  </p><p>上线以后，要关闭无用大量调试log信息不要打开过多的log  </p><p><strong>预防方法：</strong>  </p><p>运维和开发：系统管理员对所有打开log级别进行确认，并群发相关人确认  </p><p><strong>18</strong>  </p><p><strong>用户易用性</strong>  </p><p>用户删除某个数据前，要明确提示用户是否要删除，默认把焦点选择为“否”。  </p><p><strong>预防方法：</strong>  </p><p> 开发：按照上述要求进行焦点设定  </p><p> 测试：进行测试确认  </p><p><strong>19</strong>  </p><p><strong>文档</strong>  </p><p>程序实现和接口文档描述不一致  </p><p><strong>预防方法：</strong>  </p><p> 开发：团队中专人定期对接口文档进行审核和更新，保证文档、需求变更和程序实现保持一致  </p><p> 测试：仅参照文档进行测试  </p><p><strong>20</strong>  </p><p><strong>多表操作</strong>  </p><p>详细设计文档缺失，接口对多表进行操作时候，经常会发生有些表的数据没有被更新的情况  </p><p><strong>预防方法：</strong>  </p><p> 开发：审核设计文档是否覆盖必要的逻辑，加强代码审查   </p><p> 测试：通过查询接口判断所有插入接口的数据库操作是否正确  </p><p>等等，这些我们完全可以在不断测试过程中进行总结和积累，可以给开发进行培训，让他们了解这些常见的问题，在自测时注意这些问题，提高送测产品的质量。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系   </p><p>[TOC]  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（八: Bug预防体系）</title>
    <link href="http://wysh.site/2016/10/13/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%85%ABBug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/10/13/产品测试规范八Bug预防体系/</id>
    <published>2016-10-13T01:38:02.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-10-Bug预防体系"><a href="#1-10-Bug预防体系" class="headerlink" title="1.10 Bug预防体系"></a>1.10 Bug预防体系</h2><h3 id="1-10-1-web常见产品问题及预防"><a href="#1-10-1-web常见产品问题及预防" class="headerlink" title="1.10.1 web常见产品问题及预防"></a>1.10.1 web常见产品问题及预防</h3><p>测试人员在每次版本迭代中，会对项目的整体质量有一个把控，对于项目常见的问题，开发经常犯的错误都会有所了解，为了避免或者减少这样的错误或不规范的事情在发生，测试人员可以整理构建属于产品的bug预防体系，总结项目经常出现bug的种类、位置、以及可以提出针对性的规避措施，提高产品质量。  </p><p><strong>1F</strong>  </p><p><strong>分辨率兼容性</strong>  </p><p>产品的网页通常保证在1024<em>768的分辨率下显示正常，但是常常忽略800</em>600分辨率下的显示情况，还有其他特殊要求的分辨率  </p><p>如果页面设计明确只考虑1024<em>768的需求，则只在1024</em>768下验证各个产品页面的显示正确无误  </p><p><strong>预防方法：</strong>  </p><ul><li><p>产品：需要明确产品需要兼容的常见屏幕分辨率</p></li><li><p>开发：网页页面的设计需要针对多种屏幕分辨率制定设计规范，并依据设计规范进行开发</p></li><li><p>测试：在不同分辨率下验证页面显示的兼容正确性</p></li></ul><p><strong>2F</strong>  </p><p><strong>浏览器兼容性</strong>  </p><p>目前市场上的主流浏览器如下：  </p><p><strong>a. IE 6.0-11</strong>  </p><p><strong>b. 360 浏览器</strong>  </p><p><strong>c. 猎豹浏览器</strong>  </p><p><strong>d. QQ 浏览器</strong>  </p><p><strong>e. Chrome 浏览器</strong>  </p><p><strong>f. FireFox 浏览器</strong>  </p><p>通常情况下要保证IE 6-11和360  </p><p>浏览器下的兼容性，需要保证页面不变型，Js执行均正确  </p><p><strong>预防方法：</strong>  </p><ul><li><p>产品：依据主流的浏览器市场占比，评估你需要兼容的浏览器</p></li><li><p>开发：针对需要兼容的浏览器类型和版本，指定浏览器兼容设计开发规（ CSS和Js 为主），并不断总结兼容性的经验教训</p></li><li><p>测试：在产品要求兼容的浏览器类型和版本下，进行兼容性测试</p></li></ul><p><strong>3F</strong>  </p><p><strong>Link问题</strong>  </p><p>所有链接是否按指示那样确实链接到了该链接的页面  </p><p>    所链接的页面是否存在  </p><p>    保证Web应用系统上没有孤立的页面，所谓孤立页面是指没有链接指向该页面  </p><p>    链接的打开方式是否合理（在当前窗口中打开、打开新窗口）  </p><p>    有死链  </p><p><strong>预防方法：</strong>   </p><p>    产品：提供的需求中明确是否需要链接以及链接的位置以及链接的打  </p><p><strong>开方式</strong>   </p><p>    测试：死链测试可以采用工具自动进行  </p><p><strong>4F</strong>  </p><p><strong>快捷键和焦点</strong>  </p><p>Tab键和焦点的切换：在测试的页面中使用Tab键可以在全页面的所有元素进行焦点切换、并且要将相邻元素的 tab键切换顺序做到关联。<br>如：  </p><p>a. 用户打开登录首页，则焦点应该默认显示在用户名输入框中  </p><p>b. 在用户名输入框输入用户名之后，按下tab  键后，焦点应该切换到密码输入框中，而不是切换到其他元素上。  </p><p>c. 输入密码后，按下tab键可将焦点切换到“保存密码”的复选框或者登录按钮以上操作，均对偏好使用快捷键的用户给于更友好的支持。<br><strong>预防方法：</strong>  </p><p>    产品：考虑页面的默认焦点设定位置，设定tab键在界面上切换焦点的顺序  </p><p>    开发：依据产品人员的要求实现默认焦点位置，和tab键的切换顺序  </p><p>    测试：验证默认焦点位置和tab切换的顺序  </p><p><strong>5F</strong>  </p><p><strong>前进、后退和刷新</strong>  </p><p>IE 有一个特性：就是允许前进、后退到某一个页面或在当前页面刷新，在某些特殊业务场景的要求下，用户进行前进、后退和刷新当前页面的操作，会造成数据不完整、校验失败或者重复提交的情况。  </p><p><strong>预防方法：</strong>  </p><p>    产品：明确哪些敏感页面不允许前进、后退和刷新，一般情况下充值和支付等相关的页面或者其他数据提交页面禁止后退和刷新后提交。  </p><p>    开发：从技术层面考虑后退和前进操作是否会造成系统漏洞，让用户重复充值或者支付。如果用户尝试后退，则让页面强制失效或者禁止后退。  </p><p>    测试：和产品确认禁止后退的操作限制页面，进行针对性测试  </p><p><strong>6F</strong>  </p><p>页面/JS/程序提示语言  </p><p>通常情况下，产品人员并不会将产品需求细化到某句话应该如何提示用户，所以不同的程序员会根据自己的语言特点来提示用户，这就造成了不同程序员提示的语言风格完全不一样，造成产品友好度下降。  </p><p><strong>预防方法：</strong>  </p><p>    产品：产品人员和开发人员一起制定尽可能大而全的产品提示语言规范，并且作为规范说明提供给开发人员进行使用。  </p><p>    开发：遵守语言说明规范，并且针对各种系统的要求不断补充和规范提示  </p><p>    测试：测试过程中，验证语言是否符合指定的语言规范  </p><p><strong>语言文字提示：</strong>  </p><p>a. 全角字符和半角字符都要使用一个空格分开  </p><p>b. 英文和数字之间要有空格分开  </p><p>c. 汉字和英文、数字要有空格分开  </p><p>d. 带有汉字的话要使用全角字符  </p><p>e. 语言中不要混用全角和半角标点  </p><p>f. 在语言中，永远不要用“你”这个字，要做一些操作步骤描述的时候，要多用“请”字  </p><p><strong>7F</strong>  </p><p><strong>文字缩略和折行</strong>   </p><p>输入框提交很长的纯英文字母或者数字（不带任何全角字符和中文），并且不换行，则提交数据后，页面可能被此相关字符拉伸的特别长。  </p><p><strong>预防方法：</strong>  </p><p>    开发：提交公共处理字符的程序，解决上述问题，在所有输入框中增加相关处理  </p><p>    测试：所有输入框需要进行此输入测试，保证页面不会被用户的恶意输入拉长  </p><p><strong>8F</strong>  </p><p><strong>图片的显示和链接</strong>  </p><p>图片是否增加链接通常会被开发人员忽略掉图片的显示位置通常会显示不同像素大小和比例的图，所以需要明确定义大图片如何缩减成为小图片的策略，以及小图片如何拉伸显示为大的图片。  </p><p><strong>预防方法：</strong>  </p><p>    产品：提供的需求中明确图片是否需要链接以及链接的url地址以及点击后实在当前页打开，还是弹出新页面打开。明确用户上传图片的显示方法，采用等比缩放，还是原大小显示，还是自适应显示  </p><p>    开发： 按照产品要求进行开发，针对图像的显示开发统一显示模块  </p><p>    测试：点击图片链接，验证图片链接的正确性和打开方式是否符合产品设计要求。传不同格式的图片（长方形图、正方形的图、原型图、超大图和超小图)，验证图片显示策略符合产品  </p><p><strong>9F</strong>  </p><p><strong>重复提交</strong>  </p><p>用户提交数据页面，用户有可能连续多次点击提交按钮，造成数据的重复提交。  </p><p>黑客或者不良用户通过抓包可以获取提交的url，进行尝试重复提交。  </p><p><strong>预防方法：</strong>  </p><p>    开发：点击“提交”后，将按钮变为Disable状态，禁止用户再次点击。针对每条提交的数据需要增加校验参数，方式不良用户通过其他工具恶意提交。  </p><p>    测试：通过页面验证按钮点击后的状态，通过工具发送重复提交的请求，验证系统是否可以处理重复提交的问题（金融系统需重点测试）  </p><p><strong>10F</strong>  </p><p><strong>输入判断问题</strong>  </p><p> 所有键盘输入的特殊字符，均可以正常保存  </p><p> 需要特别处理英文单引号、英文双引号等引起程序错误的问题  </p><p> 需要处理“ &lt;”、“ /”和“ \”等容易保存出错的字符  </p><p> 数字框只能输入数字的内容  </p><p> 日期框需要判断日期是否合法  </p><p> 文本框需要判断字段长是否限制了  </p><p> 对于空格的处理，如果系统想trim掉字符串最开头和最后的空格，则需要整个儿系统都使用此策略，否则会造成数据传递不一致的问题  </p><p> 需要前台页面使用js来判断输入的合法性，同时后台逻辑也要添加判断输入合  </p><p><strong>预防方法：</strong>  </p><p> 开发：开发公共处理特殊字符的模块，在系统中进行规范应用  </p><p> 测试：对所有输入字段，进行输入判断测试，超长、空、特殊字符、 utf8字符等，并验证其他页面输入有效性，验证前台和后台均加有输入判断逻辑  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>[TOC]  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（七:测试结果分析）</title>
    <link href="http://wysh.site/2016/10/02/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B8%83%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/"/>
    <id>http://wysh.site/2016/10/02/产品测试规范七测试结果分析/</id>
    <published>2016-10-02T08:47:35.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-7-测试结果分析"><a href="#1-7-测试结果分析" class="headerlink" title="1.7 测试结果分析"></a>1.7 测试结果分析</h2><h3 id="1-7-1-结果收集"><a href="#1-7-1-结果收集" class="headerlink" title="1.7.1 结果收集"></a>1.7.1 结果收集</h3><p>包括测试脚本测试结果，测试用例执行结果、服务器操作系统资源监控结果、数据库资源监控、web服务器监控、中间件服务器监控等结果的收集，如：功能测试测试用例数目，成功失败数，性能测试结果，各服务器资源监控结果，磁盘，io，内存消耗进程图等。  </p><p>这些收集的结果能帮助测试、产品进行测试结果的分析，哪些问题放到下一个版本中进行解决也可以通过这个来进行规划。  </p><h3 id="1-7-2-结果分析"><a href="#1-7-2-结果分析" class="headerlink" title="1.7.2 结果分析"></a>1.7.2 结果分析</h3><p>根据收集的测试结果，分析系统的稳定性，健壮性，功能测试可以通过结果分析得到版本的bug率，严重bug数、bug返工率等，对于系统后续优化有很大帮助；性能测试通过结果分析知道系统的性能指标，来判断本次系统迭代性能是否有提高，或者对于一个从无到有的系统来说，能预估系统在未来的某段时间能否承受住那么大的业务量。  </p><h3 id="1-7-3-测试分析报告"><a href="#1-7-3-测试分析报告" class="headerlink" title="1.7.3 测试分析报告"></a>1.7.3 测试分析报告</h3><p>根据分析的结果，生成测试分析报告，给定系统的稳定性指标，让系统相关人员知道该版本的质量情况，提供项目上线的风险评估，如果技术可以，还可以提供针对项目问题的改进计划，帮助提高产品质量。如果系统的性能不达标还需考虑后续系统的调优工作，可以找项目相关负责人，dba等相关专家，一起来做性能调优工作，因为性能调优是一项复杂的工作，仅靠测试人员自己之力一般很难做好调优工作，所以可以借助集体的力量共同完成，调优工作完成后，还需回环在进行一次测试工作，验证调优的效果。  </p><h2 id="1-8-上线准备"><a href="#1-8-上线准备" class="headerlink" title="1.8 上线准备"></a>1.8 上线准备</h2><h3 id="1-8-1-版本发布"><a href="#1-8-1-版本发布" class="headerlink" title="1.8.1 版本发布"></a>1.8.1 版本发布</h3><p>测试合格的代码可以进行版本发布工作，版本发布需要给出：发布包、发布文档、数据库脚本等材料，发布文档包括：用户手册、管理员手册、版本发布说明、对于首次发布还需提供产品发布说明、部署手册、测试分析报告等相关文档，这样每次的版本迭代都有相应的文档等材料一一对应，为项目更长远的发展打下基础。</p><h3 id="1-8-2-数据准备"><a href="#1-8-2-数据准备" class="headerlink" title="1.8.2 数据准备"></a>1.8.2 数据准备</h3><p>上线测试跟踪需要做好测试的准备工作，如线上数据准备，版本回退方案准备等，所有测试可能用到的脚本都应提前准备好，避免测试时手忙脚乱，影响效率。</p><h2 id="1-9-上线测试跟踪"><a href="#1-9-上线测试跟踪" class="headerlink" title="1.9 上线测试跟踪"></a>1.9 上线测试跟踪</h2><h3 id="1-9-1-跟踪测试"><a href="#1-9-1-跟踪测试" class="headerlink" title="1.9.1 跟踪测试"></a>1.9.1 跟踪测试</h3><p>系统上线后，可以做接口自动化的快速轮询测试，保证系统常用接口功能正常；对于版本迭代的功能要进行局部功能重点验证，看功能是否正常；常规的测试可以按照探索式测试+传统测试用例测试来进行，更全面的检查系统功能点；在跟踪测试过程中应该做好bug的记录工作，对于严重性bug需要开发修改后进行在一轮的验证测试，对于业务影响不大，如界面某个友好性提示问题，需做好问题记录，务必在下一次版本中优化掉，提高用户体验度的同时兼顾项目的实际情况。  </p><p>可能用到的脚本都应提前准备好，避免测试时手忙脚乱，影响效率。  </p><h2 id="1-10-Bug预防体系"><a href="#1-10-Bug预防体系" class="headerlink" title="1.10 Bug预防体系"></a>1.10 Bug预防体系</h2><h3 id="1-10-1-web常见产品问题及预防"><a href="#1-10-1-web常见产品问题及预防" class="headerlink" title="1.10.1 web常见产品问题及预防"></a>1.10.1 web常见产品问题及预防</h3><p>测试人员在每次版本迭代中，会对项目的整体质量有一个把控，对于项目常见的问题，开发经常犯的错误都会有所了解，为了避免或者减少这样的错误或不规范的事情在发生，测试人员可以整理构建属于产品的bug预防体系，总结项目经常出现bug的种类、位置、以及可以提出针对性的规避措施，提高产品质量。  </p><p><strong>1F</strong>  </p><p><strong>分辨率兼容性</strong>  </p><ul><li><p>产品的网页通常保证在1024<em>768的分辨率下显示正常，但是常常忽略800</em>600分辨率下的显示情况，还有其他特殊要求的分辨率</p></li><li><p>如果页面设计明确只考虑1024<em>768的需求，则只在1024</em>768下验证各个产品页面的显示正确无误  </p></li></ul><p><strong>预防方法</strong>：</p><ul><li><p>产品：需要明确产品需要兼容的常见屏幕分辨率</p></li><li><p>开发：网页页面的设计需要针对多种屏幕分辨率制定设计规范，并依据设计规范进行开发</p></li><li><p>测试：在不同分辨率下验证页面显示的兼容正确性</p></li></ul><p><strong>2F</strong>  </p><p><strong>浏览器兼容性</strong>  </p><p>目前市场上的主流浏览器如下：  </p><p><strong>a. IE 6.0-11</strong>  </p><p><strong>b. 360 浏览器</strong>  </p><p><strong>c. 猎豹浏览器</strong>  </p><p><strong>d. QQ 浏览器</strong>  </p><p><strong>e. Chrome 浏览器</strong>  </p><p><strong>f. FireFox 浏览器</strong>  </p><p>通常情况下要保证IE 6-11和360 浏览器下的兼容性，需要保证页面不变型，Js执行均正确</p><p><strong>预防方法：</strong></p><ul><li><p>产品：依据主流的浏览器市场占比，评估你需要兼容的浏览器</p></li><li><p>开发：针对需要兼容的浏览器类型和版本，指定浏览器兼容设计开发规（ CSS和Js 为主），并不断总结兼容性的经验教训</p></li><li><p>测试：在产品要求兼容的浏览器类型和版本下，进行兼容性测试</p></li></ul><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>[TOC]  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（六: 测试执行）</title>
    <link href="http://wysh.site/2016/09/19/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%85%AD%E6%B5%8B%E8%AF%95%E6%89%A7%E8%A1%8C/"/>
    <id>http://wysh.site/2016/09/19/产品测试规范六测试执行/</id>
    <published>2016-09-19T00:27:52.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-6-测试执行"><a href="#1-6-测试执行" class="headerlink" title="1.6 测试执行"></a>1.6 测试执行</h2><h3 id="1-6-1-接口自动化测试"><a href="#1-6-1-接口自动化测试" class="headerlink" title="1.6.1 接口自动化测试"></a>1.6.1 接口自动化测试</h3><p>搭建好的接口自动化流程，可以方便快速构建一次接口测试，这样能很快定位版本接口是不是基本没有问题，提高版本质量。  </p><p>目前接口自动化测试在测试工具选取中也谈到了，主要有：jmeter、robotframework、自定义框架等，自动化测试的执行可以版本上线后手动触发执行，也可以用定时任务自动触发，或者用工具来进行自动化构建，不变的初衷是用程序或者工具来替代掉一部分的人力操作，让节省出来的人力更好的投入到测试当中。  </p><p>如：一套自定义的测试框架，java+testng+maven+jenkins，版本测试时，Jenkins自动构建运行java+testng+maven框架脚本，去运行事先编写好的接口脚本，生成测试报告，对于测试接口异常的点进行邮件或者短信告警等，这样运维人员能在第一时间知道版本的质量，异常的接口是哪些，减少人工去一个一个核查接口正确性的时间消耗，有更快或更多的时间去处理异常和维护接口。而且一般项目对于接口的变动不会太大，不会全盘重构一般都是新增某些接口，或者修改一些接口，这样接口脚本只需跟着稍微调整即可，复用性很强，在很多项目上的实验都证明接口自动化测试带来的收益很大。  </p><h3 id="1-6-2-探索式测试"><a href="#1-6-2-探索式测试" class="headerlink" title="1.6.2 探索式测试"></a>1.6.2 探索式测试</h3><p>探索性测试强调测试人员的主观能动性，抛弃繁杂的测试计划和测试用例设计过程，没有很多实际的测试方法、技术和工具，强调在碰到问题时及时改变测试策略。  </p><p>探索性测试强调测试设计和测试执行同时性，完全抛开测试用例，使用定义的比较笼统的测试用例，则称之为探索式测试。  </p><p>测试人员可以根据收集到的信息，天马行空，自由发挥；测试结果、测试实例和测试文档在测试执行时创建；探索式测试适用于“敏捷开发过程”。  </p><p>在用传统的测试用例执行测试的同时，可以使用探索性测试来让测试用例更加的丰富和富有变化，提高测试代码的覆盖率，发现产品更多的问题。  </p><h3 id="1-6-3-传统测试用例测试"><a href="#1-6-3-传统测试用例测试" class="headerlink" title="1.6.3 传统测试用例测试"></a>1.6.3 传统测试用例测试</h3><p>传统用例的设计方式有：等价类划分法、边界值、正交实验、因果图、功能图、场景法、错误推测、随机测试、对象属性分析测试等方法，根据这些方法可以选取一种或者多种适合系统的设计方法来编写和设计我们的测试用例，让自己的测试有条理，尽可能多的覆盖测试点，提高产品的质量。  </p><p>这里给出一个等价类划分法结合边界值方法的测试用例设计例子：  </p><p>某报表处理系统要求用户输入处理报表的日期，日期限制在2001年1月至2008年12月，即系统只能对该段期间内的报表进行处理，如日期不在此范围内，则显示输入错误信息。系统日期规定由年、月的6位数字字符组成，前四位代表年，后两位代表月：  </p><p>分析输入条件有：200101到200812；6位；数字  </p><p>等价类表：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdM0awp8Mlia2576uzc1Cerwia5P3pRSuJUqEMULjiciczJSibMMDEztHTQjO6Pfb0QOcXiaowTV9ib3nKtyw/0?wx_fmt=png" alt="image"></p><p>测试用例：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdM0awp8Mlia2576uzc1CerwiaxjZMrtJtyPFXx0N861vcJTlSah97oGO4Wy6iaL2DsXYwIYlB6WicUekw/0?wx_fmt=png" alt="image">  </p><p>那么根据这些测试用例我们就能很好的测试这个“用户输入处理报表的日期”的功能，其他的功能点类推，我们根据1.4中准备好的功能测试框架进行套用，每个模块都按预期设计的方案来进行测试，这样就能保证一些常规部分的功能点更多的被覆盖到。  </p><h3 id="1-6-4-Bug跟踪"><a href="#1-6-4-Bug跟踪" class="headerlink" title="1.6.4 Bug跟踪"></a>1.6.4 Bug跟踪</h3><p>测试人员在测试过程中对于遇到的bug需要进行记录和跟踪，不要觉得不严重的bug口头上说一声或者其他形式表达一下就可以不用记录了，因为bug的记录有利于产品领导了解产品的质量情况，有很多bug管理工具，如：readmine、禅道等，从测试用例到bug生成，指派给开发，返工次数，每次解决的理由到最后关闭即整个的bug生命周期都能做到很好的管控，帮助产品经理或项目经理进行下一步的产品优化、以及对产品质量做一个把控。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>[TOC]</p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（五: 测试用例编写-功能测试框架）</title>
    <link href="http://wysh.site/2016/09/12/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%BA%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99-%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://wysh.site/2016/09/12/产品测试规范五测试用例编写-功能测试框架/</id>
    <published>2016-09-11T23:57:16.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>功能测试框架可以包括：界面友好性测试、功能测试、链接测试、容错测试、稳定性测试、常规性能测试、配置测试、算法测试等等。</strong>  </p><h3 id="1-5-6-稳定性测试"><a href="#1-5-6-稳定性测试" class="headerlink" title="1.5.6 稳定性测试"></a>1.5.6 稳定性测试</h3><ol><li><p>系统不间断运行（7*24），验证是否内存泄露、系统其他资源是否存在泄露</p></li><li><p>如果很紧急上线，可以跑一晚上或者周末跑两天。</p></li></ol><p>一般压力很大的情况下，数据库连接数问题、内存泄露问题会曝露的比较快但是死锁可能不能体现，所以要看系统重要性，如12306稳定性则最好7*24小时</p><h3 id="1-5-7-常规性能测试"><a href="#1-5-7-常规性能测试" class="headerlink" title="1.5.7 常规性能测试"></a>1.5.7 常规性能测试</h3><ol><li><strong>连接速度测试</strong></li></ol><p>用户连接到Web应用系统的速度根据上网方式的变化而变化，他们或许是电话拨号，或是宽带上网。当下载一个程序时，用户可以等较长的时间，但如果仅仅访问一个页面就不会这样。如果Web系统响应时间太长（例如超过5秒钟），用户就会因没有耐心等待而离开。  </p><p>另外，有些页面有超时的限制，如果响应速度太慢，用户可能还没来得及浏览内容，就需要重新登陆了。而且，连接速度太慢，还可能引起数据丢失，使用户得不到真实的页面。</p><ol start="2"><li><strong>负载测试</strong></li></ol><p>负载测试是为了测量Web系统在某一负载级别上的性能，以保证Web系统在需求范围内能正常工作。负载级别可以是某个时刻同时访问Web系统的用户数量，也可以是在线数据处理的数量。例如：Web应用系统能允许多少个用户同时在线？如果超过了这个数量，会出现什么现象？Web应用系统能否处理大量用户对同一个页面的请求？</p><ol start="3"><li><strong>压力测试</strong></li></ol><p>负载测试应该安排在Web系统发布以后，在实际的网络环境中进行测试。因为一个企业内部员工，特别是项目组人员总是有限的，而一个Web系统能同时处理的请求数量将远远超出这个限度，所以，只有放在Internet上，接受负载测试，其结果才是正确可信的。</p><p>进行压力测试是指实际破坏一个Web应用系统，测试系统的反映。压力测试是测试系统的限制和故障恢复能力，也就是测试Web应用系统会不会崩溃，在什么情况下会崩溃。黑客常常提供错误的数据负载，直到Web应用系统崩溃，接着当系统重新启动时获得存取权。</p><p>压力测试的区域包括表单、登陆和其他信息传输页面等。</p><h3 id="1-5-8-易用性测试"><a href="#1-5-8-易用性测试" class="headerlink" title="1.5.8 易用性测试"></a>1.5.8 易用性测试</h3><ol><li><p>系统界面的控件是否可以通过tab键遍历，并且顺序合理</p></li><li><p>主要功能的入口和操作是否易于理解</p></li><li><p>界面是否布局合理，功能是否易于查找和使用</p></li><li><p>操作步骤</p></li><li><p>操作习惯</p></li><li><p>有足够的提示信息，且信息文字描述准确</p></li></ol><h3 id="1-5-9-兼容性测试"><a href="#1-5-9-兼容性测试" class="headerlink" title="1.5.9 兼容性测试"></a>1.5.9 兼容性测试</h3><p>兼容性测试不只是指界面在不同操作系统或浏览器下的兼容，有些功能方面的测试，也要考虑到兼容性，包括操作系统兼容和应用软件兼容，可能还包括硬件兼容。  </p><p>比如涉及到ajax、jquery、javascript等技术的，都要考虑到不同浏览器下的兼容性问题。  </p><p>除了上面所说的这些测试以外，还有算法测试、配置测试、安全性测试等等，在工作中不断总结和分析，形成自己的功能测试框架，当你把这份工作做起来以后，对于你自己对于测试团队而言都是一份很有价值的事情，你的测试思路也会变得更全面。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>[TOC]</p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（四：测试用例编写-功能测试框架）</title>
    <link href="http://wysh.site/2016/08/15/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%9B%9B%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99-%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://wysh.site/2016/08/15/产品测试规范四测试用例编写-功能测试框架/</id>
    <published>2016-08-15T09:37:49.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>功能测试框架可以包括：界面友好性测试、功能测试、链接测试、容错测试、稳定性测试、常规性能测试、配置测试、算法测试等等。</strong>  </p><h3 id="1-5-2-功能测试"><a href="#1-5-2-功能测试" class="headerlink" title="1.5.2 功能测试"></a>1.5.2 功能测试</h3><ol><li><p>使用所有默认值进行测试</p></li><li><p>根据所有产品文档、帮助文档中描述的内容要进行遍历测试</p></li><li><p>输入判断</p></li><li><p>所有界面出现是和否的逻辑，要测试</p></li><li><p>异常处理</p></li><li><p>敏感词</p></li><li><p>根据需求文档的流程图遍历所有流程图路径</p></li><li><p>根据程序内容，遍历if elif else switch的逻辑点要遍历</p></li><li><p>界面各种控件测试</p></li></ol><p><strong>如对于输入框测试</strong>：</p><p><strong>字符型输入框：</strong></p><ol><li><p><strong>字符型输入框：</strong> 英文全角、英文半角、数字、空或者空格、特殊字符“~！@#￥%……&amp;*？[]{}”特别要注意单引号和&amp;符号。禁止直接输入特殊字符时，使用“粘贴、拷贝”功能尝试输入。</p></li><li><p><strong>长度检查：</strong> 最小长度、最大长度、最小长度-1、最大长度+1、输入超工字符比如把整个文章拷贝过去。</p></li><li><p><strong>空格检查：</strong>   输入的字符间有空格、字符前有空格、字符后有空格、字符前后有空格</p></li><li><p><strong>多行文本框输入：</strong> 允许回车换行、保存后再显示能够保存输入的格式、仅输入回车换行，检查能否正确保存（若能，检查保存结果，若不能，查看是否有正常提示）、</p></li><li><p><strong>安全性检查：</strong> 输入特殊字符串</p></li></ol><p>（null,NULL, ,javascript,,</p><p><strong>数值型输入框：</strong></p><ol><li><p><strong>边界值：</strong> 最大值、最小值、最大值+1、最小值-1</p></li><li><p><strong>位数：</strong> 最小位数、最大位数、最小位数-1最大位数+1、输入超长值、输入整数</p></li><li><p><strong>异常值、特殊字符：</strong> 输入空白（NULL）、空格或”~!@#$%^&amp;*()_+{}|[]\:”&lt;&gt;?;’,./?;:’-=等可能导致系统错误的字符、禁止直接输入特殊字符时，尝试使用粘贴拷贝查看是否能正常提交、word中的特殊功能，通过剪贴板拷贝到输入框，分页符，分节符类似公式的上下标等、数值的特殊符号如∑，㏒，㏑，∏，+，-等、<br>输入负整数、负小数、分数、输入字母或汉字、小数（小数前0点舍去的情况，多个小数点的情况）、首位为0的数字如01、02、科学计数法是否支持1.0E2、全角数字与半角数字、数字与字母混合、16进制，8进制数值、货币型输入（允许小数点后面几位）、</p></li><li><p><strong>安全性检查：</strong> 不能直接输入就 copy</p></li></ol><p><strong>日期型输入框：</strong></p><ol><li><strong>合法性检查：</strong> (输入0日、1日、32日)、月输入[1、3、5、7、8、10、12]、日输入[31]、月输入[4、6、9、11]、日输入[30][31]、输入非闰年，月输入[2]，日期输入[28、29]、输入闰年，月输入[2]、日期输入[29、30]、月输入[0、1、12、13]</li></ol><p>考虑开始日期与结束日历的比较，特别是在查询的时候.</p><ol start="2"><li><p><strong>异常值、特殊字符：</strong> 输入空白或NULL、输入~！@#￥%……&amp;*（）{}[]等可能导致系统错误的字符</p></li><li><p><strong>安全性检查：</strong> 不能直接输入，就copy，是否数据检验出错？</p></li></ol><h3 id="1-5-3-业务流程测试-主要功能测试"><a href="#1-5-3-业务流程测试-主要功能测试" class="headerlink" title="1.5.3 业务流程测试(主要功能测试)"></a>1.5.3 业务流程测试(主要功能测试)</h3><p>业务流程，一般会涉及到多个模块的数据，所以在对业务流程测试时，首先要保证单个模块功能的正确性，其次就要对各个模块间传递的数据进行测试，这往往是容易出现问题的地方，测试时一定要设计不同的数据进行测试。  </p><p>如某一功能模块具有最基本的增删改查功能，则需要进行以下测试：  </p><ol><li><p>单项功能测试（增加、修改、查询、删除）</p></li><li><p>增加——&gt;增加——&gt;增加 （连续增加测试）</p></li><li><p>增加——&gt;删除</p></li><li><p>增加——&gt;删除——&gt;增加 （新增加的内容与删除内容一致）</p></li><li><p>增加——&gt;修改——&gt;删除</p></li><li><p>修改——&gt;修改——&gt;修改 （连续修改测试）</p></li><li><p>修改——&gt;增加（新增加的内容与修改前内容一致）</p></li><li><p>修改——&gt;删除</p></li><li><p>修改——&gt;删除——&gt;增加 （新增加的内容与删除内容一致）</p></li><li><p>删除——&gt;删除——&gt;删除 （连续删除测试）</p></li></ol><h3 id="1-5-4-链接测试"><a href="#1-5-4-链接测试" class="headerlink" title="1.5.4 链接测试"></a>1.5.4 链接测试</h3><p>主要是保证链接的可用性和正确性，它也是网站测试中比较重要的一个方面。  </p><p>可以使用特定的工具如XENU来进行链接测试。  </p><h3 id="1-5-5-容错测试"><a href="#1-5-5-容错测试" class="headerlink" title="1.5.5 容错测试"></a>1.5.5 容错测试</h3><ol><li><p>输入系统不允许的数据作为输入  </p></li><li><p>把某个相关模块或者子系统停掉，验证对当前系统的影响</p></li><li><p>配置文件删除或者配置错误</p></li><li><p>数据库注入错误数据</p></li></ol><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>[TOC]</p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（三：测试准备）</title>
    <link href="http://wysh.site/2016/08/15/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B8%89%E6%B5%8B%E8%AF%95%E5%87%86%E5%A4%87%EF%BC%89/"/>
    <id>http://wysh.site/2016/08/15/产品测试规范三测试准备）/</id>
    <published>2016-08-15T09:37:47.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-4-测试准备"><a href="#1-4-测试准备" class="headerlink" title="1.4 测试准备"></a>1.4 测试准备</h2><h3 id="1-4-1-代码管理"><a href="#1-4-1-代码管理" class="headerlink" title="1.4.1 代码管理"></a>1.4.1 代码管理</h3><p>所有的产品代码应该统一管理起来，开发人员提交代码应与测试代码地址进行分离，做到高效管理代码，当开发人员提交代码到开发的代码库中，需要进行测试时，测试人员可去开发的代码中进行提取代码到测试基线库中，每提取一次就建立一个测试基线，直到此次版本测试合格，在把合格的测试基线提取到正式基线中用于版本发布，这样每个版本都有清晰的界限和记录，使得产品代码清晰一目了然，可以借助代码管理工具，如svn创建基线来帮助管理产品代码：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOM5QXSibRNPyNA2S3C5emqK2SyJZzwzCeDgr4XZ2UF63Ba8VcJwxPsOPwZB0icWQO4Hwfd4nFBljZg/0?wx_fmt=png" alt="image"></p><h3 id="1-4-2-测试环境搭建"><a href="#1-4-2-测试环境搭建" class="headerlink" title="1.4.2 测试环境搭建"></a>1.4.2 测试环境搭建</h3><p>这个需要配合1.3测试计划的1.3.4测试环境梳理文档和部署文档来进行，根据事先规划好的服务器部署应用策略来搭建测试环境，能让你搭建思路更加清晰，以后维护环境也更加方便。</p><p>接触很多公司的测试关于环境这块的梳理工作，有的是有专门的服务器管理人员来管理这些环境，有的是由测试人员自己管理，但需要保证的是测试环境应当与开发环境分离开，让测试更加规范减少不必要的麻烦，遇到一些事情如：开发人员很懒，功能开发完成后让他在服务器上验证一下是不是对的，因为开发环境没人去管理部署上去弄得不好应用就报错无法进行调试，所以有的开发就会为方便起见把自己的验证测试直接弄到测试环境上进行，这样带来一个后果就是，你也来部署一个应用，他也来部署一个应用，久而久之测试环境就会特别乱，对测试人员梳理该环境增加不必要的负担，所以建议测试环境的账号应当只有dba或者测试人员自己知道，与开发环境进行分离。</p><h3 id="1-4-3-测试数据脚本编写"><a href="#1-4-3-测试数据脚本编写" class="headerlink" title="1.4.3 测试数据脚本编写"></a>1.4.3 测试数据脚本编写</h3><p>功能性测试数据脚本一般为辅助性测试脚本，如：为了验证分页功能，写一个造数据的脚本让界面出现分页效果，帮助自己测试，减少手动一条一条增加数据的时间。  </p><p>接口测试需要编写接口测试脚本，目前<strong>接口测试比较受欢迎的几款工具有：postman、loadrunner、jmeter、soupui、自定义框架</strong>，postman工具可以模拟发送http请求，用来做一些简单的接口验证测试比较方便，测试结果需要人眼去核查是否正确；loadrunner和jmeter工具更加智能化，接口测试支持断言/检查点设置，工具自己校验测试结果，支持参数化以及请求间参数关联，可以做一些复杂的场景流程测试；自定义框架可以结合项目适合进行扩展，比工具要灵活，但是需要测试人员有一定的代码基础才能开发出适合项目的<strong>接口自动化框架</strong>，如：<strong>unittest、testng</strong>技术等。  </p><p>性能测试需要编写性能测试脚本，如<strong>loadrunner脚本</strong>、<strong>jmeter脚本</strong>等，脚本涉及参数化的地方也需提前构建好，如果系统并发登录需要大量的登录账户，则需要提前造好数据，可以让用户按规则进行，这样脚本中用户就可以用正则编写一定吻合的规则即可，省去大数据参数化的性能损耗。  </p><p>测试工具层出不穷，在学习各种测试工具、测试技术的同时，不要忘记基本功，编程能力的提升才是重中之重。  </p><h2 id="1-5-测试用例编写-功能测试框架"><a href="#1-5-测试用例编写-功能测试框架" class="headerlink" title="1.5 测试用例编写(功能测试框架)"></a>1.5 测试用例编写(功能测试框架)</h2><p>测试用例的编写需要按照一定的思路进行，而不是想到哪写到哪，一般测试机制成熟的公司都会有公司自己自定义的测试用例模板，以及一整套的测试流程关注点，当然我们自己在测试生涯中也应当积累一套自己的测试框架，所有功能性的测试都可以依据框架的思路来进行，达到事半功倍的效果。  </p><p><strong>功能测试框架可以包括：界面友好性测试、功能测试、链接测试、容错测试、稳定性测试、常规性能测试、配置测试、算法测试等等。</strong></p><h3 id="1-5-1-界面友好性测试"><a href="#1-5-1-界面友好性测试" class="headerlink" title="1.5.1 界面友好性测试"></a>1.5.1 界面友好性测试</h3><ol><li><p>风格、样式、颜色是否协调</p></li><li><p>界面布局是否整齐、协调（保证全部显示出来的，尽量不要使用滚动条</p></li><li><p>界面操作、标题描述是否恰当（描述有歧义、注意是否有错别字）</p></li><li><p>操作是否符合人们的常规习惯（有没有把相似的功能的控件放在一起，方便操作）</p></li><li><p>提示界面是否符合规范（不应该显示英文的cancel、ok，应该显示中文的确定等）</p></li><li><p>界面中各个控件是否对齐</p></li><li><p>日期控件是否可编辑</p></li><li><p>日期控件的长度是否合理，以修改时可以把时间全部显示出来为准</p></li><li><p>查询结果列表列宽是否合理、标签描述是否合理</p></li><li><p>查询结果列表太宽没有横向滚动提示</p></li><li><p>对于信息比较长的文本，文本框有没有提供自动竖直滚动条</p></li><li><p>数据录入控件是否方便</p></li><li><p>有没有支持Tab键，键的顺序要有条理，不乱跳</p></li><li><p>有没有提供相关的热键</p></li><li><p>控件的提示语描述是否正确</p></li><li><p>模块调用是否统一，相同的模块是否调用同一个界面</p></li><li><p>用滚动条移动页面时，页面的控件是否显示正常</p></li><li><p>日期的正确格式应该是XXXX-XX-XX或XXXX-XX-XX XX:XX:XX</p></li><li><p>页面是否有多余按钮或标签</p></li><li><p>窗口标题或图标是否与菜单栏的统一</p></li><li><p>窗口的最大化、最小化是否能正确切换</p></li><li><p>对于正常的功能，用户可以不必阅读用户手册就能使用</p></li><li><p>执行风险操作时，有确认、删除等提示吗</p></li><li><p>操作顺序是否合理</p></li><li><p>正确性检查：检查页面上的form, button, table, essay-header, footer,提示信息，还有其他文字拼写，句子的语法等是否正确。</p></li><li><p>系统应该在用户执行错误的操作之前提出警告，提示信息.</p></li><li><p>页面分辨率检查，在各种分辨率浏览系统检查系统界面友好性。</p></li><li><p>合理性检查：做delete, update, add, cancel, back等操作后，查看信息回到的页面是否合理。</p></li><li><p>检查本地化是否通过：英文版不应该有中文信息，英文翻译准确，专业。</p></li><li><p>背景灰度冻结</p></li></ol><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>[TOC]</p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（一：测试流程）</title>
    <link href="http://wysh.site/2016/08/09/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B8%80%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%EF%BC%89/"/>
    <id>http://wysh.site/2016/08/09/产品测试规范一测试流程）/</id>
    <published>2016-08-09T07:46:19.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第1章-产品测试规范"><a href="#第1章-产品测试规范" class="headerlink" title="第1章 产品测试规范"></a>第1章 产品测试规范</h2><p><strong>产品测试流程</strong></p><h3 id="1-1-1-测试流程图"><a href="#1-1-1-测试流程图" class="headerlink" title="1.1.1 测试流程图"></a>1.1.1 测试流程图</h3><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOPx6rUnDXJe3Fia4ZyqEdAVpNgB6YEEUbNx42UTuNCmqFTYAibCHicGjibIFUicLmwxicr1BMNNPYDYPOQ/0?wx_fmt=png" alt="image">  </p><h3 id="1-1-2-测试流程说明"><a href="#1-1-2-测试流程说明" class="headerlink" title="1.1.2 测试流程说明"></a>1.1.2 测试流程说明</h3><ol><li>需求阶段：</li></ol><p>测试人员了解项目需求及需求变更，包括需求规格说明书、功能结构及模块划分，根据需求梳理测试点。  </p><ol start="2"><li>测试计划阶段：</li></ol><p>测试计划环节需要考虑测试工具选取，考虑需要测试的业务点，涉及到多业务量测试团队测试，需考虑人员分配问题，如：哪些人准备测试执行，哪些人准备测试过程中数据的收集与整理为后面统一分析做准备。  </p><p>测试环境梳理为测试需要部署哪些应用，应用是单节点部署还是分布式部署，每个应用分配几台机器进行部署，以及测试工具及监控工具的部署等。  </p><p>测试数据梳理为测试过程中需要考虑可能用到哪些数据如同时登陆的场景需要不同的用户，测试翻页功能需要的数据量，通过测试数据梳理能够理清可能需要编写哪些辅助脚本来进行测试。  </p><p>测试场景梳理为根据选取的测试业务点来设计需要测试的场景。  </p><ol start="3"><li>测试准备阶段：</li></ol><p>代码管理为分为开发代码、测试基线、正式基线等，测试代码应在测试基线中进行即与开发的代码管理库分离，测试合格的代码才可以分支到正式基线中。  </p><p>测试环境的搭建工作也需要进行管理，哪些服务器用来搭建哪些应用应当有对应的部署文档以及部署架构图，即测试环境需心中有数且有文档记录，让人一目了然。  </p><p>测试用例编写可以根据功能测试框架来进行，覆盖到所需测试的模块以及需求中指出的测试点。  </p><p>测试数据准备为在系统正式测试前就准备好测试时需要的数据，如移动查单需提前准备好手机号码用来测试查询。  </p><p>测试脚本准备为测试过程中通过手工无法进行或者效率很低可以通过代码来实现的环节，如：登录用户的准备，千万条用户性能测试同时登录系统，需要编写sql脚本来批量生成用户账号数据，又如：接口测试根据接口测试文档预先编写好所有的接口测试脚本。  </p><ol start="4"><li>测试执行阶段：</li></ol><p>功能测试可以通过传统测试用例测试+探索式测试一起执行，提高测试产品的质量，性能测试将测试准备阶段准备好的脚本和数据以及部署好的工具，按照写好的测试方案来进行测试，接口测试按照接口测试方案来运行已编写好的脚本。即让所有的测试有条不紊的运行，不是想到哪是哪，而且所有的测试不是一蹴而就的，测试过程中需要进行bug的跟踪，指派给对应的负责人，把握项目的测试进度。  </p><ol start="5"><li>测试结果分析阶段：</li></ol><p>根据测试的结果、日志收集结果、资源收集结果、异常跟踪结果等汇总分析生成测试分析报告并给出可行性的建议，如果涉及到调优工作，还需对调优结果进行验证，需要对上线的风险进行评估。  </p><ol start="6"><li>上线准备阶段：</li></ol><p>测试人员需要准备线上测试需要用到的数据，需结合生产环境进行，如系统生成订单测试环境是不需要uim卡号的，但是真实的线上环境需要用到uim卡号，这就需要提前准备好线上测试的数据。  </p><p>上线准备需要提供测试合格的发布资料(包括：发布包、数据库脚本、用户手册、部署文档、维护手册等)、还需要考虑好回滚方案。  </p><ol start="7"><li>上线后测试跟踪阶段：</li></ol><p>可以持续构建接口自动化，快速进行一轮接口测试，保证常规接口正常运行，功能测试可以根据测试用例+探索式测试来进行，如果是更新补丁等，需要重点对上线更新的功能进行验证测试，当然测试过程中必不可少要进行bug的跟踪。  </p><ol start="8"><li>项目总结阶段：</li></ol><p>对于项目整体的质量做总结分析，给出总结报告，测试人员需要根据每次的测试、上线等积累符合项目的bug预防体系，总结项目经常出现bug的种类、位置、以及可以提出针对性的规避措施，提高产品质量。（待续）  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong>  </p><p>[TOC] </p><p>1.2 需求梳理   </p><p>1.2.1 需求梳理  </p><p>1.3 测试计划  </p><p>1.3.1 测试工具选取  </p><p>1.3.2 测试人员分配  </p><p>1.3.3 测试业务场景选取  </p><p>1.3.4 测试环境梳理  </p><p>1.3.5 测试数据梳理  </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)  </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（二：需求梳理）</title>
    <link href="http://wysh.site/2016/08/09/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%BA%8C%E9%9C%80%E6%B1%82%E6%A2%B3%E7%90%86/"/>
    <id>http://wysh.site/2016/08/09/产品测试规范二需求梳理/</id>
    <published>2016-08-09T07:46:19.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-2-需求梳理"><a href="#1-2-需求梳理" class="headerlink" title="1.2 需求梳理"></a>1.2 需求梳理</h2><h3 id="1-2-1-需求梳理"><a href="#1-2-1-需求梳理" class="headerlink" title="1.2.1  需求梳理"></a>1.2.1  需求梳理</h3><p>根据需求文档、需求规格说明书来对需要测试的功能点进行梳理，而且通过需求文档能够更加了解项目的业务场景，一般情况下，在项目中需求文档有3种现状：  </p><ol><li><strong>有详细的需求文档：</strong></li></ol><p>比较严谨负责的团队项目的实施是有详细的需求文档的，我们就可以详阅需求文档来进行测试点的梳理工作，对于需求中你认为不明确的地方可以找项目领导人进行沟通，做到对需求整体把握和理解，利于测试更好的进行。</p><ol start="2"><li><strong>需求文档不明确即有文档但是文档很粗糙：</strong></li></ol><p>一般有两种办法，如果开发团队很配合，可以要求开发或者需求分析人员完善需求文档，如果因为各种原因比如时间紧张或者开发就是不愿意，那么就需要自己去沟通对于文档中不明确的点问清楚，切记不要含糊不清的测试，于人于己都没有好处。</p><ol start="3"><li><strong>没有需求文档：</strong></li></ol><p>如果你运气很不好遇到了，虽然我很同情你，但是貌似同情没啥用，我们知道做测试很重要的一点是：我有一个预期，我要把软件运行的实际值跟我的预期去比对，如果达到了预期，那么就没问题，如果跟预期不一致那就是有问题。那么如果没有需求，<strong>我们该怎么办</strong>：  </p><p><strong>第一种</strong>靠嘴去问，大家去协调，协商沟通，然后大家都回答没问题了，我会自己写一个概要的需求描述，然后让他去确认，他说可以，那咱们就这样测，有问题就不断的口头沟通；  </p><p><strong>第二种</strong>要基于用户使用的场景和行业的经验来去做判断它是不是合理的。  </p><h2 id="1-3-测试计划"><a href="#1-3-测试计划" class="headerlink" title="1.3 测试计划"></a>1.3 测试计划</h2><h3 id="1-3-1-测试工具选取"><a href="#1-3-1-测试工具选取" class="headerlink" title="1.3.1 测试工具选取"></a>1.3.1 测试工具选取</h3><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOm7U5WUgaU7sX4jASQibic4jbbh9MhHHhPs15UcKmAhQGGOMxNSe1ZHqZiaMCLaWlvfvA7tDib1lNcrw/0?wx_fmt=png" alt="image"></p><p>测试工具说明：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOm7U5WUgaU7sX4jASQibic4jYEzFqkb2drmbsasvQ1IeaG1HOAVmVq8cZVBQqniaYZbLmMzQryNvCpg/0?wx_fmt=png" alt="image">  </p><p>以上列出了自己在测试过程中所用过的一些工具，每种都有自己的利弊和自适应的测试场景，可以进行参考和根据实际需求来进行分析选取。</p><h3 id="1-3-2-测试人员分配"><a href="#1-3-2-测试人员分配" class="headerlink" title="1.3.2 测试人员分配"></a>1.3.2 测试人员分配</h3><p>测试场景敲定以后，对于大业务量的测试工作或者团队合作测试的任务需要分配好各自的任务，让大家各司其职，如：测试环境梳理和搭建人员、测试数据准备人员、测试脚本编写人员、测试执行人员、测试日志收集人员、测试结果汇总分析人员，每个人可以负责一个模块或者多个模块，更甚者有的项目任务量不多，一个人搞定这么多部分也是大有人在，即一个人搭建环境、一个人准备数据写测试用例准备测试、收集日志进行分析，这对测试人员的要求比较高才能更好保证产品的输出质量。</p><h3 id="1-3-3-测试业务场景选取"><a href="#1-3-3-测试业务场景选取" class="headerlink" title="1.3.3 测试业务场景选取"></a>1.3.3 测试业务场景选取</h3><p>根据需求说明文档，梳理需要测试的业务点和场景，比如应用系统的性能测试，需测试nginx负载节点的性能情况，是否可支撑1000/s的业务能力，极限环境下支撑2万/s并发，节点接收报文常规为几byte，大报文可达到8k，节点支持分布式部署。则我们根据这些信息可以梳理我们需要测试的场景有：直接压测一台节点观察性能峰值、nginx负载一台节点的性能、nginx负载两台节点的性能、nginx负载三台节点的性能、报文场景为500字节、1KB、8KB、并发数为依次递增至1500并发(保证1000/s并发是否可以)，看是否满足常规业务处理能力，极限测试下并发数为2万，测试7*24小时，观察极限处理能力。</p><h3 id="1-3-4-测试环境梳理"><a href="#1-3-4-测试环境梳理" class="headerlink" title="1.3.4 测试环境梳理"></a>1.3.4 测试环境梳理</h3><p>根据测试场景以及梳理的被测系统、压力系统、压力机情况、给定的服务器数量，绘制测试环境搭建图谱即每个应用系统搭建数量、各节点所在机器，如下图梳理了整个系统部署的流程及每个应用、监控工具、测试工具应该部署的机器情况，让人一目了然。</p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOm7U5WUgaU7sX4jASQibic4jPBSYIv6TDMu6pFw0YVeZOX1twI6icvAaoDP4Wtb2EX85z9L3WQF1c8A/0?wx_fmt=png" alt="image">  </p><h3 id="1-3-5-测试数据梳理"><a href="#1-3-5-测试数据梳理" class="headerlink" title="1.3.5 测试数据梳理"></a>1.3.5 测试数据梳理</h3><p>这里的测试数据内容很广，可包括测试准备和测试执行阶段所需要的一切数据来源，如：测试脚本、测试参数化文件、测试账号、辅助性测试程序等，即让测试工作更加有条不紊的进行，而不是等到测试时才发现这个东西要去找，那个东西又没有弄得自己手忙脚乱，降低测试效率。比如，下面是一段造数据的存储过程脚本：</p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOm7U5WUgaU7sX4jASQibic4jkzEibsyblZZewQg6NRUr8ibq5FtKSF0M1PpgDPTOz0GZV3ibeN124wXng/0?wx_fmt=png" alt="image">  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>[TOC]</p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)  </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>性能测试方案设计思路总结</title>
    <link href="http://wysh.site/2016/07/07/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://wysh.site/2016/07/07/性能测试方案设计思路总结/</id>
    <published>2016-07-07T01:48:28.000Z</published>
    <updated>2018-05-01T08:43:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[TOC]  </p><h2 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h2><ol><li>测试目的</li></ol><p>为什么测？目的在于测试系统相关性能能否满足业务需求。通常分以下两种情况：  </p><p>1）新项目上线  </p><p>2）老项目优化  </p><p>如果是老项目优化，可考虑是否存有历史测试方案，如果有可以参考，或许可以省事很多。</p><ol start="2"><li>测试对象</li></ol><p>要测啥？  </p><p>测试对象可以归结为“业务功能”。测试前，需要了解我们需要测试的业务功能（不深入细节）有哪些，比如“购买商品”、“寄送快递”。  </p><p>有没有必要测？  </p><p>需求来源哪里？，有没有数据支撑测试这个需求的必要性？  </p><p>通常，可以从以下几个方面考虑：  </p><p>1）是否核心功能，是否要求严格的质量  </p><p>2）是否常用、高频使用的功能  </p><p>3）可能占用系统较多资源的功能  </p><p>4）使用人数多还是少  </p><p>5）在线人数多还是少  </p><ol start="3"><li>拆分对象</li></ol><p>先从业务上来分，实现这个完整的功能包含哪些流程、环节  </p><p>举例：购买商品  </p><p>登录-&gt;搜索商品-&gt;提交订单-&gt;支付订单-&gt;退出  </p><p>然后从功能实现上来看，怎么实现这个完整功能的。通常这些业务功能操作都对应着一个或多个请求(可能能是不同类型的请求，比如http, mysql等)，我们要做的是找出这些操作对应的请求，请求之间的顺序是怎么样的。  </p><ol start="4"><li>指标分析</li></ol><p>分析性能需求指标（如“支持300人并发登录”）是否合理  </p><p>有必要测试这个需求，考虑需求指标是否合理？有没有数据支撑？  </p><p>通常，支撑数据可以从以下方面考虑：  </p><p>1）采样时间段内系统使用人数  </p><p>2）采样时间段内系统在线人数  </p><p>3）采样时间段内系统(页面)访问量  </p><p>4）采样时间段内请求数<br>….</p><p>常用分析思路：  </p><p>1）2/8法则 </p><p>2/8法则：80%的业务量在20%的时间里完成。这里，业务量泛指访问量，请求数，数据量等  </p><p>2）正态分布  </p><p>3）按比例倍增  </p><p>4）响应时间2-5-8原则  </p><p>就是说，一般情况下，当用户能够在2秒以内得到响应时，会感觉系统的响应很快；当用户在2-5秒之间得到响应时，会赶紧系统的响应速度还可以；当用户在5-8秒以内得到响应时，会赶紧系统的速度很慢，但是还可以接受；而当用户在超过8秒后仍然无法得到响应时，会感觉系统糟糕透了，或者认为系统已经失去响应。  </p><p>注意：这个要根据实际情况，有些情况下时间长点也是可以接受的，好比12306  </p><p>举例：  </p><p>某公司后台监控，根据一段时间的采样数据，分析得出日高峰时段(11:00-14:00)用户下单请求数平均为1000，峰值为1500，根据这个计算并发请求数  </p><p>时段：3个小时 -&gt; 3 x 60 x 60 = 1080s  </p><p>业务量：1500  </p><p>吞吐量：1500 <em> 80% / (1080 </em> 20%) = 5.56请求数/s  </p><p>假设用户下单遵循正态分布，那么并发请求数峰值会肯定大于上述估算的吞吐量  </p><p>注意:  </p><p>1、2/8原则计算的结果并非在线并发用户数，是系统要达到的处理能力（吞吐量）  </p><p>2、如果要求更高系统性能，根据实际情况，也可以考虑1/9原则或其它更严格的算法  </p><p>3、以上估值只是大致的估算，不是精确值  </p><p>举例：  </p><p>想了下，暂时没想到啥好的例子，大致就说一些涉及到数据量的性能测试，比如报表统计，或者是大数据挖掘，查询等，怎么去估算数据量？  </p><p>数据生命周期：  </p><p>一般来说，数据都是有一定的生命周期的，时间的选取需要结合数据周期考虑。这里假设3年后系统性能仍然需要满足业务需求。  </p><p>数据增长率：  </p><p>如果是老项目，可以考虑对应功能主表历史数据存放情况  </p><p>这里假设按年统计，比如第一年 10000，第二年 15000，第三年 20000，第四年25000，那么我们得出，以第一年为基准，数据增长率分别为 0.5，1，1.5，每年在上一年的基础上，以5000的速度增长</p><p>预估3年后，数据增长率为 3，需要测试数据量为 （1+3）x 10000 = 40000  </p><p>注意：  </p><p>1、实际数据一般是没上面举例那么规律的，只能大致估算数据增长率。<br>2、一些大数据量的性能测试除了和数据量相关，还涉及到数据分布等，比如查询，构造数据时需要结合实际，尽量贴近实际。  </p><p>3、不同业务模块，涉及表不一样，数据量要求也是不一样的，需要有区别的对待。  </p><p>如果是新项目，那就比较不确定了，除非能收集相关数据。  </p><h2 id="二、系统分析"><a href="#二、系统分析" class="headerlink" title="二、系统分析"></a>二、系统分析</h2><p>结合需求分析中第3点，分析系统架构。 </p><p>1）请求顺序、请求之间相互调用关系  </p><p>2）数据流向，数据是怎么走的，经过哪些组件、服务器等  </p><p>3）预测可能存在性能瓶颈的环节（组件、服务器等）  </p><p>4）明确应用类型 IO型，还是CPU消耗性、内存消耗型-&gt;<br>弄清楚重点监控对象  </p><p>5）关注应用是否采用多进程、多线程架构-&gt;  多线程容易造成线程死锁、数据库死锁，数据不一致等  </p><p>6）是否使用集群/是否使用负载均衡</p><p>了解测试环境部署和生产环境部署差异，是否按1:1的比例部署  </p><p>通常建议测试时先不考虑集群，采用单机测试，测试通过后再考虑使用集群，这样有个比较，比较能说明问题  </p><p>参考阅读“浅谈web网站架构演变过程 ”：<a href="http://blog.csdn.net/qiaqia609/article/details/50809383" target="_blank" rel="noopener">http://blog.csdn.net/qiaqia609/article/details/50809383</a>  </p><h2 id="三、业务分析"><a href="#三、业务分析" class="headerlink" title="三、业务分析"></a>三、业务分析</h2><p>1）明确要测试的功能业务中，功能业务占比，重要程度。  </p><p>目的在于  </p><p><1>明确重点测试对象，安排测试优先级  </1></p><p><2>建模，混合场景中，虚拟用户资源分配，针对不同业务功能施加不同的负载。  </2></p><p>2）明确下“需求分析-指标分析”中相关业务功能所需基础数据及数据量问题，因为那块需求分析时可能只是大致估算下，评估指标是否合理，需要认真再分析下  </p><h2 id="四、用例设计"><a href="#四、用例设计" class="headerlink" title="四、用例设计"></a>四、用例设计</h2><p>1）用例设计  </p><p>通常是基于场景的测试用例设计  </p><p><1> 单业务功能场景  </1></p><p>运行测试期间，所有虚拟用户只执行同一种业务功能某个环节、操作 </p><p><2> 混合业务功能场景  </2></p><p>运行测试期间，部分虚拟用户执行某种业务的某个环节操作，部分虚拟用户执行该业务功能的其它环节或者运行测试期间，部分虚拟用户执行某种业务功能，部分虚拟用户执行其它业务功能  </p><blockquote><p>注：这里用例没说到多少用户去跑，跑多久等，这里只是把他当作相同场景用例下的的一组组测试数据了。  </p></blockquote><p>2）事务定义  </p><p>根据用例合理的定义事务，方便分析耗时（特别是混合业务功能场景测试），进而方便分析瓶颈。  </p><p>比如，购买商品，我们可以把下订单定义为一个事务，把支付也定义为一个事务。  </p><p>3）场景监控对象  </p><p>针对每条用例，结合“系统分析”第4）点，明确可能的压力点（比如数据库、WEB服务器），需要监控的对象，比如tps，耗时，CPU，内存，I/O等  </p><h2 id="五、测试策略"><a href="#五、测试策略" class="headerlink" title="五、测试策略"></a>五、测试策略</h2><p>1）先进行混合业务功能场景的测试，在考虑进行测试单业务功能场景的测试  </p><p>2）负载测试 -&gt; 压力测试-&gt; 稳定性测试-&gt; 强度测试  </p><p>注：如果测试稳定性，时间建议至少8小时；  </p><p>3）逐步加压  </p><p>比如开始前5分钟，20个用户，然后每隔5分钟，增加20个用户。  </p><p>好处：不仅比较真实的模拟现实环境，而且在性能指标比较模糊，且不知道服务器处理能力的情况下，可以帮我们确定一个大致基准，因为通常情况下，随着用户数的不断增加，服务器压力也会随着增加，如果服务器不够强大，那么就会出现不能及时处理请求、处理请求失败的情况下，对应的运行结果图形中，运行曲线也会出现对应的形态，比如从原本程一条稳定直线的情况，到突然极限下降、开始上下波动等，通过分析我们就能得出服务器大致处理能力，供后续测试参考。<br>4）单点并发  </p><p>比如使用集合点，单独针对某个环节的并发测试，通常是针对某个环节的性能调优时使用。  </p><p>常识：  </p><p>a) 负载测试  </p><p>保证系统能正常运行(通常是满足某些系统性能指标)的前提下，让被测对象承担不同的工作量，以评估被测对象的最大处理能力及存在缺陷而进行的测试  </p><p>b) 压力测试  </p><p>不保证系统能否正常运行的前提下，让被测对象承担不同工作量，以评估被测对象能提供的最大处理能力及存在缺陷而进行的测试  </p><p>c) 稳定性测试  </p><p>测试系统的长期稳定运行的能力。同疲劳强度测试的区别是，稳定性测试的压力强度较小，一般趋向于客户现场日常状态下的压力强度，当然在通过时间不能保证稳定性的状态下，需要加大压力强度来测试，此时的压力强度则会高于正常值。  </p><p>d) 强度测试  </p><p>通常模拟系统在较差、异常资源配置下运行，如人为降低系统工作环境所需要的资源,如网络带宽,系统内存,数据锁等等,以评估被测对象在资源不足的情况下的工作状态  </p><p>注：疲劳强度测试是一类特殊的强度测试，主要测试系统长时间运行后的性能表现，例如7x24小时的压力测试。  </p><h2 id="六、工具选取"><a href="#六、工具选取" class="headerlink" title="六、工具选取"></a>六、工具选取</h2><p>1）协议分析  </p><p>一般性能测试工具都是基于协议开发的，所以先要明确应用使用的协议  </p><p>2）工具选取  </p><p>1）类型  </p><p>开源工具、收费工具、自研工具  </p><p>2）分析工具  </p><p><1> 理解工具实现原理  </1></p><p><2> 采用用异步还是同步  </2></p><p>常识： </p><ol><li>同步请求：发出一个调用请求，在没有得到结果之前，该调用就不返回。</li><li>异步请求：发出一个调用请求，在没有得到请求结果之前，该调用可立即返回。该调用请求的处理者在处理完成后通过状态、通知和回调等来通知调用者。  </li></ol><p><3> 使用长连接还是短连接  </3></p><h2 id="七、-软件配置"><a href="#七、-软件配置" class="headerlink" title="七、 软件配置"></a>七、 软件配置</h2><p>1）操作系统  </p><p>内核版本、32 or 64位?  </p><p>2）应用版本  </p><p>应用版本要和线上保持一致，特别是中间件、组件等的版本，因为不同版本，其性能可能不一样  </p><p>3）参数配置  </p><p><1> 负载均衡、反向代理参数配置  </1></p><p><2> Web服务器参数配置  </2></p><p><3> 数据库服务器参数配置</3></p><h2 id="八、网络分析"><a href="#八、网络分析" class="headerlink" title="八、网络分析"></a>八、网络分析</h2><p>1）网络路由  </p><p>通常为了排除网络型瓶颈，通常建议在局域网下进行测试。  </p><p>通常，这里我的分析思路是这样的：  </p><p><1> 检查hosts文件的配置  </1></p><p>从终端压测机(负载生成机)开始，到请求目的服务器器，机器的hosts文件配置  </p><p>通常，hosts文件位于如下：  </p><p>Windows：C:\Windows\System32\drivers\etc\hosts<br>Unix/Linux：/etc/hosts  </p><p>小常识：  </p><p>1、通常域名访问站点，首先要通过DNS域名服务器把网络域名（形如<a href="http://www.xxx.com）解析成XXX.XXX.XXX.XXX的IP地址，然后继续后续访问。" target="_blank" rel="noopener">www.xxx.com）解析成XXX.XXX.XXX.XXX的IP地址，然后继续后续访问。</a><br>2、hosts存放了域名和ip地址的映射关系，如下  </p><p>性能测试方案设计思路总结  </p><p>使用hosts可以加快域名解析，在进行DNS请求以前，系统会先检查自己的hosts文件中是否有这个地址映射关系，如果有则把域名解析为映射的IP地址，不请求网络上的DNS服务器，如果没有再向已知的DNS 服务器提出域名解析。也就是说hosts的请求级别比DNS高，可加快域名解析。  </p><p><2> 检查DNS配置  </2></p><p>不同DNS，其速度和准确率是不一样的，比如114.114.114.114速度远比8.8.8.8快，如果有用到DNS（特别是压测机），需要考虑下是否适当  </p><p><3> 确保路由正确设置  </3></p><p>2）网络带宽  </p><p>如果没条件在局域网下测试，可能需要估算所需大致带宽。  </p><p>如果测试时是基于UI层操作的操作，那么得估算页面平均大小，这个可以通过浏览器自带工具查看打开单个页面服务器返回的请求数据大小。如果是测试时是基于接口层的请求测试，可以通过工具查看服务器响应数据大小。  </p><p>然后根据采集的页面PV峰值、请求数峰值进行计算。  </p><p>假设在 PV峰值、请求数峰值 = 1000，峰值时段：8:00 - 12:00，平均页面、请求大小 200k  </p><p>带宽 = 1000 x 80% / (20% x 4 x 3600s) x 200KB x /1024 x 8bit ,单位MBps  </p><p>注意： 这里涉及到浏览器缓存等因素，估值可能不准，大致估算。  </p><h2 id="九、硬件配置"><a href="#九、硬件配置" class="headerlink" title="九、硬件配置"></a>九、硬件配置</h2><p>1) CPU  </p><p>型号，频率，核数  </p><p>2) 内存  </p><p>3) 磁盘  </p><p>不同磁盘类型，读写速率不一样  </p><p>4) 网卡  </p><p>不同网卡，其传输速率也不一样  </p><p>注意：硬件配置最好和生产环境的配置保持一致  </p><h2 id="十、性能监控"><a href="#十、性能监控" class="headerlink" title="十、性能监控"></a>十、性能监控</h2><p>略  </p><p>注意：  </p><p>1） 这里监控不仅仅是服务器自身性能指标监控，如cpu，还包括事务耗时监控等  </p><p>2） 需要记录测试前各个性能指标数据，方便后续测试对比  </p><h2 id="十一、-实施测试"><a href="#十一、-实施测试" class="headerlink" title="十一、    实施测试"></a>十一、    实施测试</h2><p>略  </p><h2 id="十二、-结果分析"><a href="#十二、-结果分析" class="headerlink" title="十二、    结果分析"></a>十二、    结果分析</h2><p>如果是性能调优，还需同上一个版本的性能测试结果对比</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="性能测试" scheme="http://wysh.site/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="性能测试" scheme="http://wysh.site/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>性能测试体系的知识分享</title>
    <link href="http://wysh.site/2016/07/06/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%BD%93%E7%B3%BB%E7%9A%84%E7%9F%A5%E8%AF%86%E5%88%86%E4%BA%AB/"/>
    <id>http://wysh.site/2016/07/06/性能测试体系的知识分享/</id>
    <published>2016-07-06T14:28:47.000Z</published>
    <updated>2018-05-01T08:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="开始性能测试前需要了解的内容："><a href="#开始性能测试前需要了解的内容：" class="headerlink" title="开始性能测试前需要了解的内容："></a>开始性能测试前需要了解的内容：</h2><ol><li><p>项目具体需求。</p></li><li><p>指标：响应时间在多少以内，并发数多少，tps多少，总tps多少，稳定性交易总量多少，事务成功率，交易波动范围，稳定运行时长，资源利用率，测哪些交易，哪些接口,测试哪些场景。</p></li><li><p>环境：生产环境服务器数量，测试环境服务器数量，按照资源配比得出测试指标。</p></li><li><p>协议：系统用什么协议进行通讯。</p></li><li><p>压力机数量：如果并发用户数太多，需要把压力发到不同的压力机，不然可能会存在压力机瓶颈问题，导致tps和响应时间抖动。</p></li><li><p>交易占比：分析线上日志得出tps占比。</p></li><li><p>系统架构：请求流经过哪些环节，压测时监控这些环节。</p></li></ol><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><ol><li><p>基准：一个用户迭代100次，关注响应时间，事务成功率100%。</p></li><li><p>负载：10个用户跑10分钟，关注响应时间，事务成功率100%。</p></li><li><p>容量：估算一个总tps，根据公式计算出每个交易的pacing和vu，获取系统最大处理能力（最优容量），再令外测出三个梯度作为对比（两组小于最优容量，一组大于最优容量），四组容量VU等差，tps等差，对比每组容量实际占比和测试占比（越接近越能模拟真实场景），关注响应时间，总tps，tps，事务成功率，AP cpu利用率，DB cpu利用率，线程死锁，数据库死锁。  </p></li></ol><p>其中响应时间应小于负载测试时间，总tps应约等于预估总tps（相差不超过10是正常的），每个交易的tps应接近预估总tps*占比，事务成功率100%，AP cpu小于60%，DB cpu小于80%。dump线程栈检测是否有线程死锁，查看数据库日志看是否有数据库死锁。</p><ol start="4"><li>稳定性：采取最优容量的80%作为压力持续运行24小时，观察系统长时间运行的性能表现，关注响应时间，tps，总tps，事务成功率，交易总数，观察是否有内存溢出（堆溢出，栈溢出，持久代溢出），cpu利用率是否达标，mem是否不持续增长，是否能正常触发fullgc，gc时间，gc频率， fullgc时间，fullgc频率（重点关注，JVM调优就是为了减少fullgc频率）。</li></ol><h2 id="监控："><a href="#监控：" class="headerlink" title="监控："></a>监控：</h2><p>容量测试和稳定性测试时启动nmon监控。</p><h2 id="压测中遇到的性能问题及解决办法："><a href="#压测中遇到的性能问题及解决办法：" class="headerlink" title="压测中遇到的性能问题及解决办法："></a>压测中遇到的性能问题及解决办法：</h2><h3 id="一、容量测试过程中cpu过高"><a href="#一、容量测试过程中cpu过高" class="headerlink" title="一、容量测试过程中cpu过高"></a>一、容量测试过程中cpu过高</h3><ol><li><p>用vmstat实时监控cpu使用情况。很小的压力AP cpu却到了80%多，指标是不能超过60%。</p></li><li><p>分析是use cpu过高还是sys cpu过高，常见的是use cpu使用过高。</p></li><li><p>如果是sys cpu使用过高，先把消耗cpu最多的进程找出来（top命令），再找到该线程下消耗cpu过高的是哪几个线程，再把该线程转换成16进制，再用jstack命令来dump线程栈，看这个线程栈在调用什么东西导致use cpu过高。</p></li></ol><h3 id="二、内存溢出（堆溢出、栈溢出、持久代溢出）"><a href="#二、内存溢出（堆溢出、栈溢出、持久代溢出）" class="headerlink" title="二、内存溢出（堆溢出、栈溢出、持久代溢出）"></a>二、内存溢出（堆溢出、栈溢出、持久代溢出）</h3><ol><li>堆内存溢出</li></ol><p>1)稳定性压测一段时间后，LR报错，日志报java.lang.OutOfMemoryError.Java heap space。  </p><p>2)用jmap -histo pid命令dump堆内存使用情况，查看堆内存排名前20个对象，看是否有自己应用程序的方法，从最高的查起，如果有则检查该方法是什么原因造成堆内存溢出。 </p><p>3)如果前20里没有自己的方法，则用jmap -dump来dump堆内存，在用MAT分析dump下来的堆内存，分析导出内存溢出的方法。  </p><p>4)如果应用程序的方法没有问题，则需要修改JVM参数，修改xms，xmx，调整堆内存参数，一般是增加堆内存。  </p><ol start="2"><li>栈内存溢出</li></ol><p>1)稳定性压测一段时间后，LR报错，日志报Java.Lang.StackOverflowError。  </p><p>2)修改jvm参数，将xss参数改大，增加栈内存。  </p><p>3)栈溢出一定是做批量操作引起的，减少批处理数据量。  </p><ol start="3"><li>持久代溢出</li></ol><p>1)稳定性压测一定时间后，日志报Java.Lang.OutOfMenoryError.PermGen Space。  </p><p>2)这种原因是由于类、方法描述、字段描述、常量池、访问修饰符等一些静态变量太多，将持久代占满导致持久代溢出。  </p><p>3)修改jvm配置，将XX:MaxPermSize=256参数调大。尽量减少静态变量。  </p><h3 id="三、线程死锁"><a href="#三、线程死锁" class="headerlink" title="三、线程死锁"></a>三、线程死锁</h3><ol><li><p>容量测试压测一段时间后，LR报连接超时。</p></li><li><p>造成这种现象的原因很多，比如带宽不够，中间件线程池不够用，数据库连接池不够，连接数占满等都会造成连接不上而报超时错误。</p></li><li><p>jstack命令dump线程栈，搜索线程栈里有没有block，如果有的话就是线程死锁，找到死锁的线程，分析对应的代码。</p></li></ol><h3 id="四、数据库死锁"><a href="#四、数据库死锁" class="headerlink" title="四、数据库死锁"></a>四、数据库死锁</h3><ol><li><p>容量测试压测一段时间后，LR报连接超时。</p></li><li><p>造成这种现象的原因很多，比如带宽不够，中间件线程池不够用，数据库连接池不够，连接数占满等都会造成连接不上而报超时错误。</p></li><li><p>数据库日志中搜索block，能搜到block的话就是存在数据库死锁，找到日志，查看对应的sql，优化造成死锁的sql。</p></li></ol><h3 id="五、数据库连接池不释放"><a href="#五、数据库连接池不释放" class="headerlink" title="五、数据库连接池不释放"></a>五、数据库连接池不释放</h3><ol><li><p>容量测试压测一段时间后，LR报连接超时。</p></li><li><p>造成这种现象的原因很多，比如带宽不够，中间件线程池不够用，数据库连接池不够，连接数占满等都会造成连接不上而报超时错误。</p></li><li><p>去数据库查看应用程序到数据库的连接有多少个（ show full processlist），假如应用程序里面配置的数据库连接为30，在数据库查看应用程序到数据库的连接也是30，则表示连接池占满了。将配置改成90试试，去数据库看如果连接到了90，则可以确定是数据库连接池不释放导致的。查看代码，数据库连接部分是不是有创建连接但是没有关闭连接的情况。基本就是这种情况导致的，修改代码即可。</p></li></ol><h3 id="六、TPS上不去"><a href="#六、TPS上不去" class="headerlink" title="六、TPS上不去"></a>六、TPS上不去</h3><ol><li><p>压力大的时候tps频繁抖动，导致总tps上不去。查看是否有fullgc（tail -f gc_mSrv1.log | grep full）。</p></li><li><p>pacing设置太小也会导致tps上不去，对抖动大的交易多增加点用户即可。</p></li><li><p>tps抖动，单压抖动大的交易，发现很平稳，这时怀疑是不是压力太大导致，所以发容量的时候把压力最大的那只交易分到其他压力机，然后发现tps不抖动了。注意：多台压力机只影响tps抖动，不会影响服务器的cpu。</p></li><li><p>看响应时间有没有超时，看用户数够不够。</p></li></ol><h3 id="七、服务器压力不均衡（相差1-2-是正常的）"><a href="#七、服务器压力不均衡（相差1-2-是正常的）" class="headerlink" title="七、服务器压力不均衡（相差1%-2%是正常的）"></a>七、服务器压力不均衡（相差1%-2%是正常的）</h3><ol><li><p>跑最优容量的时候，四台AP只有一台cpu超过60%，其他三台都在60%以下。</p></li><li><p>查看服务器是否有定时任务。</p></li><li><p>查看是否存在压力机瓶颈。</p></li><li><p>是否存在带宽瓶颈（局域网不存在此问题）。</p></li><li><p>查看部署的版本，配置是否一样。</p></li><li><p>可能别人也在用这些AP，因为同一台物理机上有很多虚拟机，因为别人先用，资源被别人先占了。</p></li></ol><h3 id="八、fullgc时间太长"><a href="#八、fullgc时间太长" class="headerlink" title="八、fullgc时间太长"></a>八、fullgc时间太长</h3><ol><li><p>跑容量和稳定性的时候，出现LR报请求超时错误，查看后台日志是fullgc了，看LR几点报的错和日志里fullgc的时间是否对应，fullgc会暂停整个应用程序，导致LR前端没响应，所以报错，这时可以减少old代内存，从而减少fullgc时间，减少fullgc时间LR就不会报错，让用户几乎感觉不到应用程序暂停。</p></li><li><p>四台AP轮流着full gc（部分server fullgc，其他server也会fullgc），这时可以制定策略让不同的server不同时fullgc，或者等夜间交易量少时写定时任务重启服务。</p></li></ol><p><strong>注意：</strong></p><p>服务器日志为error下测试。  </p><p>服务启动后几分钟内发压压力会很大，最好是服务启动两三分钟后再开始跑压力。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="性能测试" scheme="http://wysh.site/categories/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="性能测试" scheme="http://wysh.site/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>如何写一个好的缺陷（Defect）报告</title>
    <link href="http://wysh.site/2016/05/15/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AA%E5%A5%BD%E7%9A%84%E7%BC%BA%E9%99%B7%EF%BC%88Defect%EF%BC%89%E6%8A%A5%E5%91%8A/"/>
    <id>http://wysh.site/2016/05/15/如何写一个好的缺陷（Defect）报告/</id>
    <published>2016-05-15T08:26:34.000Z</published>
    <updated>2018-05-01T17:48:26.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编写缺陷报告是测试人员的日常工作，好的缺陷报告能够让开发人员更容易理解，更快速的定位问题；不好的缺陷报告可能会误导调查方向，增加沟通成本。那么一个好的缺陷报告应该包括哪些方面呢？</p><p>请看我的mindmap：  </p><p><img src="http://img.chuansong.me/mmbiz/WCT55FM5HdPhhtqfUJ0Yc6vXYN8EqbH7Hl7ZZ7iaVLjj5uv1gTKDMIhgToAyu7lIiazooWc1fhMScC9hP2gAqliaA/0?wx_fmt=png" alt="image"></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a><strong>标题</strong></h2><ol><li>首先要做一个“标题党”（此标题党非彼标题党）。标题一定要清晰简洁易理解，不应该臃长</li><li>尽量前缀要规范，例如模板： [Product][Version]<em>[Feature]</em>[Title]，这样描述会很清晰，也方便查找</li><li>缺陷的标题一定要描述在什么情况下发生了什么问题</li><li>尽量避免使用人称（比如you, I等等）</li></ol><p>缺陷标题的例子： DemoApp 1.0_Login_Cannot enter username by copy/paste enternal string  </p><p>这个标题包含了产品名，版本号，模块，发生了什么（cannot enter username),什么情况下(copy/paste enternal string)   </p><h2 id="描述或总结"><a href="#描述或总结" class="headerlink" title="描述或总结"></a><strong>描述或总结</strong></h2><p>描述或总结这个模块可以用来描述标题不能容纳的更详细的内容，它可以包括很多方面，比如相关、历史版本是否重现、用户操作等。目的是更清晰详细的描述缺陷。  </p><h2 id="影响"><a href="#影响" class="headerlink" title="影响"></a><strong>影响</strong></h2><p>这部分用以描述该缺陷对用户实际应用中的影响。　</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a><strong>前置条件</strong></h2><p>　　用以描述在重现缺陷之前环境、数据或者其他的一些特殊需求。</p><h2 id="重现步骤"><a href="#重现步骤" class="headerlink" title="重现步骤"></a><strong>重现步骤</strong></h2><p>　　从用户角度出发来描述重现步骤，步与步之间不应该有太大的业务跳跃，最好是连贯的。</p><p>例如：  </p><p>Repro Steps：  </p><ol><li><p>Open DemoApp to enter Login screen</p></li><li><p>Copy username from enternal file</p></li><li><p>Paster username to username field of Login Screen</p></li></ol><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a><strong>结果</strong></h2><p>　　结果可以分为“期望结果”和“实际结果”，结果可以有多个，也可以穿插在重现步骤之间（比如重现步骤中有多个缺陷的问题）</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a><strong>优先级</strong></h2><p>凡事都有轻重缓急，缺陷也是，需要标明缺陷优先级和紧急程度，以便开发团队决定先做还是延后。</p><h2 id="重现频率"><a href="#重现频率" class="headerlink" title="重现频率"></a><strong>重现频率</strong></h2><p>　　当然，大部分的缺陷是可以100%重现的，对于少数缺陷可能很难重现，或者不太容易重现，这就要标明重现的几率，比如50%。往往这种缺陷需要提供详细的日志文件，以便从日志角度获取重现或者解决突破口。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a><strong>附件</strong></h2><p>　　附件非常重要！附件的格式可以多种多样，图片，日志文件，视频等。除了可以提供直观的认识（图片，视频），还可以有更多的信息（缺陷讨论邮件，日志等）。</p><h2 id="变通方案（Workaround）"><a href="#变通方案（Workaround）" class="headerlink" title="变通方案（Workaround）"></a><strong>变通方案（Workaround）</strong></h2><p>　　变通方案是提供一种绕过当前问题而使用其它的产品功能的一种方式。这样客户就可以在缺陷未解决的情况下继续使用产品。  　　</p><p>发生原因分析（Root Cause Analysis）  </p><p>描述从代码角度，该缺陷是如何发生的。能做到这一步的测试人员需要有较高的读写代码的能力。  </p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a><strong>环境配置</strong></h2><p>用以描述测试环境的配置，比如OS，相应产品版本等。  </p><p>那么，问题来了！缺陷包括这么多方面，如果每个缺陷都这么写，要耗费多少effort啊！！！（毕竟测试时最忙的！）  </p><p>个人认为没有必要每个都这么写，毕竟写缺陷报告对客户来说没有value。缺陷报告是缺陷的信息载体，它存在的意义是用于更好、更清楚的进行开发团<br>队之间的沟通和以后的回顾，写到什么程度还是需要根据实际情况有所取舍。（比如Root cause analysis在时间不富裕的情况下可以忽略等）  </p><p><strong>综合以上的方面，下边是一个模板，希望对大家有所帮助。</strong>  </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Title</span>:   [Product][Version]_[Feature]_Title</span><br><span class="line"></span><br><span class="line">Description/<span class="attribute">Summary</span>:</span><br><span class="line"></span><br><span class="line"><span class="attribute">Impact</span>:</span><br><span class="line"></span><br><span class="line">Priority/<span class="attribute">Severity</span>:</span><br><span class="line"></span><br><span class="line">      Critical</span><br><span class="line"></span><br><span class="line"><span class="attribute">Frequency</span>:</span><br><span class="line"></span><br><span class="line">     <span class="number">100%</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Precondition</span>:</span><br><span class="line"></span><br><span class="line">Repro <span class="attribute">Steps</span>:</span><br><span class="line"></span><br><span class="line">     step <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">     step <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">     Expected <span class="attribute">Result</span>:</span><br><span class="line"></span><br><span class="line">     Actual <span class="attribute">Result</span>:</span><br><span class="line"></span><br><span class="line">     step <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line">Expected <span class="attribute">Result</span>:</span><br><span class="line"></span><br><span class="line">Actual <span class="attribute">Result</span>:</span><br><span class="line"></span><br><span class="line">Root Cause <span class="attribute">Analysis</span>:</span><br><span class="line"></span><br><span class="line"><span class="attribute">Workaround</span>:</span><br><span class="line"></span><br><span class="line"><span class="attribute">Environment</span>:</span><br><span class="line"></span><br><span class="line"><span class="attribute">Attchment</span>:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="测试文档" scheme="http://wysh.site/categories/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="测试文档" scheme="http://wysh.site/tags/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>如何制定测试策略</title>
    <link href="http://wysh.site/2016/05/14/%E5%A6%82%E4%BD%95%E5%88%B6%E5%AE%9A%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5/"/>
    <id>http://wysh.site/2016/05/14/如何制定测试策略/</id>
    <published>2016-05-13T23:47:26.000Z</published>
    <updated>2018-04-30T20:20:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>测试策略是描述测试项目和测试任务之间的关系。它用来说明要测什么，如何测，如何协调测试资源和测试时间等。测试策略制定的是否合理高效会对测试项目的进度产生很大的影响。那么，如何制定一个好的测试策略并且能防止遗漏呢？一个好的测试策略又包含哪些方面呢？下面我给出一个平时经常使用的一个模板供大家参考  </p></blockquote><p><img src="http://img.chuansong.me/mmbiz/WCT55FM5HdN5gANDMjcD8e9CBjZD95AL28lVbZMbOQsvDj5zevIYZEkuib3iclp3OGbtkAwlUiaojdyFhUGvicGZBQ/0?wx_fmt=jpeg" alt="image">  </p><p>大将测试策略分为了一下几个模块：</p><h2 id="1-测试安排、发布计划"><a href="#1-测试安排、发布计划" class="headerlink" title="1. 测试安排、发布计划"></a>1. 测试安排、发布计划</h2><p>这个模块用来罗列测试项目本身重要的里程碑，每个里程碑都需要有明确的结束时间，这个时间可以指导我们后续的测试。如果测试时间安排不足，我们就可以在后续的测试范围中挑选优先级比较高的特性来执行测试，这样可以最大限度的保证产品的质量。</p><h2 id="2-测试范围（按优先级排列）"><a href="#2-测试范围（按优先级排列）" class="headerlink" title="2. 测试范围（按优先级排列）"></a>2. 测试范围（按优先级排列）</h2><p>这一部分分为InScope和Out Of Scope.这一部分需要说明哪些产品模块是在测试范围中的，哪些是本阶段测试不考虑的。对于在测试范围中的模块，需要给出优先级以便相应测试时间不足的情况；对于不在测试范围中的模块，需要给出原因（为什么在本测试阶段不考虑测）。</p><h2 id="3-测试资源"><a href="#3-测试资源" class="headerlink" title="3. 测试资源"></a>3. 测试资源</h2><p>测试资源在测试策略中也是很重要的一环，它分为人力和工具两部分。人力资源主要说明参与测试的人员，当然可以包括很多的角色，如何专业测试人员，客户，产品经理等。工具主要是指可能用到其他软件（可能需要license）。</p><h2 id="4-测试环境"><a href="#4-测试环境" class="headerlink" title="4. 测试环境"></a>4. 测试环境</h2><p>测试环境主要包括推荐环境解决方案，操作系统要求，软硬件要求。</p><p>对于推荐解决方案，需要陈述的是对测试项目对其他软件的依赖，比如测试项目对.Net有依赖，这时我们可能给出的推荐版本可能就是4.5.2，在之后的测试中主要是针对4.5.2进行验证，而对其他版本进行简单验证，这样在产品文档中给出4.5.2的推荐方案，主要是为了说明4.5.2是没问题的，其他版本不保证。</p><p>操作系统主要是说明对windows或者其他操作系统的版本的支持情况。</p><h2 id="5-测试方法"><a href="#5-测试方法" class="headerlink" title="5. 测试方法"></a>5. 测试方法</h2><p>测试方法的罗列主要是为了说明针对测试项目我们要开展哪些类型的测试，功能测试是必须的，非功能测试是可选的。（相信各位童鞋对测试方法都已经倒背如流了，就不一一介绍了）</p><h2 id="6-用例设计方法"><a href="#6-用例设计方法" class="headerlink" title="6. 用例设计方法"></a>6. 用例设计方法</h2><p>用例设计大家也很清楚了，不再介绍了。</p><h2 id="7-文档管理"><a href="#7-文档管理" class="headerlink" title="7. 文档管理"></a>7. 文档管理</h2><p>对于一个完整的产品来说，文档是很重要的一环。它一般包括安装、升级文档，用户指南等。文档不单单是一个文件，它需要经过完整的测试才能发布给客户。差的文档很可能会误导用户，从而使他们对测试项目失去信心（虽然客户很少看文档……：））</p><h2 id="8-风险管理"><a href="#8-风险管理" class="headerlink" title="8. 风险管理"></a>8. 风险管理</h2><p>风险管理模块需要罗列出来现在已知的可能会出现不确定性的因素，这些因素可能来自技术，资源或者其他方面的。</p><h2 id="9-发布包验证"><a href="#9-发布包验证" class="headerlink" title="9. 发布包验证"></a>9. 发布包验证</h2><p>这部分有一定的特殊性，并不适用于所有的产品。这部分主要是对测试项目安装包进行验证，防止在制作ISO文件的过程中产生变动。  </p><p>就写这些吧，希望大家在看了这9个模块后能找到文章开头两个问题的答案。也非常欢迎大家提出改进意见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="用例设计" scheme="http://wysh.site/categories/%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="用例设计" scheme="http://wysh.site/tags/%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>测试设计中需要考虑的22种测试类型</title>
    <link href="http://wysh.site/2016/05/09/%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E4%B8%AD%E9%9C%80%E8%A6%81%E8%80%83%E8%99%91%E7%9A%8422%E7%A7%8D%E6%B5%8B%E8%AF%95%E7%B1%BB%E5%9E%8B/"/>
    <id>http://wysh.site/2016/05/09/测试设计中需要考虑的22种测试类型/</id>
    <published>2016-05-09T13:04:25.000Z</published>
    <updated>2018-04-30T19:52:36.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>黑盒测试：不基于内部设计和代码的任何知识，而是基于需求和功能性。</p></li><li><p>白盒测试：基于一个应用代码的内部逻辑知识，测试是基于覆盖全部代码、分支、路径、条件。</p></li><li><p>单元测试：最微小规模的测试；以测试某个功能或代码块。典型地由程序员而非测试员来做，因为它需要知道内部程序设计和编码的细节知识。这个工作不容易作好，除非应用系统有一个设计很好的体系结构;还可能需要开发测试驱动器模块或测试套具。</p></li><li><p>累积综合测试：当一个新功能增加后，对应用系统所做的连续测试。它要求应用系统的不同形态的功能能够足够独立以可以在全部系统完成前能分别工作，或当需要时那些测试驱动器已被开发出来;这种测试可由程序员或测试员来做。</p></li><li><p>集成测试：一个应用系统的各个部件的联合测试，以决定他们能否在一起共同工作。部件可以是代码块、独立的应用、网络上的客户端或服务器端程序。这种类型的测试尤其与客户服务器和分布式系统有关。</p></li><li><p>功能测试：用于测试应用系统的功能需求的黑盒测试方法。这类测试应由测试员做，这并不意味着程序员在发布前不必检查他们的代码能否工作(自然他能用于测试的各个阶段)。</p></li><li><p>系统测试：基于系统整体需求说明书的黑盒类测试；应覆盖系统所有联合的部件。</p></li><li><p>端到端测试：类似于系统测试；测试级的“宏大”的端点；涉及整个应用系统环境在一个现实世界使用时的模拟情形的所有测试。例如与数据库对话，用网络通讯，或与外部硬件、应用系统或适当的系统对话。</p></li><li><p>健全测试：典型地是指一个初始化的测试工作，以决定一个新的软件版本测试是否足以执行下一步大的测试努力。例如，如果一个新版软件每5分钟与系统冲突，使系统陷于泥潭，说明该软件不够“健全”，目前不具备进一步测试的条件。</p></li><li><p>衰竭测试：软件或环境的修复或更正后的“再测试”。可能很难确定需要多少遍再次测试。尤其在接近开发周期结束时。自动测试工具对这类测试尤其有用。</p></li><li><p>接受测试：基于客户或最终用户的规格书的最终测试，或基于用户一段时间的使用后，看软件是否满足客户要求。</p></li><li><p>负载测试：测试一个应用在重负荷下的表现，例如测试一个Web站点在大量的负荷下，何时系统的响应会退化或失败。</p></li><li><p>强迫测试：在交替进行负荷和性能测试时常用的术语。也用于描述象在异乎寻常的重载下的系统功能测试之类的测试，如某个动作或输入大量的重复，大量数据的输入，对一个数据库系统大量的复杂查询等。</p></li><li><p>性能测试：在交替进行负荷和强迫测试时常用的术语。理想的“性能测试”(和其他类型的测试)应在需求文档或质量保证、测试计划中定义。</p></li><li><p>可用性测试：对“用户友好性”的测试。显然这是主观的，且将取决于目标最终用户或客户。用户面谈、调查、用户对话的录象和其他一些技术都可使用。程序员和测试员通常都不宜作可用性测试员。</p></li><li><p>安装/卸载测试：对软件的全部、部分或升级安装/卸载处理过程的测试。</p></li><li><p>恢复测试：测试一个系统从如下灾难中能否很好地恢复，如遇到系统崩溃、硬件损坏或其他灾难性问题。</p></li><li><p>安全测试：测试系统在防止非授权的内部或外部用户的访问或故意破坏等情况时怎么样。这可能需要复杂的测试技术。</p></li><li><p>兼容测试：测试软件在一个特定的硬件/软件/操作系统/网络等环境下的性能如何。</p></li><li><p>比较测试：与竞争伙伴的产品的比较测试，如软件的弱点、优点或实力。</p></li><li><p>Alpha测试：在系统开发接近完成时对应用系统的测试；测试后，仍然会有少量的设计变更。这种测试一般由最终用户或其他人员员完成，不能由程序员或测试员完成。</p></li><li><p>Beta测试：当开发和测试根本完成时所做的测试，而最终的错误和问题需要在最终发行前找到。这种测试一般由最终用户或其他人员员完成，不能由程序员或测试员完成。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="用例设计" scheme="http://wysh.site/categories/%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="用例设计" scheme="http://wysh.site/tags/%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Web端测试和移动端测试的区别</title>
    <link href="http://wysh.site/2016/05/09/Web%E7%AB%AF%E6%B5%8B%E8%AF%95%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%B5%8B%E8%AF%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://wysh.site/2016/05/09/Web端测试和移动端测试的区别/</id>
    <published>2016-05-09T04:58:05.000Z</published>
    <updated>2018-04-30T19:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前参加的项目有涉及Web端测试和移动端测试，简单的记录下他们之间的区别：  </p><h4 id="1、记录bug"><a href="#1、记录bug" class="headerlink" title="1、记录bug"></a>1、记录bug</h4><p>在Web端可以通过系统自带的截图和QQ截图等方式来截取bug的图片，对于错误的地方可以用工具自带的标识来重点标记。  </p><p>对于移动端设备可以用手机自带的截图工具来截图然后传到电脑上，个人一般习惯安装微信的windows版本，通过文件传输助手发送到PC端。还有一种比较便捷的方式，将手机用数据线连接到电脑，本地配置android的运行环境，下载asm.jar,在cmd运行java -jar asm.jar，即可实时同步手机端画面，对有bug的页面直接使用PC端的截图工具进行截图（该工具在另一篇文章中会具体介绍）。IOS可以在PC安装itools，要额可以同步画面。  </p><p>对于记录bug建议：  </p><p>bug主题尽量的言简意骇，在bug描述中可以详细描述，对于操作步骤比较复杂的bug要详细的写上操作步骤。必要时附带上相关的log，记录上测试的环境，手机版本等等。对于必现喝非必现的bug也要详细说明，减少不必要的沟通成本。  </p><h4 id="2、测试环境"><a href="#2、测试环境" class="headerlink" title="2、测试环境"></a>2、测试环境</h4><p>Web端的测试环境很多时候是通过hosts进行切换，switchhosts工具可以方便的切换需要的host，但是移动端设置起来比较复杂，比较简单的方式是电脑端设置代理，手机端直接连接代理。注意，手机和电脑必须连接同一个网络。  </p><p>设置代理推荐使用Fiddle，可以抓到手机端的数据包。  </p><h4 id="3、兼容性"><a href="#3、兼容性" class="headerlink" title="3、兼容性"></a>3、兼容性</h4><p>web端的测试一般都是主要使用一种浏览器，待系统基本稳定的时候，再去专门测试浏览器的兼容性。  </p><p>但是，对移动端来说，这样的方式是行不通的，因为移动端主要分为安卓和IOS，而这两端出现的问题一般是不一致的，一致的问题主要是数据问题，这时候是需要后台处理的，所以我们测试的时候需要两端都重点测试，而不会出现先着重测试某一端的问题。  </p><p>注：一般方式是在测试一端时，出现问题则立马查看另一端是否也有这个问题。  </p><h4 id="4、移动端的特性"><a href="#4、移动端的特性" class="headerlink" title="4、移动端的特性"></a>4、移动端的特性</h4><p>移动端与web端相比较来说，移动端有很多自己的特性：  </p><ol><li>网络种类多 </li></ol><p>移动端有多种网络：无线网络、2G、3G、4G等，断网、网速较差及网络之间的切换时页面的显示等，这些对于移动端来说很重要。此外，在非wifi下，还需要注意网络使用量问题。</p><ol start="2"><li>间断问题  </li></ol><p>移动端有一个很重要的问题，一般情况下在使用软件的过程并不是长久的，这中间可能发生很多中断，如电话、短信、通知、断电等等，软件需要特殊处理这些特殊情况。  </p><p>打开一个页面，或在操作的过程中（点击一个按钮后），将手机屏幕锁住，再打开时，应用能否正常处理。  </p><ol start="3"><li>屏幕的限制</li></ol><p>图片及文字的显示；上传不同的图片尺寸显示是否正常；图片和文字一起显示时，效果如何。  </p><p>操作区域；web端的应用，一般不会受到屏幕的限制，而且通过鼠标操作更加准确。但是移动端由于屏幕较小，页面及按钮会受到屏幕大小的限制，再加上用户都是通过手指进行操作，一些按钮、选择框等是否容易点击，多个可点区域位置较近时，点击部位稍微偏移，也许就会造成不同的结果，这种情况下是否可以达到预先的效果。  </p><ol start="4"><li>软件启动运行</li></ol><p>移动端启动、卸载、升级几个特性，这是比较常见、也很重要的，比如升级时用户的数据怎么办，卸载后用户的数据怎么处理，卸载再安装用户登录数据的显示等。  </p><ol start="5"><li>手势</li></ol><p>移动端还有一大特性，就是移动端有自己比较简单的手势，用户可以通过手势进行一个操作，比如左滑删除、右滑返回上一个页面、左右滑动图片等，软件需要对这个手势进行适配。  </p><ol start="6"><li>分享</li></ol><p>移动端一般会装有很多软件，用户下单或者产品有活动时，用户都会进行分享，但是分享时的权限、软件是否存在等问题，需要特殊处理测试。一般的软件或应用，都会开放一部分页面，允许用户不登录时即可访问，而有些页面是必须要求用户登录的，主要针对这两种权限不同的页面做分享，然后通过分享进入本页面，查看权限的控制是否正常。</p><ol start="7"><li>web和移动端的同步</li></ol><p>用户在web端的操作，在移动端是否可以正常的进行同步、显示；在移动端的操作，用户登录web账号，信息是否同步等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="测试理论" scheme="http://wysh.site/categories/%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="测试理论" scheme="http://wysh.site/tags/%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
</feed>
