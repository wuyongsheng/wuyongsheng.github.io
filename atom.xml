<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vincent&#39;s Home</title>
  
  <subtitle>欢迎访问！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wysh.site/"/>
  <updated>2018-12-03T15:53:22.000Z</updated>
  <id>http://wysh.site/</id>
  
  <author>
    <name>吴勇胜（Vincent）</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>性能测试工具Locust的简单实用</title>
    <link href="http://wysh.site/2018/12/03/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Locust%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8/"/>
    <id>http://wysh.site/2018/12/03/性能测试工具Locust的简单实用/</id>
    <published>2018-12-03T12:48:16.000Z</published>
    <updated>2018-12-03T15:53:22.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>这段时间接触了一款新的性能测试工具：Locust，和Loadrunner及Jmeter一样，也是一款很好的性能测试工具。</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>在Locust测试框架中，测试场景是采用纯Python脚本进行描述的。对于最常见的HTTP(S)协议的系统，Locust采用Python的requests库作为客户端，使得脚本编写大大简化，富有表现力的同时且极具美感。而对于其它协议类型的系统，Locust也提供了接口，只要我们能采用Python编写对应的请求客户端，就能方便地采用Locust实现压力测试。从这个角度来说，Locust可以用于压测任意类型的系统。</p><p>在模拟有效并发方面，Locust的优势在于其摒弃了进程和线程，完全基于事件驱动，使用gevent提供的非阻塞IO和coroutine来实现网络层的并发请求，因此即使是单台压力机也能产生数千并发请求数；再加上对分布式运行的支持，理论上来说，Locust能在使用较少压力机的前提下支持极高并发数的测试。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用pip命令安装Locust</p><p>pip install locustio</p><p>安装完成后，检测是否安装成功</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;locust  -help</span><br><span class="line">Usage: locust [options] [LocustClass [LocustClass2 ... ]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -h, --help            show this help <span class="keyword">message</span> <span class="keyword">and</span> <span class="keyword">exit</span></span><br><span class="line">  -H HOST, --host=HOST  Host <span class="keyword">to</span> load test <span class="keyword">in</span> the following format:</span><br><span class="line">                        http:<span class="comment">//10.21.32.33</span></span><br><span class="line">  --web-host=WEB_HOST   Host <span class="keyword">to</span> bind the web <span class="keyword">interface</span> <span class="keyword">to</span>. Defaults <span class="keyword">to</span></span><br><span class="line"> <span class="string">''</span> (all</span><br><span class="line">                        interfaces)</span><br><span class="line">  -P PORT, --port=PORT, --web-port=PORT</span><br><span class="line">                        Port <span class="keyword">on</span> which <span class="keyword">to</span> run web host</span><br><span class="line">  -f LOCUSTFILE, --locustfile=LOCUSTFILE</span><br><span class="line">                        Python module <span class="keyword">file</span> <span class="keyword">to</span> import, e.g. <span class="string">'../other.p</span></span><br><span class="line"><span class="string">y'</span>.</span><br><span class="line">                        <span class="keyword">Default</span>: locustfile</span><br><span class="line">  --csv=CSVFILEBASE, --csv-base-<span class="keyword">name</span>=CSVFILEBASE</span><br><span class="line">                        Store current request stats <span class="keyword">to</span> files <span class="keyword">in</span> CSV fo</span><br><span class="line">rmat.</span><br><span class="line">  --master              <span class="keyword">Set</span> locust <span class="keyword">to</span> run <span class="keyword">in</span> distributed mode <span class="keyword">with</span> thi</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h3 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h3><h4 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h4><p>对Django rest api 进行测试</p><p>Django 的安装，菜鸟教程有介绍</p><p><a href="http://www.runoob.com/django/django-install.html" target="_blank" rel="noopener">http://www.runoob.com/django/django-install.html</a></p><p>安装完成后，使用如下命令启动，</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">D</span>:\<span class="selector-tag">django_restful</span>&gt;<span class="selector-tag">python3</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:9000</span></span><br></pre></td></tr></table></figure><p>启动完成之后，在浏览器中输入如下地址，就可以访问api接口：</p><p><a href="http://127.0.0.1:9000/" target="_blank" rel="noopener">http://127.0.0.1:9000/</a></p><p>如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-7c81bf49d7d77c15.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Django.jpg"></p><p>点击其中的 users 和 groups 链接，会分别显示相应的用户和组的信息，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b6ae63aff585b937.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="users.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-125041ec48a13dbb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="groups.jpg"></p><p>本次针对如下两个接口进行测试：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"users"</span>: <span class="string">"http://127.0.0.1:9000/users/"</span>,</span><br><span class="line"><span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:9000/groups/"</span></span><br></pre></td></tr></table></figure><h4 id="编写简单的测试脚本"><a href="#编写简单的测试脚本" class="headerlink" title="编写简单的测试脚本"></a>编写简单的测试脚本</h4><p>创建 locust_test.py 文件，通过 Python 编写性能测试脚本。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from locust import HttpLocust,TaskSet,task</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span>(<span class="title">TaskSet</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.users_index=<span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.groups_index=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    @task(<span class="number">2</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_users</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        users_id=<span class="keyword">self</span>.locust.id[<span class="keyword">self</span>.users_index]</span><br><span class="line">        url=<span class="string">'/users/'</span>+str(users_id)+<span class="string">'/'</span></span><br><span class="line">        <span class="keyword">self</span>.client.get(url,auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>))</span><br><span class="line">        <span class="keyword">self</span>.users_index=(<span class="keyword">self</span>.users_index+<span class="number">1</span>)%len(<span class="keyword">self</span>.locust.id)</span><br><span class="line"></span><br><span class="line">    @task(<span class="number">1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_groups</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        groups_id=<span class="keyword">self</span>.locust.id[<span class="keyword">self</span>.groups_index]</span><br><span class="line">        url=<span class="string">'/groups/'</span>+str(groups_id)+<span class="string">'/'</span></span><br><span class="line">        <span class="keyword">self</span>.client.get(url,auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>))</span><br><span class="line">        <span class="keyword">self</span>.groups_index=(<span class="keyword">self</span>.groups_index+<span class="number">1</span>)%len(<span class="keyword">self</span>.locust.id)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span>(<span class="title">HttpLocust</span>):</span></span><br><span class="line">    task_set = UserBehavior</span><br><span class="line">    id=[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">    min_wait = <span class="number">3000</span></span><br><span class="line">    max_wait = <span class="number">6000</span></span><br><span class="line">    host = <span class="string">'http://127.0.0.1:9000'</span></span><br></pre></td></tr></table></figure><p>那么，如上Python脚本是如何表达出以上测试场景的呢？</p><ul><li><p>从脚本中可以看出，脚本主要包含两个类，一个是WebsiteUser（继承自HttpLocust，而HttpLocust继承自Locust），另一个是UserBehavior（继承自TaskSet）。事实上，在Locust的测试脚本中，所有业务测试场景都是在Locust和TaskSet两个类的继承子类中进行描述的。</p></li><li><p>task:装饰该方法为一个事务后面的数字表示请求比例,上面的比例为2:1默认都是1:1</p></li><li>test_ users()方法表示个用户行为,这里是请求user接口。</li><li>test_ groups()方法表示请求 group接口</li><li>client.get()用于指定请求的路径</li><li>Websiteuser类用于设置性能测试。</li><li>task_set:指向一个定义的用户行为类。</li><li>min wait:执行事务之间用户等待时间的下界(单位:亳秒)</li><li>max wait:执行事务之间用户等待时间的上界(单位:亳秒)</li></ul><h4 id="执行性能测试"><a href="#执行性能测试" class="headerlink" title="执行性能测试"></a>执行性能测试</h4><p>Locust脚本调试通过后，就算是完成了所有准备工作，可以开始进行压力测试了。</p><p>使用如下命令，开始执行性能测试：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">locust -f <span class="symbol">D:</span>\PycharmProjects\locust\locust_test.py --host</span><br><span class="line">=ht<span class="symbol">tp:</span>//<span class="number">127.0</span>.<span class="number">0.1</span><span class="symbol">:9000</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/12273007-052fa96eba4d3414.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动locust.jpg"></p><p>参数说明：</p><p>Locust是通过在Terminal中执行命令进行启动的，通用的参数有如下两个：</p><ul><li>-H, –host：被测系统的host，若在Terminal中不进行指定，就需要在Locust子类中通过host参数进行指定</li><li>-f, –locustfile：指定执行的Locust脚本文件</li></ul><h4 id="设置测试"><a href="#设置测试" class="headerlink" title="设置测试"></a>设置测试</h4><p>通过浏览器访问：<a href="http://localhost:8089（Locust启动网络监控器，默认为端口号为" target="_blank" rel="noopener">http://localhost:8089（Locust启动网络监控器，默认为端口号为</a>: 8089），如果要使用其它端口，就可以在上面的启动命令中使用如下参数进行指定：-P, –port：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9bb0cdbf1a1becff.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置locust.jpg"></p><p>在Locust的Web管理页面中，需要配置的参数只有两个：</p><ul><li>Number of users to simulate: 设置并发用户数，对应中no_web模式的-c, –clients参数；</li><li>Hatch rate (users spawned/second): 启动虚拟用户的速率，对应着no_web模式的-r, –hatch-rate参数。</li><li>参数配置完毕后，点击【Start swarming】即可开始测试。</li></ul><p>运行之后，可以看到主界面如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-5c8e088a8f726315.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行的界面.jpg"></p><p>性能测试参数</p><ul><li><p>Type： 请求的类型，例如GET/POST。</p></li><li><p>Name：请求的路径。</p></li><li><p>request：当前请求的数量。</p></li><li><p>fails：当前请求失败的数量。</p></li><li><p>Median：中间值，单位毫秒，一半的服务器响应时间低于该值，而另一半高于该值。</p></li><li><p>Average：平均值，单位毫秒，所有请求的平均响应时间。</p></li><li><p>Min：请求的最小服务器响应时间，单位毫秒。</p></li><li><p>Max：请求的最大服务器响应时间，单位毫秒。</p></li><li><p>Content Size：单个请求的大小，单位字节。</p></li><li><p>reqs/sec：是每秒钟请求的个数。</p></li></ul><p>点击Chart菜单，可以查看性能图表</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-7328063025899c76.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="饼图.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Locust" scheme="http://wysh.site/categories/Locust/"/>
    
      <category term="性能测试测试" scheme="http://wysh.site/categories/Locust/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/Locust/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%8B%E8%AF%95/Python/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于Django Rest API 的接口自动化测试</title>
    <link href="http://wysh.site/2018/11/27/%E5%9F%BA%E4%BA%8EDjango%20Rest%20API%20%E7%9A%84%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    <id>http://wysh.site/2018/11/27/基于Django Rest API 的接口自动化测试/</id>
    <published>2018-11-27T13:35:36.000Z</published>
    <updated>2018-12-03T15:35:32.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>这篇文章记录了对 Django Rest API 接口进行自动化测试的过程。对接执行POST，DELETE，PUT，GET请求，会对系统中的数据进行增删改查，每执行一次增删改操作后，系统中的数据就会发生变化，为了解决这个问题，需要在每次执行接口请求之前对数据进行初始化，故本篇文章侧重于对接口测试过程中数据的处理，结合unnittest+Requests+Jenkins形成一个完整的接口自动化测试框架。</p></blockquote><ul><li>代码已上传至我的github，地址：</li></ul><p><a href="https://github.com/wuyongsheng/Restful_Api_Test" target="_blank" rel="noopener">https://github.com/wuyongsheng/Restful_Api_Test</a></p><h3 id="用到的一些工具、模块及作用"><a href="#用到的一些工具、模块及作用" class="headerlink" title="用到的一些工具、模块及作用"></a>用到的一些工具、模块及作用</h3><ul><li>Django：提供待测试的API接口</li><li>Requests：用来发起HTTP请求</li><li>Pymysql：对接口测试的数据进行操作</li><li>Unittest：单元测试框架，对测试结果进行断言</li><li>logging：python的日志模块，对测试执行过程进行记录，方便定位问题</li><li>PyYAML: python的Yaml库，用来存放初始化数据</li><li>BSTestRunner：用来成产测试报告，对测试报告进行美化</li><li>Jenkins：持续集成工具，可设置测试过程定期执行或者手动执行</li></ul><h3 id="测试脚本目录结构"><a href="#测试脚本目录结构" class="headerlink" title="测试脚本目录结构"></a>测试脚本目录结构</h3><p>目录结构及各文件的作用</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b1831951b175b714.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构.jpg"></p><h3 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h3><h4 id="搭建Django-rest-api-环境"><a href="#搭建Django-rest-api-环境" class="headerlink" title="搭建Django rest api 环境"></a>搭建Django rest api 环境</h4><p>Django 的安装，菜鸟教程有介绍，地址如下：</p><p><a href="http://www.runoob.com/django/django-install.html" target="_blank" rel="noopener">http://www.runoob.com/django/django-install.html</a></p><p>这里介绍数据库迁移过程。</p><p>在Django自带的数据库是Sqllite3，要将数据库迁移到MySQL方便操作。需要注意的是Django 2.1.X版本不支持MySQL 5.5以下的版本，我之前用的是5.5的版本，迁移时报了错，在网上查了，是因为版本不兼容。</p><p>使用如下命令进行数据库迁移：</p><ul><li>python manage.py makemigrations api</li><li>python manage.py migrate</li></ul><p>迁移完成后，需要创建一个超级管理员账号进行登录，使用如下命令：</p><ul><li>python manage.py createsuperuser</li></ul><p>创建超级管理员账号后，我们就可以用超级管理员账号登录Django了，登录后的界面如下（访问地址：<a href="http://127.0.0.1:8009/" target="_blank" rel="noopener">http://127.0.0.1:8009/</a> ，端口号可以自己指定）：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-af58bcc83a845f3a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Django.jpg"></p><p>在浏览器地址栏输入：</p><p><a href="http://127.0.0.1:8009/users/" target="_blank" rel="noopener">http://127.0.0.1:8009/users/</a>  可以返回系统中所有用户信息，用户信息包含url，username，email，groups字段，返回信息格式如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">GET /users/</span><br><span class="line">HTTP <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Vary: Accept</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/1/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh1"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh555@163.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/1/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/2/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh2"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh2@qq.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/2/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/3/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh3"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh3@qq.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/3/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/5/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh5"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh5@qq.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8009/groups/5/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/users/6/"</span>,</span><br><span class="line">        <span class="string">"username"</span>: <span class="string">"wysh6"</span>,</span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"wysh5@163.com"</span>,</span><br><span class="line">        <span class="string">"groups"</span>: <span class="string">"http://127.0.0.1:8000/groups/2/"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在浏览器地址栏输入：</p><p><a href="http://127.0.0.1:8009/groups/" target="_blank" rel="noopener">http://127.0.0.1:8009/groups/</a>  可以返回系统中所有用户组信息，用户信息包含 url，name 字段，返回信息格式如下：<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /groups/</span><br><span class="line">HTTP <span class="number">200</span> OK</span><br><span class="line">Allow: GET, POST, HEAD, OPTIONS</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Vary: Accept</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/2/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Boss"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/3/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"wysh_group3"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/4/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"wysh_group4"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/5/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"wysh_group5"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"http://127.0.0.1:8009/groups/6/"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Pm"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在 MySQL 数据库中，django_restful存放的是数据库迁移后，Django系统的数据，如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9a1e15103c106c89.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL.jpg"></p><p>其中 api_user 和 api_group 存放的是上面接口中用户和用户组的信息，以下的接口操作也是针对用户和用户组进行操作，api_user表如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-3993b085cd848145.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="user表.jpg"></p><h3 id="测试脚本介绍"><a href="#测试脚本介绍" class="headerlink" title="测试脚本介绍"></a>测试脚本介绍</h3><ul><li>mysql_action.py：进行数据库的初始化操作，代码如下：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from pymysql import connect</span><br><span class="line">import yaml</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'==================init data==============='</span>)</span><br><span class="line">        logging.info(<span class="string">'connect db...'</span>)</span><br><span class="line">        <span class="keyword">self</span>.conn = connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'123456'</span>, db=<span class="string">'django_restful'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(<span class="keyword">self</span>, table_name)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'clear db...'</span>)</span><br><span class="line">        clear_sql = <span class="string">'truncate '</span> + table_name + <span class="string">';'</span></span><br><span class="line">        with <span class="keyword">self</span>.conn.cursor() as <span class="symbol">cursor:</span></span><br><span class="line">            cursor.execute(<span class="string">'set foreign_key_checks=0;'</span>)</span><br><span class="line">            cursor.execute(clear_sql)</span><br><span class="line">        <span class="keyword">self</span>.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(<span class="keyword">self</span>, table_name, table_data)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'inser data...'</span>)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> <span class="symbol">table_data:</span></span><br><span class="line">            table_data[key] = <span class="string">"'"</span> + str(table_data[key]) + <span class="string">"'"</span></span><br><span class="line"></span><br><span class="line">        key = <span class="string">','</span>.join(table_data.keys())</span><br><span class="line">        value = <span class="string">','</span>.join(table_data.values())</span><br><span class="line"></span><br><span class="line">        logging.info(key)</span><br><span class="line">        logging.info(value)</span><br><span class="line"></span><br><span class="line">        insert_sql = <span class="string">'insert into '</span> + table_name + <span class="string">'('</span> + key + <span class="string">')'</span> + <span class="string">'values'</span> + <span class="string">'('</span> + value + <span class="string">')'</span></span><br><span class="line">        logging.info(insert_sql)</span><br><span class="line"></span><br><span class="line">        with <span class="keyword">self</span>.conn.cursor() as <span class="symbol">cursor:</span></span><br><span class="line">            cursor.execute(insert_sql)</span><br><span class="line">        <span class="keyword">self</span>.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'close db'</span>)</span><br><span class="line">        <span class="keyword">self</span>.conn.close()</span><br><span class="line">        logging.info(<span class="string">'=============init finished!============'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_data</span><span class="params">(<span class="keyword">self</span>, datas)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">for</span> table, data <span class="keyword">in</span> datas.items()<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.clear(table)</span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> <span class="symbol">data:</span></span><br><span class="line">                <span class="keyword">self</span>.insert(table, d)</span><br><span class="line">        <span class="keyword">self</span>.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    db = DB()</span><br><span class="line">    <span class="comment"># db.clear('api_user')</span></span><br><span class="line">    <span class="comment"># db.clear('api_group')</span></span><br><span class="line">    <span class="comment"># user_data=&#123;'id':1,'username':'wysh','email':'wysh<span class="doctag">@qq</span>.com'&#125;</span></span><br><span class="line">    <span class="comment"># db.insert('api_user',user_data)</span></span><br><span class="line">    <span class="comment"># db.close()</span></span><br><span class="line"></span><br><span class="line">    f = open(<span class="string">'datas.yaml'</span>, <span class="string">'r'</span>)</span><br><span class="line">    datas = yaml.load(f)</span><br><span class="line">    db.init_data(datas)</span><br></pre></td></tr></table></figure><ul><li>test_django_restful.py：对不同类型的接口请求（post，put，get，delete）进行单元测试，代码如下：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import unittest</span><br><span class="line">from  mysql_action import DB</span><br><span class="line">import yaml</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/users'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_get_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_get_user'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh1'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh1@qq.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'username'</span><span class="symbol">:<span class="string">'wysh6'</span></span>,<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh5@163.com'</span></span>,<span class="string">'groups'</span><span class="symbol">:<span class="string">'http://127.0.0.1:8000/groups/2/'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh6'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh5@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh555@163.com'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh555@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_user'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/4/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_005_no_auth</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_005_no_auth'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'detail'</span>],<span class="string">'Authentication credentials were not provided.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/groups'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_group_wysh</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_group'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'wysh_group1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Pm'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Pm'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Boss'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/2/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Boss'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_group'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    db=DB()</span><br><span class="line">    f=open(<span class="string">'datas.yaml'</span>,<span class="string">'r'</span>)</span><br><span class="line">    datas=yaml.load(f)</span><br><span class="line">    db.init_data(datas)</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><ul><li>data.yaml：以yaml格式存放接口初始数据，方便读取，代码如下：</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import unittest</span><br><span class="line">from  mysql_action import DB</span><br><span class="line">import yaml</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/users'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_get_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_get_user'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh1'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh1@qq.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'username'</span><span class="symbol">:<span class="string">'wysh6'</span></span>,<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh5@163.com'</span></span>,<span class="string">'groups'</span><span class="symbol">:<span class="string">'http://127.0.0.1:8000/groups/2/'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'username'</span>],<span class="string">'wysh6'</span>)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh5@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_user'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'email'</span><span class="symbol">:<span class="string">'wysh555@163.com'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'email'</span>],<span class="string">'wysh555@163.com'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_user</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_user'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/4/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_005_no_auth</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_005_no_auth'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'detail'</span>],<span class="string">'Authentication credentials were not provided.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupTest</span>(<span class="title">unittest</span>.<span class="title">TestCase</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.base_url=<span class="string">'http://127.0.0.1:8009/groups'</span></span><br><span class="line">        <span class="keyword">self</span>.auth=(<span class="string">'wysh'</span>,<span class="string">'123456'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_001_group_wysh</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_001_group'</span>)</span><br><span class="line">        r=requests.get(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'wysh_group1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_002_add_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_002_add_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Pm'</span></span>&#125;</span><br><span class="line">        r=requests.post(<span class="keyword">self</span>.base_url+<span class="string">'/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Pm'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_003_update_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_003_update_group'</span>)</span><br><span class="line">        form_data=&#123;<span class="string">'name'</span><span class="symbol">:<span class="string">'Boss'</span></span>&#125;</span><br><span class="line">        r=requests.patch(<span class="keyword">self</span>.base_url+<span class="string">'/2/'</span>,data=form_data,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        result=r.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.assertEqual(result[<span class="string">'name'</span>],<span class="string">'Boss'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_004_delete_group</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        logging.info(<span class="string">'test_004_delete_group'</span>)</span><br><span class="line">        r=requests.delete(<span class="keyword">self</span>.base_url+<span class="string">'/1/'</span>,auth=<span class="keyword">self</span>.auth)</span><br><span class="line">        <span class="keyword">self</span>.assertEqual(r.status_code,<span class="number">204</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name_<span class="number">_</span> == <span class="string">'__main__'</span><span class="symbol">:</span></span><br><span class="line">    db=DB()</span><br><span class="line">    f=open(<span class="string">'datas.yaml'</span>,<span class="string">'r'</span>)</span><br><span class="line">    datas=yaml.load(f)</span><br><span class="line">    db.init_data(datas)</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><ul><li>log.conf：日志配置文件，代码如下：</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[loggers]</span></span><br><span class="line"><span class="attr">keys</span>=root,infoLogger</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_root]</span></span><br><span class="line"><span class="attr">level</span>=DEBUG</span><br><span class="line"><span class="attr">handlers</span>=consoleHandler,fileHandler</span><br><span class="line"></span><br><span class="line"><span class="section">[logger_infoLogger]</span></span><br><span class="line"><span class="attr">handlers</span>=consoleHandler,fileHandler</span><br><span class="line"><span class="attr">qualname</span>=infoLogger</span><br><span class="line"><span class="attr">propagate</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[handlers]</span></span><br><span class="line"><span class="attr">keys</span>=consoleHandler,fileHandler</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_consoleHandler]</span></span><br><span class="line"><span class="attr">class</span>=StreamHandler</span><br><span class="line"><span class="attr">level</span>=INFO</span><br><span class="line"><span class="attr">formatter</span>=form02</span><br><span class="line"><span class="attr">args</span>=(sys.stdout,)</span><br><span class="line"></span><br><span class="line"><span class="section">[handler_fileHandler]</span></span><br><span class="line"><span class="attr">class</span>=FileHandler</span><br><span class="line"><span class="attr">level</span>=INFO</span><br><span class="line"><span class="attr">formatter</span>=form01</span><br><span class="line"><span class="attr">args</span>=(<span class="string">'./logs/runlog.log'</span>, <span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">[formatters]</span></span><br><span class="line"><span class="attr">keys</span>=form01,form02</span><br><span class="line"></span><br><span class="line"><span class="section">[formatter_form01]</span></span><br><span class="line"><span class="attr">format</span>=%(asctime)s %(filename)s[line:%(line<span class="literal">no</span>)d] %(levelname)s %(message)s</span><br><span class="line"></span><br><span class="line"><span class="section">[formatter_form02]</span></span><br><span class="line"><span class="attr">format</span>=%(asctime)s %(filename)s[line:%(line<span class="literal">no</span>)d] %(levelname)s %(message)s</span><br></pre></td></tr></table></figure><ul><li>run.py：程序的入口，代码如下：</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="title">from</span> <span class="type">BSTestRunner</span> <span class="keyword">import</span> BSTestRunner</span><br><span class="line"><span class="keyword">import</span> time,yaml</span><br><span class="line"><span class="title">from</span> mysql_action <span class="keyword">import</span> DB</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line"><span class="type">CON_LOG</span>='log.conf'</span><br><span class="line"><span class="title">logging</span>.config.fileConfig(<span class="type">CON_LOG</span>)</span><br><span class="line"><span class="title">logging</span>=logging.getLogger()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title">db</span>=<span class="type">DB</span>()</span><br><span class="line"><span class="title">f</span>=open('datas.yaml','r')</span><br><span class="line"><span class="title">datas</span>=yaml.load(f)</span><br><span class="line"><span class="title">db</span>.init_data(datas)</span><br><span class="line"></span><br><span class="line"><span class="title">test_dir</span>='.'</span><br><span class="line"><span class="title">report_dir</span>='./reports'</span><br><span class="line"></span><br><span class="line">discover=unittest.defaultTestLoader.discover(test_dir,pattern='test_django_restful.py')</span><br><span class="line"></span><br><span class="line">now=time.strftime('%<span class="type">Y</span>-%m-%d %<span class="type">H_</span>%<span class="type">M_</span>%<span class="type">S</span>')</span><br><span class="line">report_name=report_dir+'/'+now+' test_report.html'</span><br><span class="line"></span><br><span class="line">with open (report_name,'wb') as f:</span><br><span class="line">    runner=BSTestRunner(stream=f,title='<span class="type">Vincent</span> <span class="type">API</span> <span class="type">Test</span> <span class="type">Report</span>',description='<span class="type">Vincent</span> <span class="type">Django</span> <span class="type">Restful</span> <span class="type">API</span> <span class="type">Test</span> <span class="type">Report</span>')</span><br><span class="line">    logging.info('=========<span class="type">Start</span> <span class="type">API</span> <span class="type">Test</span>=============')</span><br><span class="line">    runner.run(discover)</span><br></pre></td></tr></table></figure><h3 id="程序执行"><a href="#程序执行" class="headerlink" title="程序执行"></a>程序执行</h3><p>运行run.py，会调用数据初始化、单元测试、日志、测试报告生成模块，测试报告生成在reports目录下，打开测试包括，会显示各个单元测试用例执行结果，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-890e43dbd5992c97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="report.jpg"></p><p>打开logs目录下的日志文件，会显示程序执行过程中的日志记录，如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b51651f7ded06ee2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志.jpg"></p><h3 id="Jenkins集成"><a href="#Jenkins集成" class="headerlink" title="Jenkins集成"></a>Jenkins集成</h3><p>打开Jenkins持续集成平台，我们可以自动定时执行自动化任务，通过邮件发送测试报告，这样会有效提高测试效率</p><p>创建名称为：wysh_interface_tes 的任务，在构建中选择执行Windows批处理命令，输入如下内容：<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d:</span><br><span class="line">cd D:<span class="symbol">\d</span>jango_restful<span class="symbol">\a</span>pi<span class="symbol">\i</span>nterface_wysh</span><br><span class="line">E:<span class="symbol">\P</span>ython<span class="symbol">\P</span>ython36-32<span class="symbol">\p</span>ython3.exe run.py</span><br></pre></td></tr></table></figure></p><p>如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-2f85c4660eb5a0d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="windows批处理.jpg"></p><p>构建过程如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b7daf4aea05d1fac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Jenkins.jpg"></p><p>构建完成后，同样也会在 reports 目录下生成相应的测试报告。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Django" scheme="http://wysh.site/categories/Django/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Django/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口" scheme="http://wysh.site/categories/Django/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="Python" scheme="http://wysh.site/categories/Django/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3/Python/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>接口自动化测试（Jmeter+Ant+Jenkins）</title>
    <link href="http://wysh.site/2018/11/19/%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%EF%BC%88Jmeter+Ant+Jenkins%EF%BC%89/"/>
    <id>http://wysh.site/2018/11/19/接口自动化测试（Jmeter+Ant+Jenkins）/</id>
    <published>2018-11-18T17:25:26.000Z</published>
    <updated>2018-11-18T18:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p>一个完整的接口自动化测试平台需要支持接口的自动执行,自动生成测试报告,以及持续集成。Jmeter支持接口的<br>测试,Ant支持自动构建,而 Jenkins支持持续集成,所以三者组合在一起可以构成个功能完善的接口自动化测试平台。</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h4><ul><li>JDK环境置</li><li>Jmeter安装</li><li>Ant安装环境变量配置</li><li>Jenkins安装</li></ul><h4 id="Ant简介"><a href="#Ant简介" class="headerlink" title="Ant简介"></a>Ant简介</h4><p>Apache Ant:是个将软件编译、测试、部署等步联系在一起加以自动化的工具,大多用于Java环境中的软件开发下载安装</p><p>下载地址:<a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">https://ant.apache.org/bindownload.cgi</a><br>下载之后解压到任意文件路径,我这里是放到C盘根目录<br>。</p><p>环境变量配置：</p><ul><li><p>ANT_HOME:  C:\apache-ant-1.10.5  </p></li><li><p>Path:  %ANT_HOME%\bin  </p></li><li><p>Classpath: %ANT_HOME%\lib</p></li></ul><h4 id="Jenkins简介"><a href="#Jenkins简介" class="headerlink" title="Jenkins简介"></a>Jenkins简介</h4><p>Jenkins是个开源软件项目,是基于Java开发的一种持集成工具,用于监控持续重复的工作,旨在提供一个开放易用的软件平台,使软件的持续集成变成可能</p><h4 id="依赖文件配置"><a href="#依赖文件配置" class="headerlink" title="依赖文件配置"></a>依赖文件配置</h4><ul><li><p>首先在 Jmeter 目录下面新建一个文件夹loadtest，文件夹名称不要使用下划线,空格等字符，并将脚本放置到该文件夹中。</p></li><li><p>将 Jmeter_extras文件中的ant-Jmeter-1.1.1.jar放到Ant中的lib文件夹中</p></li><li><p>将 Jmeter_extras文件中的 jmeter-results-detall-report_21.xsl, build.xml、 collapse.png、 expand.png放到ant目录中的bin目录下面。</p><h4 id="build-xml配置"><a href="#build-xml配置" class="headerlink" title="build.xml配置"></a>build.xml配置</h4><p>在Ant的bin目录中打开bui1d.xml文件,将文件内容修改为：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"ant-jmeter-test"</span> <span class="attr">default</span>=<span class="string">"all"</span> <span class="attr">basedir</span>=<span class="string">"."</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tstamp</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">format</span> <span class="attr">property</span>=<span class="string">"time"</span> <span class="attr">pattern</span>=<span class="string">"yyyyMMddhhmm"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tstamp</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 需要改成自己本地的 Jmeter 目录--&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.home"</span> <span class="attr">value</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- jmeter生成jtl格式的结果报告的路径--&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.jtl.dir"</span> <span class="attr">value</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0\loadtest\jtl"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- jmeter生成html格式的结果报告的路径--&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.html.dir"</span> <span class="attr">value</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0\loadtest\html"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ReportName"</span> <span class="attr">value</span>=<span class="string">"TestReport"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.jtlName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.jtl.dir&#125;</span><span class="xml"><span class="tag"><span class="string">/$</span></span></span><span class="template-variable">&#123;ReportName&#125;</span><span class="xml"><span class="tag"><span class="string">$</span></span></span><span class="template-variable">&#123;time&#125;</span><span class="xml"><span class="tag"><span class="string">.jtl"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jmeter.result.htmlName"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.html.dir&#125;</span><span class="xml"><span class="tag"><span class="string">/$</span></span></span><span class="template-variable">&#123;ReportName&#125;</span><span class="xml"><span class="tag"><span class="string">$</span></span></span><span class="template-variable">&#123;time&#125;</span><span class="xml"><span class="tag"><span class="string">.html"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"all"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">antcall</span> <span class="attr">target</span>=<span class="string">"test"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">antcall</span> <span class="attr">target</span>=<span class="string">"report"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">      </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">taskdef</span> <span class="attr">name</span>=<span class="string">"jmeter"</span> <span class="attr">classname</span>=<span class="string">"org.programmerplanet.ant.taskdefs.jmeter.JMeterTask"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">jmeter</span> <span class="attr">jmeterhome</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.home&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">resultlog</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.jtlName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">testplans</span> <span class="attr">dir</span>=<span class="string">"C:\Users\Administrator\Downloads\apache-jmeter-5.0\apache-jmeter-5.0\loadtest"</span> <span class="attr">includes</span>=<span class="string">"*.jmx"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">jmeter</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">          </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"report"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">xslt</span> <span class="attr">in</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.jtlName&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  </span></span></span><br><span class="line"><span class="xml">              out="$</span><span class="template-variable">&#123;jmeter.result.htmlName&#125;</span><span class="xml">"  </span></span><br><span class="line"><span class="xml">              style="$</span><span class="template-variable">&#123;jmeter.home&#125;</span><span class="xml">/extras/jmeter-results-detail-report_30.xsl" /&gt;  </span></span><br><span class="line"><span class="xml">          </span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 因为上面生成报告的时候，不会将相关的图片也一起拷贝至目标目录，所以，需要手动拷贝 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">copy</span> <span class="attr">todir</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.result.html.dir&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">fileset</span> <span class="attr">dir</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;jmeter.home&#125;</span><span class="xml"><span class="tag"><span class="string">/extras"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"collapse.png"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">"expand.png"</span> /&gt;</span>  </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">fileset</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">copy</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Ant-构建"><a href="#Ant-构建" class="headerlink" title="Ant 构建"></a>Ant 构建</h4><p>执行以下命令进行构建</p><blockquote><p>ant -buildfile C:\apache-ant-1.10.5\bin\build.xml</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-3ad08276092a1717.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ant命令.jpg"></p><p>进入loadtest目录，可以看到生成如下文件:<br><img src="https://upload-images.jianshu.io/upload_images/12273007-e5d61ac18247a5bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成的文件.jpg"></p><h4 id="报告优化"><a href="#报告优化" class="headerlink" title="报告优化"></a>报告优化</h4><p>Jmeter默认生成的报告不是很详细,因比我们需要进行优化。</p><p>这里我们使用新的报告模板:<br>jmeter-results-detail-report_30.xsl</p><p>将模板放置到jmeter的extras目录下</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e3ffa55b85c97ec8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="30xls文件.jpg"></p><p>默认的服告模板是 Jmeter-results-detail-report_21<br>，打开build.xml将21改为</p><p>&lt;condition property=”style_version” value=_30”&gt;</p><p>最后执行即可生成最新的服告:样式如下.<br>可以清晰看到每个请求发送,响应内容</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-71a96b2da121bfd8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改后的报告.jpg"></p><h4 id="集成到-Jenkins"><a href="#集成到-Jenkins" class="headerlink" title="集成到 Jenkins"></a>集成到 Jenkins</h4><p>在Jenkins中新建个任务：interface_test_wysh</p><p>在构建选项中选择 Invoke Ants，然后在 Build File输入 build. xml 文件路径，注意不要输入到Targets 里面去<br>了,需要点击高级选项后才可以显示 Build File</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-7f17c33859cd53eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="jenkins配置.jpg"></p><p>执行之后可以看到控制台输出和cmd的控制台输出是一样的</p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a052f8dd686031b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="控制台输出.jpg"></p><p>项目中涉及到的脚本及文件已上传至我的github中: <a href="https://github.com/wuyongsheng/interface_test_wysh" target="_blank" rel="noopener">https://github.com/wuyongsheng/interface_test_wysh</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Jmeter" scheme="http://wysh.site/categories/Jmeter/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Jmeter/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="接口" scheme="http://wysh.site/categories/Jmeter/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>selenium+java+jenkins+maven+testNG+reportNG 测试框架</title>
    <link href="http://wysh.site/2018/10/10/selenium+java+jenkins+maven+testNG+reportNG%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://wysh.site/2018/10/10/selenium+java+jenkins+maven+testNG+reportNG测试框架/</id>
    <published>2018-10-09T16:05:45.000Z</published>
    <updated>2018-10-09T17:38:38.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>以下是selenium-java 测试框架搭建过程的一个简单记叙（未完，待续），源代码地址：<a href="https://github.com/wuyongsheng/wysh.site" target="_blank" rel="noopener">https://github.com/wuyongsheng/wysh.site</a></p></blockquote><h3 id="eclipse中运行的结果"><a href="#eclipse中运行的结果" class="headerlink" title="eclipse中运行的结果"></a>eclipse中运行的结果</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-492f958685637230.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="eclipse.jpg"></p><h3 id="Jenkins中的配置"><a href="#Jenkins中的配置" class="headerlink" title="Jenkins中的配置"></a>Jenkins中的配置</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e74160e0fbe8f4de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="过程1.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-75cb9191184f22e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="过程2.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-4732738d63d4bc17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="过程3.jpg"><br><img src="https://upload-images.jianshu.io/upload_images/12273007-42f8003d18c3f6bf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test_report.jpg"></p><h3 id="测试报告的显示"><a href="#测试报告的显示" class="headerlink" title="测试报告的显示"></a>测试报告的显示</h3><p><img src="https://upload-images.jianshu.io/upload_images/12273007-0371edcfefb98373.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="构建结果.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Selenium" scheme="http://wysh.site/categories/Selenium/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>近几年拍摄并珍藏的一些照片</title>
    <link href="http://wysh.site/2018/10/06/%E7%8F%8D%E8%97%8F%E7%9A%84%E7%85%A7%E7%89%87/"/>
    <id>http://wysh.site/2018/10/06/珍藏的照片/</id>
    <published>2018-10-06T01:49:38.000Z</published>
    <updated>2018-11-18T18:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>整理了一下近几年拍摄的一些照片，精选了40张，把它们发布出来，留着以后慢慢欣赏</p><hr><h3 id="园博园"><a href="#园博园" class="headerlink" title="园博园"></a>园博园</h3><p>下面是2015年在园博园做智慧园博项目时拍摄的一组图片</p><blockquote><p>园博园入口处的欢迎图标</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-fb068ee480866c97.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园欢迎你.jpg"></p><blockquote><p>开幕倒计时</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-089a2a4c6a50d0c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-开幕倒计时.jpg"></p><blockquote><p>2016年元宵节园博园里的灯展</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e14413308395e36d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-灯展1.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-48ed9ed031b701b3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-灯展2.jpg"></p><p><img src="https://upload-images.jianshu.io/upload_images/12273007-69b310253fc53d27.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-灯展3.jpg"></p><blockquote><p>下面2张 图片是杭州园，园博园内最大最漂亮的园子之一</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-b1766d4ab92bd809.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-杭州园.jpg"></p><blockquote><p>傍晚时分的杭州园</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-58f2829209559a46.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-杭州园2.jpg"></p><blockquote><p>荷兰园的郁金香</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-74789f7b931a8ab5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-荷兰园的郁金香.jpg"></p><blockquote><p>园博园内古典的庭院湖景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-bd2082a558c657e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园湖景.jpg"></p><blockquote><p>园博园花道</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-163f60468c24c62c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-花道.jpg"></p><blockquote><p>下面一组图片是长江文明馆及园林艺术中心里的一些照片</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-94bd38ee6a4cf2a9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-黄鹤楼.jpg"></p><blockquote><p>园林艺术中心里的金鱼</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-1d94520f252d7ad6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-金鱼.jpg"></p><blockquote><p>长江文明馆里的馆藏（圣旨）</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-4ee8038e492eef04.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-圣旨.jpg"></p><blockquote><p>水帘洞</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a4e3f996bd6370e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-水帘洞.jpg"></p><blockquote><p>晚上的睡莲</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-70cc5021d1f9fa12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园睡莲.jpg"></p><blockquote><p>园林艺术中心里面有我们黄梅的五祖寺</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-6cce882dcac1d30b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-五祖寺.jpg"></p><blockquote><p>园博园里面的指挥中心，为了这个项目，在这里面工作了半年</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-935a401f91e2a35f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="园博园-指挥中心.jpg"></p><h3 id="九江"><a href="#九江" class="headerlink" title="九江"></a>九江</h3><blockquote><p>九江博物馆</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-fe47c7052e578e38.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-博物馆.jpg"></p><blockquote><p>九江博物馆外面的湖</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-9dc0c468cef222d5.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-市博物馆远景.JPG"></p><blockquote><p>九江江面上的轮船</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-adda73d71c6da9a4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-江面上的轮船.jpg"></p><blockquote><p>九江南山公园</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-041752c0eb2d3913.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江南山公园.jpg"></p><blockquote><p>九江江滩-浔阳江畔，白居易的琵琶行创作于此，“浔阳江头夜送客，枫叶荻花秋瑟瑟 ……”</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-be90974b78bd4166.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳江畔 1.jpg"></p><blockquote><p>九江江滩</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-e63aea4a653c09aa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳江畔2.jpg"></p><blockquote><p> 江边垂钓</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-64def9d545cb82f3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳江畔-垂钓.jpg"></p><blockquote><p>九江的浔阳楼，水浒传中宋江写反诗的地方</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f3b65eb7100bf8c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江-浔阳楼.jpg"></p><blockquote><p>九江长江大桥</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-351e558bbbd2acb2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九江长江大桥.jpg"></p><h3 id="黄梅妙乐寺"><a href="#黄梅妙乐寺" class="headerlink" title="黄梅妙乐寺"></a>黄梅妙乐寺</h3><blockquote><p>妙乐寺正门</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-98337d21d6b570ac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅-妙乐寺正门.jpg"></p><blockquote><p>妙乐寺里面的卧佛</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-75e0e00c77060a1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅_妙乐寺.jpg"></p><blockquote><p>妙乐寺里面的湖</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-0eba985ebbe3bd64.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅妙乐寺_湖.jpg"></p><blockquote><p>妙乐寺天王殿</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-c3e64ebe3db59bd1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="黄梅-妙乐寺-天王殿.jpg"></p><h3 id="江夏-汤逊湖"><a href="#江夏-汤逊湖" class="headerlink" title="江夏-汤逊湖"></a>江夏-汤逊湖</h3><blockquote><p>公路旁边的湖景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-605ddec0710b2463.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汤逊湖.jpg"></p><blockquote><p>汤逊湖-暴雨即将降临</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-209588d07b862043.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汤逊湖_暴雨即将来临.jpg"></p><blockquote><p>汤逊湖湖景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-a3e78a5ba18b048e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="汤逊湖湖景.jpg"></p><h3 id="东湖"><a href="#东湖" class="headerlink" title="东湖"></a>东湖</h3><blockquote><p>东湖楚城</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f42ecd6778a47d2d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="东湖楚城.jpg"></p><blockquote><p>荷花池</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-8bff075361b0cbd0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="东湖荷花.jpg"></p><blockquote><p>东湖湖景，远处的高楼依稀可见</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-f8f65b99c418320a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="东湖远景.jpg"></p><h3 id="光谷东-未来科技城"><a href="#光谷东-未来科技城" class="headerlink" title="光谷东-未来科技城"></a>光谷东-未来科技城</h3><blockquote><p>未来科技城的标志性建筑 - 马蹄莲</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-1a361c12a6467897.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="光谷东-未来科技城马蹄莲.jpg"></p><blockquote><p>未来科技城全景</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-95ec3757cfe3307c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="光谷东-未来科技城全景图.jpg"></p><h3 id="湖北省博物馆"><a href="#湖北省博物馆" class="headerlink" title="湖北省博物馆"></a>湖北省博物馆</h3><blockquote><p>湖北随州出土的曾侯乙编钟原件</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-688a68be5a5a0a53.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="湖北省博物馆-编钟.jpg"></p><blockquote><p>天下第一剑 - 越王勾践剑</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/12273007-2f7c556a261f7e4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="湖北省博物馆-越王勾践剑.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="风景" scheme="http://wysh.site/categories/%E9%A3%8E%E6%99%AF/"/>
    
      <category term="珍藏" scheme="http://wysh.site/categories/%E9%A3%8E%E6%99%AF/%E7%8F%8D%E8%97%8F/"/>
    
    
      <category term="风景" scheme="http://wysh.site/tags/%E9%A3%8E%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>selenium+python破解滑动验证码</title>
    <link href="http://wysh.site/2018/08/05/selenium+python%E7%A0%B4%E8%A7%A3%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>http://wysh.site/2018/08/05/selenium+python破解滑动验证码/</id>
    <published>2018-08-05T01:39:59.000Z</published>
    <updated>2018-11-27T08:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://upload-images.jianshu.io/upload_images/11925665-d70f3ec59f0edc81.gif?imageMogr2/auto-orient/strip" alt="破解滑动验证码动态图片.gif"></p><blockquote><p>最近在参与公司大数据项目的测试，其中部分数据来源于网络爬虫，想用selenium辅助测试，无奈有验证码（滑动验证码），于是就想着怎么破解，参考了网上的一些破解的方法，发现有一定的失败的概率，自己加以改进后，最终破解成功达到了100%，程序执行破解的过程见如上动图所示：</p></blockquote><hr><p>破解的原理大概是这样的：使用selenium拖动滑块，识别图片中的缺口，然后将滑块拖动至缺口处，完成拼图。整个过程看似简单，但程序处理起来并不简单：1、怎么判断缺口的位置，这个要对比图片背景的色差，2、怎么模拟人类拖动滑块的操作，匀速滑动或者一次性滑动到位都会被判定为程序行为而非人工操作，从而被禁止，这个可以通过随机函数进行随机滑动，3、操作的时候可能会失败，这个可以递归调用滑动操作，失败后重新刷新验证码并再一次进行滑动操作，直至成功。</p><hr><p>找到了两种破解方法，方法一单次破解的成功率在20%左右，通常需要递归调用4到5次就能破解成功，方法二单次破解成功率在90%左右，通常只用调用1次就能破解成功，最多不超过2次。</p><p>以下是方法一和方法二的源代码：</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="keyword">as</span> image</span><br><span class="line"><span class="keyword">import</span> time,re, random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> StringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬虫模拟的浏览器头部信息</span></span><br><span class="line">agent = <span class="string">'Mozilla/5.0 (Windows NT 5.1; rv:33.0) Gecko/20100101 Firefox/33.0'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: agent</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据位置对图片进行合并还原</span></span><br><span class="line"><span class="comment"># filename:图片</span></span><br><span class="line"><span class="comment"># location_list:图片位置</span></span><br><span class="line"><span class="comment">#内部两个图片处理函数的介绍</span></span><br><span class="line"><span class="comment">#crop函数带的参数为(起始点的横坐标，起始点的纵坐标，宽度，高度）</span></span><br><span class="line"><span class="comment">#paste函数的参数为(需要修改的图片，粘贴的起始点的横坐标，粘贴的起始点的纵坐标）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_merge_image</span><span class="params">(filename,location_list)</span>:</span></span><br><span class="line">    <span class="comment">#打开图片文件</span></span><br><span class="line">    im = image.open(filename)</span><br><span class="line">    <span class="comment">#创建新的图片,大小为260*116</span></span><br><span class="line">    new_im = image.new(<span class="string">'RGB'</span>, (<span class="number">260</span>,<span class="number">116</span>))</span><br><span class="line">    im_list_upper=[]</span><br><span class="line">    im_list_down=[]</span><br><span class="line">    <span class="comment"># 拷贝图片</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> location_list:</span><br><span class="line">        <span class="comment">#上面的图片</span></span><br><span class="line">        <span class="keyword">if</span> location[<span class="string">'y'</span>]==<span class="number">-58</span>:</span><br><span class="line">            im_list_upper.append(im.crop((abs(location[<span class="string">'x'</span>]),<span class="number">58</span>,abs(location[<span class="string">'x'</span>])+<span class="number">10</span>,<span class="number">166</span>)))</span><br><span class="line">        <span class="comment">#下面的图片</span></span><br><span class="line">        <span class="keyword">if</span> location[<span class="string">'y'</span>]==<span class="number">0</span>:</span><br><span class="line">            im_list_down.append(im.crop((abs(location[<span class="string">'x'</span>]),<span class="number">0</span>,abs(location[<span class="string">'x'</span>])+<span class="number">10</span>,<span class="number">58</span>)))</span><br><span class="line">    new_im = image.new(<span class="string">'RGB'</span>, (<span class="number">260</span>,<span class="number">116</span>))</span><br><span class="line">    x_offset = <span class="number">0</span></span><br><span class="line">    <span class="comment">#黏贴图片</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_upper:</span><br><span class="line">        new_im.paste(im, (x_offset,<span class="number">0</span>))</span><br><span class="line">        x_offset += im.size[<span class="number">0</span>]</span><br><span class="line">    x_offset = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> im <span class="keyword">in</span> im_list_down:</span><br><span class="line">        new_im.paste(im, (x_offset,<span class="number">58</span>))</span><br><span class="line">        x_offset += im.size[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> new_im</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载并还原图片</span></span><br><span class="line"><span class="comment"># driver:webdriver</span></span><br><span class="line"><span class="comment"># div:图片的div</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image</span><span class="params">(driver,div)</span>:</span></span><br><span class="line">    <span class="comment">#找到图片所在的div</span></span><br><span class="line">    background_images=driver.find_elements_by_xpath(div)</span><br><span class="line">    location_list=[]</span><br><span class="line">    imageurl=<span class="string">''</span></span><br><span class="line">    <span class="comment">#图片是被CSS按照位移的方式打乱的,我们需要找出这些位移,为后续还原做好准备</span></span><br><span class="line">    <span class="keyword">for</span> background_image <span class="keyword">in</span> background_images:</span><br><span class="line">        location=&#123;&#125;</span><br><span class="line">        <span class="comment">#在html里面解析出小图片的url地址，还有长高的数值</span></span><br><span class="line">        location[<span class="string">'x'</span>]=int(re.findall(<span class="string">"background-image: url\(\"(.*)\"\); background-position: (.*)px (.*)px;"</span>,background_image.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line">        location[<span class="string">'y'</span>]=int(re.findall(<span class="string">"background-image: url\(\"(.*)\"\); background-position: (.*)px (.*)px;"</span>,background_image.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line">        imageurl=re.findall(<span class="string">"background-image: url\(\"(.*)\"\); background-position: (.*)px (.*)px;"</span>,background_image.get_attribute(<span class="string">'style'</span>))[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        location_list.append(location)</span><br><span class="line">    <span class="comment">#替换图片的后缀,获得图片的URL</span></span><br><span class="line">    imageurl=imageurl.replace(<span class="string">"webp"</span>,<span class="string">"jpg"</span>)</span><br><span class="line">    <span class="comment">#获得图片的名字</span></span><br><span class="line">    <span class="comment"># imageName = imageurl.split('/')[-1]</span></span><br><span class="line">    imageName = <span class="string">'77777777'</span></span><br><span class="line">    <span class="comment">#获得图片</span></span><br><span class="line">    session = requests.session()</span><br><span class="line">    r = session.get(imageurl, headers = headers, verify = <span class="keyword">False</span>)</span><br><span class="line">    <span class="comment">#下载图片</span></span><br><span class="line">    <span class="keyword">with</span> open(imageName, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="comment">#重新合并还原图片</span></span><br><span class="line">    image=get_merge_image(imageName, location_list)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment">#对比RGB值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_similar</span><span class="params">(image1,image2,x,y)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#获取指定位置的RGB值</span></span><br><span class="line">    pixel1=image1.getpixel((x,y))</span><br><span class="line">    pixel2=image2.getpixel((x,y))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">3</span>):</span><br><span class="line">        <span class="comment"># 如果相差超过50则就认为找到了缺口的位置</span></span><br><span class="line">        <span class="keyword">if</span> abs(pixel1[i]-pixel2[i])&gt;=<span class="number">50</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算缺口的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_diff_location</span><span class="params">(image1,image2)</span>:</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="comment"># 两张原始图的大小都是相同的260*116</span></span><br><span class="line">    <span class="comment"># 那就通过两个for循环依次对比每个像素点的RGB值</span></span><br><span class="line">    <span class="comment"># 如果相差超过50则就认为找到了缺口的位置</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">260</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">116</span>):</span><br><span class="line">            <span class="keyword">if</span> is_similar(image1,image2,i,j)==<span class="keyword">False</span>:</span><br><span class="line">                <span class="keyword">return</span>  i</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据缺口的位置模拟x轴移动的轨迹</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">(length)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    list=[]</span><br><span class="line">    <span class="comment">#间隔通过随机范围函数来获得,每次移动一步或者两步</span></span><br><span class="line">    x=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#生成轨迹并保存到list内</span></span><br><span class="line">    <span class="keyword">while</span> length-x&gt;=<span class="number">5</span>:</span><br><span class="line">        list.append(x)</span><br><span class="line">        length=length-x</span><br><span class="line">        x=random.randint(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#最后五步都是一步步移动</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        list.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">(driver)</span>:</span></span><br><span class="line">     <span class="comment"># 等待页面的上元素刷新出来</span></span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">         <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>).is_displayed())</span><br><span class="line">     element = driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>)</span><br><span class="line">     element.click()</span><br><span class="line">     time.sleep(<span class="number">1</span>)</span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">        <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">"//div[@class='gt_slider_knob gt_show']"</span>).is_displayed())</span><br><span class="line">     <span class="comment"># driver.find_element_by_css_selector("/html/body/div[4]/div[2]/div[2]/div[2]/div[2]']").click()</span></span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">        <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">"//div[@class='gt_cut_bg gt_show']"</span>).is_displayed())</span><br><span class="line">     WebDriverWait(driver, <span class="number">30</span>).until(</span><br><span class="line">        <span class="keyword">lambda</span> the_driver: the_driver.find_element_by_xpath(<span class="string">"//div[@class='gt_cut_fullbg gt_show']"</span>).is_displayed())</span><br><span class="line">     element = driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>)</span><br><span class="line">     element.click()</span><br><span class="line">     time.sleep(<span class="number">1</span>)</span><br><span class="line">     <span class="comment"># 下载图片</span></span><br><span class="line">     image1 = get_image(driver, <span class="string">"//div[@class='gt_cut_bg gt_show']/div"</span>)</span><br><span class="line">     image2 = get_image(driver, <span class="string">"//div[@class='gt_cut_fullbg gt_show']/div"</span>)</span><br><span class="line">     <span class="comment"># 计算缺口位置</span></span><br><span class="line">     loc=get_diff_location(image1, image2)</span><br><span class="line">     <span class="comment">#生成x的移动轨迹点</span></span><br><span class="line">     track_list=get_track(loc)</span><br><span class="line">     <span class="comment">#找到滑动的圆球</span></span><br><span class="line">     element=driver.find_element_by_xpath(<span class="string">"//div[@class='gt_slider_knob gt_show']"</span>)</span><br><span class="line">     location=element.location</span><br><span class="line">     <span class="comment">#获得滑动圆球的高度</span></span><br><span class="line">     y=location[<span class="string">'y'</span>]</span><br><span class="line">     <span class="comment">#鼠标点击元素并按住不放</span></span><br><span class="line">     <span class="keyword">print</span> (<span class="string">"第一步,点击元素"</span>)</span><br><span class="line">     ActionChains(driver).click_and_hold(on_element=element).perform()</span><br><span class="line">     time.sleep(<span class="number">0.15</span>)</span><br><span class="line">     <span class="keyword">print</span> (<span class="string">"第二步，拖动元素"</span>)</span><br><span class="line">     track_string = <span class="string">""</span></span><br><span class="line">     <span class="keyword">for</span> track <span class="keyword">in</span> track_list:</span><br><span class="line">        <span class="comment">#不能移动太快,否则会被认为是程序执行</span></span><br><span class="line">        track_string = track_string + <span class="string">"&#123;%d,%d&#125;,"</span> % (track, y - <span class="number">445</span>)</span><br><span class="line">        <span class="comment">#xoffset=track+22:这里的移动位置的值是相对于滑动圆球左上角的相对值，而轨迹变量里的是圆球的中心点，所以要加上圆球长度的一半。</span></span><br><span class="line">        <span class="comment">#yoffset=y-445:这里也是一样的。不过要注意的是不同的浏览器渲染出来的结果是不一样的，要保证最终的计算后的值是22，也就是圆球高度的一半</span></span><br><span class="line">        ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=track+<span class="number">22</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">        <span class="comment">#间隔时间也通过随机函数来获得,间隔不能太快,否则会被认为是程序执行</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">10</span>,<span class="number">50</span>)/<span class="number">100</span>)</span><br><span class="line">     <span class="keyword">print</span> (track_string)</span><br><span class="line">     <span class="comment">#xoffset=21，本质就是向后退一格。这里退了5格是因为圆球的位置和滑动条的左边缘有5格的距离</span></span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     time.sleep(<span class="number">0.1</span>)</span><br><span class="line">     ActionChains(driver).move_to_element_with_offset(to_element=element, xoffset=<span class="number">21</span>, yoffset=y<span class="number">-445</span>).perform()</span><br><span class="line">     <span class="keyword">print</span> (<span class="string">"第三步，释放鼠标"</span>)</span><br><span class="line">     <span class="comment">#释放鼠标</span></span><br><span class="line">     ActionChains(driver).release(on_element=element).perform()</span><br><span class="line">     time.sleep(<span class="number">3</span>)</span><br><span class="line">     s = driver.find_elements_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/p'</span>)</span><br><span class="line">     <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">         print(<span class="string">"滑动解锁失败"</span>)</span><br><span class="line">         slide(driver)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         print(<span class="string">"滑动解锁成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#滑动验证码破解程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#打开火狐浏览器</span></span><br><span class="line">    driver=webdriver.Chrome(<span class="string">"D:\Google\Chrome\Application\chromedriver.exe"</span>)</span><br><span class="line">    <span class="comment">#用火狐浏览器打开网页</span></span><br><span class="line">    driver.get(<span class="string">"http://www.sgs.gov.cn/notice/"</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">"keyword"</span>).send_keys(<span class="string">'中国长城工业上海有限公司'</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">"buttonSearch"</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    slide(driver)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#点击验证</span></span><br><span class="line">    <span class="comment"># submit = driver.find_element_by_xpath("//div[@class='gt_ajax_tip success']")</span></span><br><span class="line">    <span class="comment"># print(submit.location)</span></span><br><span class="line">    <span class="comment"># time.sleep(5)</span></span><br><span class="line">    <span class="comment">#关闭浏览器,为了演示方便,暂时注释掉.</span></span><br><span class="line">    <span class="comment">#driver.quit()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#主函数入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time, re</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vincent</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        chrome_option = webdriver.ChromeOptions()</span><br><span class="line">        <span class="comment"># chrome_option.set_headless()</span></span><br><span class="line"></span><br><span class="line">        self.driver = webdriver.Chrome(executable_path=<span class="string">r"D:\Google\Chrome\Application\chromedriver.exe"</span>, chrome_options=chrome_option)</span><br><span class="line">        <span class="comment"># self.driver =webdriver.Chrome("D:\Google\Chrome\Application\chromedriver.exe")</span></span><br><span class="line">        self.driver.set_window_size(<span class="number">1440</span>, <span class="number">900</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># self.driver.get("https://www.Vincent.com/")</span></span><br><span class="line">        self.driver.get(<span class="string">"http://www.sgs.gov.cn/notice/"</span>)</span><br><span class="line"></span><br><span class="line">        self.driver.find_element_by_id(<span class="string">"keyword"</span>).send_keys(<span class="string">'中国长城工业上海有限公司'</span>)</span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>, <span class="number">0.5</span>).until(EC.element_to_be_clickable((By.ID, <span class="string">'buttonSearch'</span>)))</span><br><span class="line">        reg_element = self.driver.find_element_by_id(<span class="string">"buttonSearch"</span>)</span><br><span class="line">        reg_element.click()</span><br><span class="line"></span><br><span class="line">        WebDriverWait(self.driver, <span class="number">10</span>, <span class="number">0.5</span>).until(</span><br><span class="line">            EC.element_to_be_clickable((By.XPATH, <span class="string">'//div[@class="gt_slider_knob gt_show"]'</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进入模拟拖动流程</span></span><br><span class="line">        self.analog_drag()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">analog_drag</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 鼠标移动到拖动按钮，显示出拖动图片</span></span><br><span class="line">        element = self.driver.find_element_by_xpath(<span class="string">'//div[@class="gt_slider_knob gt_show"]'</span>)</span><br><span class="line">        ActionChains(self.driver).move_to_element(element).perform()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 刷新一下极验图片</span></span><br><span class="line">        element = self.driver.find_element_by_xpath(<span class="string">'//a[@class="gt_refresh_button"]'</span>)</span><br><span class="line">        element.click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取图片地址和位置坐标列表</span></span><br><span class="line">        cut_image_url, cut_location = self.get_image_url(<span class="string">'//div[@class="gt_cut_bg_slice"]'</span>)</span><br><span class="line">        full_image_url, full_location = self.get_image_url(<span class="string">'//div[@class="gt_cut_fullbg_slice"]'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据坐标拼接图片</span></span><br><span class="line">        cut_image = self.mosaic_image(cut_image_url, cut_location)</span><br><span class="line">        full_image = self.mosaic_image(full_image_url, full_location)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 保存图片方便查看</span></span><br><span class="line">        cut_image.save(<span class="string">"cut.jpg"</span>)</span><br><span class="line">        full_image.save(<span class="string">"full.jpg"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据两个图片计算距离</span></span><br><span class="line">        distance = self.get_offset_distance(cut_image, full_image)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始移动</span></span><br><span class="line">        self.start_move(distance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果出现error</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            WebDriverWait(self.driver, <span class="number">5</span>, <span class="number">0.5</span>).until(</span><br><span class="line">                EC.element_to_be_clickable((By.XPATH, <span class="string">'//div[@class="gt_ajax_tip gt_error"]'</span>)))</span><br><span class="line">            print(<span class="string">"验证失败"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">except</span> TimeoutException <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断是否验证成功</span></span><br><span class="line">        s = self.driver.find_elements_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/p'</span>)</span><br><span class="line">        <span class="keyword">if</span> len(s) == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">"滑动解锁失败,继续尝试"</span>)</span><br><span class="line">            self.analog_drag()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"滑动解锁成功"</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            ss=self.driver.find_element_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/div[2]'</span>).get_attribute(<span class="string">"onclick"</span>)</span><br><span class="line">            print(ss)</span><br><span class="line">            ss=self.driver.find_element_by_xpath(<span class="string">'//*[@id="wrap1"]/div[3]/div/div/div[2]'</span>).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取图片和位置列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_image_url</span><span class="params">(self, xpath)</span>:</span></span><br><span class="line">        link = re.compile(<span class="string">'background-image: url\("(.*?)"\); background-position: (.*?)px (.*?)px;'</span>)</span><br><span class="line">        elements = self.driver.find_elements_by_xpath(xpath)</span><br><span class="line">        image_url = <span class="keyword">None</span></span><br><span class="line">        location = list()</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">            style = element.get_attribute(<span class="string">"style"</span>)</span><br><span class="line">            groups = link.search(style)</span><br><span class="line">            url = groups[<span class="number">1</span>]</span><br><span class="line">            x_pos = groups[<span class="number">2</span>]</span><br><span class="line">            y_pos = groups[<span class="number">3</span>]</span><br><span class="line">            location.append((int(x_pos), int(y_pos)))</span><br><span class="line">            image_url = url</span><br><span class="line">        <span class="keyword">return</span> image_url, location</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接图片</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mosaic_image</span><span class="params">(self, image_url, location)</span>:</span></span><br><span class="line">        resq = requests.get(image_url)</span><br><span class="line">        file = BytesIO(resq.content)</span><br><span class="line">        img = Image.open(file)</span><br><span class="line">        image_upper_lst = []</span><br><span class="line">        image_down_lst = []</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> location:</span><br><span class="line">            <span class="keyword">if</span> pos[<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># y值==0的图片属于上半部分，高度58</span></span><br><span class="line">                image_upper_lst.append(img.crop((abs(pos[<span class="number">0</span>]), <span class="number">0</span>, abs(pos[<span class="number">0</span>]) + <span class="number">10</span>, <span class="number">58</span>)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># y值==58的图片属于下半部分</span></span><br><span class="line">                image_down_lst.append(img.crop((abs(pos[<span class="number">0</span>]), <span class="number">58</span>, abs(pos[<span class="number">0</span>]) + <span class="number">10</span>, img.height)))</span><br><span class="line"></span><br><span class="line">        x_offset = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 创建一张画布，x_offset主要为新画布使用</span></span><br><span class="line">        new_img = Image.new(<span class="string">"RGB"</span>, (<span class="number">260</span>, img.height))</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> image_upper_lst:</span><br><span class="line">            new_img.paste(img, (x_offset, <span class="number">58</span>))</span><br><span class="line">            x_offset += img.width</span><br><span class="line"></span><br><span class="line">        x_offset = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> image_down_lst:</span><br><span class="line">            new_img.paste(img, (x_offset, <span class="number">0</span>))</span><br><span class="line">            x_offset += img.width</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> new_img</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断颜色是否相近</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_similar_color</span><span class="params">(self, x_pixel, y_pixel)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i, pixel <span class="keyword">in</span> enumerate(x_pixel):</span><br><span class="line">            <span class="keyword">if</span> abs(y_pixel[i] - pixel) &gt; <span class="number">50</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算距离</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_offset_distance</span><span class="params">(self, cut_image, full_image)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(cut_image.width):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(cut_image.height):</span><br><span class="line">                cpx = cut_image.getpixel((x, y))</span><br><span class="line">                fpx = full_image.getpixel((x, y))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.is_similar_color(cpx, fpx):</span><br><span class="line">                    img = cut_image.crop((x, y, x + <span class="number">50</span>, y + <span class="number">40</span>))</span><br><span class="line">                    <span class="comment"># 保存一下计算出来位置图片，看看是不是缺口部分</span></span><br><span class="line">                    img.save(<span class="string">"1.jpg"</span>)</span><br><span class="line">                    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 开始移动</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_move</span><span class="params">(self, distance)</span>:</span></span><br><span class="line">        element = self.driver.find_element_by_xpath(<span class="string">'//div[@class="gt_slider_knob gt_show"]'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里就是根据移动进行调试，计算出来的位置不是百分百正确的，加上一点偏移</span></span><br><span class="line">        distance -= element.size.get(<span class="string">'width'</span>) / <span class="number">2</span></span><br><span class="line">        distance += <span class="number">15</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按下鼠标左键</span></span><br><span class="line">        ActionChains(self.driver).click_and_hold(element).perform()</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">while</span> distance &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> distance &gt; <span class="number">10</span>:</span><br><span class="line">                <span class="comment"># 如果距离大于10，就让他移动快一点</span></span><br><span class="line">                span = random.randint(<span class="number">5</span>, <span class="number">8</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 快到缺口了，就移动慢一点</span></span><br><span class="line">                span = random.randint(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">            ActionChains(self.driver).move_by_offset(span, <span class="number">0</span>).perform()</span><br><span class="line">            distance -= span</span><br><span class="line">            time.sleep(random.randint(<span class="number">10</span>, <span class="number">50</span>) / <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        ActionChains(self.driver).move_by_offset(distance, <span class="number">1</span>).perform()</span><br><span class="line">        ActionChains(self.driver).release(on_element=element).perform()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    h = Vincent()</span><br><span class="line">    h.visit_index()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="selenium" scheme="http://wysh.site/categories/selenium/"/>
    
      <category term="爬虫" scheme="http://wysh.site/categories/selenium/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://wysh.site/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Selenium 自动化测试流程与规范</title>
    <link href="http://wysh.site/2017/07/10/selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E4%B8%8E%E8%A7%84%E8%8C%83/"/>
    <id>http://wysh.site/2017/07/10/selenium自动化测试流程与规范/</id>
    <published>2017-07-10T01:54:45.000Z</published>
    <updated>2018-09-29T12:42:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1-目的"><a href="#1-1-目的" class="headerlink" title="1.1.目的"></a>1.1.目的</h3><p>此文档主要描述实施自动化功能测试的主要流程和具体规范，为实施自动化测试提供指导和参考。此文档所描述内容基于Selenium 自动化回归测试解决方案。</p><h3 id="1-2-Selenium简介"><a href="#1-2-Selenium简介" class="headerlink" title="1.2.Selenium简介"></a>1.2.Selenium简介</h3><p>Selenium 是 ThroughtWorks 公司一个强大的开源 Web 功能测试工具系列，包括Selenium-IDE、Selenium-RC、Selenium-Webdriver 以及 Selenium-Grid。在本自动化测试框架中我们可以灵活组合应用到其中的 Selenium-IDE、Selenium-Webdriver。<br>Selenium 2.0 的主要新功能是集成了 Webdriver 的 API。Webdriver 的设计提供一个更简单、更简洁的编程接口以及解决的 Selenium-RC API 中的一些限制。SeleniumWebdriver的开发是为了更好地支持动态网页的页面元素可能已经更改，但本身不被重新加载的页面。 Webdriver 的目标是提供一个设计良好的面向对象的 API、提供更好的支持，为 Web 应用程序测试问题。</p><h3 id="1-3-自动化实施目的"><a href="#1-3-自动化实施目的" class="headerlink" title="1.3.自动化实施目的"></a>1.3.自动化实施目的</h3><ul><li>自动执行重复工作较大回归测试。</li><li>Web 系统在不同环境下的兼容性测试（多操作系统和多浏览器）。</li><li>与 CI 服务集成，作为持续集成实践的一部分。<h3 id="1-4-参考资料"><a href="#1-4-参考资料" class="headerlink" title="1.4.参考资料"></a>1.4.参考资料</h3>《精通 QTP-自动化测试技术领航》 – 51Testing 软件测试组 人民邮电出版谁<br>《自动化软件测试实施指南》 – 译版 机械工业出版社<h2 id="2-Selenium自动化实施方案简介"><a href="#2-Selenium自动化实施方案简介" class="headerlink" title="2.Selenium自动化实施方案简介"></a>2.Selenium自动化实施方案简介</h2><h3 id="2-1-方案和工具介绍"><a href="#2-1-方案和工具介绍" class="headerlink" title="2.1.方案和工具介绍"></a>2.1.方案和工具介绍</h3><h4 id="2-1-1-实施方案"><a href="#2-1-1-实施方案" class="headerlink" title="2.1.1.实施方案"></a>2.1.1.实施方案</h4></li><li>自动化测试框架：Selenium 3（WebDriver）+ Page Object</li><li>用例管理系统：Testlink/TD</li><li>脚本开发：Java 语言</li><li>脚本生成方式：手工编写 + IDE 辅助元素识别</li><li>脚本运行方式：Testng 测试框架调度</li><li>测试数据：Testng 数据驱动</li><li>脚本回放：IE/Chrome/FireFox</li><li>自运行方案：Ant 批处理/CI 调度（Jenkins）</li><li>测试报告：Testng Report<h4 id="2-1-2-工具介绍"><a href="#2-1-2-工具介绍" class="headerlink" title="2.1.2.工具介绍"></a>2.1.2.工具介绍</h4>本套方案的工具组合如下：Eclipse + Selenium + testng + ant + Jenkins</li><li>Eclipse：集成开发工具，用来编写测试代码。</li><li>Selenium：是 ThoughtWorks 专门为 Web 应用而开发的自动化测试工具，适合进行功能测试、验收测试，选用 3.0 版本 WebDriver。</li><li>Testng: TestNG 是一种基于注释的测试框架，通过添加诸如灵活的装置、测试分类、参数测试和依赖方法等特性来克服 JUnit 的一些不足之处。</li><li>Ant：是一个将软件编译、测试、部署等步骤联系在一起加以自动化的一个工具，大多用于 java 环境中的软件开发，其作用是可以脱离开发环境，编译和运行程序。</li><li>Jenkins: 之前叫做 Hudson，是基于 Java 开发的一种持续集成工具，用于监控秩序重复的工作，包括：持续的软件版本发布/测试项目、监控外部调用执行的工作。<h3 id="2-2-Page-Object设计模式简介"><a href="#2-2-Page-Object设计模式简介" class="headerlink" title="2.2.Page Object设计模式简介"></a>2.2.Page Object设计模式简介</h3>Page Object 将测试对象及单个的测试步骤封装在每个 Page 对象中，以 page 为单位进行管理。<br>在 Web 应用程序的用户界面中存在测试交互。Page Object 可以用简单的用测试代码将页面对象模型化，从而减少了重复的代码量，如果 UI 发生变化，只需要在统一的地方变更。<h3 id="2-3-方案特性"><a href="#2-3-方案特性" class="headerlink" title="2.3.方案特性"></a>2.3.方案特性</h3></li><li>支持多环境下的兼容性测试</li><li>支持数据驱动（DDT）</li><li>对象库的分离和管理</li><li>自动化测试脚本的组织和管理</li><li>脚本的可重用（团队）和可配置</li><li>灵活的断言机制</li><li>便捷的后台服务</li><li>直观性的测试报告</li><li>支持与 CI 集成</li><li>强大的场景恢复<h3 id="2-4-方案适用的情形"><a href="#2-4-方案适用的情形" class="headerlink" title="2.4.方案适用的情形"></a>2.4.方案适用的情形</h3>自动化测试之所以能在很多大公司实施起来，就是有它适合自动化测试的特点和高的投资回报率。</li></ul><ol><li>产品型项目<br>产品型的项目，每个项目只改进少量的功能，但每个项目必须反反复复的测试那些没有改动过的功能。这部分测试完全可以让自动化测试来承担，同时可以把新加入的功能的测试也慢慢地加入到自动化测试当中。</li><li>增量式开发、持续集成项目<br>由于这种开发模式是频繁的发布新版本进行测试，也就需要自动化测试来频繁的测试，以便把人从中解脱出来测试新的功能。</li><li>能够自动编译、自动发布的系统<br>要能够完全实现自动化测试，必须能够具有自动化编译，自动化发布系统进行测试的功能。当然，不能达到这个要求也可以在手工干预下进行自动化测试。</li><li>回归测试<br>回归测试是自动化测试的强项，它能够很好的确保你是否引入了新的缺陷，老的缺陷是否修改过来了。在某种程度上可以把自动化测试工具叫做回归测试工具。</li><li>多次重复、机械性动作<br>自动化测试最喜欢测试：多次重复、机械性动作，这样的测试对它来说从不会失败。比如要向系统输入大量的相似数据来测试压力和报表。</li><li>需要频繁运行测试<br>在一个项目中需要频繁的运行测试，测试周期按天算，就能最大限度的利用测试脚本，提高工作效率。</li><li>将烦琐的任务转化为自动化测试<h3 id="2-5-方案不适用的情形"><a href="#2-5-方案不适用的情形" class="headerlink" title="2.5.方案不适用的情形"></a>2.5.方案不适用的情形</h3>自动化测试不是适合所有的公司、所有的项目。</li><li>定制型项目(一次性的)<br>为客户定制的项目，维护期由客户方承担的，甚至采用的开发语言、运行环境也是客户特别要求的，即公司在这方面的测试积累就少，这样的项目不适合做自动化测试。</li><li>项目周期很短的项目<br>项目周期很短，测试周期很短，就不值得花精力去投资自动化测试，好不容易建立起的测试脚本，不能得到重复的利用是不现实的。</li><li>业务规则复杂的对象<br>业务规则特别复杂的对象，有很多的逻辑关系、运算关系，工具就很难测试。</li><li>美观、声音、易用性测试<br>人的感观方面的：界面的美观、声音的体验、易用性的测试，也只有人来测试</li><li>测试很少运行<br>测试很少运行，对自动化测试就是一种浪费。自动化测试就是让它不厌其烦的、反反复复的运行才有效率。</li><li>软件不稳定<br>软件不稳定，则会由于这些不稳定因素导致自动化测试失败。只有当软件达到相对的稳定，没有界面性严重错误和中断错误才能开始自动化测试。</li><li>涉及物理交互<br>工具很难完成与物理设备的交互，比如刷卡的测试等。<h2 id="3-自动化测试环境"><a href="#3-自动化测试环境" class="headerlink" title="3.自动化测试环境"></a>3.自动化测试环境</h2><h3 id="3-1-开发环境"><a href="#3-1-开发环境" class="headerlink" title="3.1.开发环境"></a>3.1.开发环境</h3><h4 id="3-1-1-硬件环境"><a href="#3-1-1-硬件环境" class="headerlink" title="3.1.1.硬件环境"></a>3.1.1.硬件环境</h4>普通开发用的 PC 即可。<h4 id="3-1-2-软件环境"><a href="#3-1-2-软件环境" class="headerlink" title="3.1.2.软件环境"></a>3.1.2.软件环境</h4></li></ol><ul><li>Windows XP/7</li><li>Eclipse 4.2（含 testng 插件）</li><li>JDK 1.6</li><li>testng 6.7.0</li><li>selenium server 2.25 或以上</li><li>IE 8 或 9（含 IEDriver）、Firefox（含 firebug 插件）<h3 id="3-2-运行环境"><a href="#3-2-运行环境" class="headerlink" title="3.2.运行环境"></a>3.2.运行环境</h3><h4 id="3-2-1-硬件环境"><a href="#3-2-1-硬件环境" class="headerlink" title="3.2.1.硬件环境"></a>3.2.1.硬件环境</h4><ul><li>PC Server</li></ul></li><li>双核或四核（更佳）2.0G 以上主频</li><li>4G 或更大内存</li><li>80G 以上磁盘空间</li><li>100M 或以上以太网卡<h4 id="3-2-2-软件环境"><a href="#3-2-2-软件环境" class="headerlink" title="3.2.2.软件环境"></a>3.2.2.软件环境</h4></li><li>Windows、Linux</li><li>JRE 1.6</li><li>testng 6.7.0</li><li>selenium server 2.25 或以上</li><li>ant 1.8.4</li><li>IE（不支持 IE10，含 IEDriver）、Firefox、Google Chrome（含 ChromeDriver）<h2 id="4-自动化测试实施流程"><a href="#4-自动化测试实施流程" class="headerlink" title="4.自动化测试实施流程"></a>4.自动化测试实施流程</h2><h3 id="4-1-前置条件"><a href="#4-1-前置条件" class="headerlink" title="4.1.前置条件"></a>4.1.前置条件</h3>实施自动化测试之前需要对软件开发过程进行分析，以观察其是否适合使用自动化测试。通常需要同时满足以下条件：</li></ul><ol><li>软件需求变动不频繁。<br>测试脚本的稳定性决定了自动化测试的维护成本。如果软件需求变动过于频繁，测试人员需要根据变动的需求来更新测试用例以及相关的测试脚本，而脚本的维护本身就是一个代码开发的过程，需要修改、调试，必要的时候还要修改自动化测试的框架，如果所花费的成本不低于利用其节省的测试成本，那么自动化测试便是失败的。<br>项目中的某些模块相对稳定，而某些模块需求变动性很大。我们便可对相对稳定的模块进行自动化测试，而变动较大的仍是用手工测试。</li><li>项目周期足够长。<br>由于自动化测试需求的确定、自动化测试框架的设计、测试脚本的编写与调试均需要相当长的时间来完成。这样的过程本身就是一个测试软件的开发过程，需要较长的时间来完成。如果项目的周期比较短，没有足够的时间去支持这样一个过程，那么自动化测试便成为笑谈。</li><li>自动化测试脚本可重复使用。<br>如果费尽心思开发了一套近乎完美的自动化测试脚本，但是脚本的重复使用率很低，致使其间所耗费的成本大于所创造的经济价值，自动化测试便成为了测试人员的练手之作，而并非是真正可产生效益的测试手段了。<br>另外，在手工测试无法完成，需要投入大量时间与人力时也需要考虑引入自动化测试。比如性能测试、配置测试、大数据量输入测试等。<h3 id="4-2-流程图"><a href="#4-2-流程图" class="headerlink" title="4.2.流程图"></a>4.2.流程图</h3><img src="https://upload-images.jianshu.io/upload_images/12273007-ddab79712e42c730.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动化测试流程图.jpg"><h3 id="4-3-主要过程描述"><a href="#4-3-主要过程描述" class="headerlink" title="4.3.主要过程描述"></a>4.3.主要过程描述</h3><h4 id="4-3-1-可行性分析"><a href="#4-3-1-可行性分析" class="headerlink" title="4.3.1. 可行性分析"></a>4.3.1. 可行性分析</h4>在进行项目自动化测试之前，第一步就是要确认其可行性，是否可以实行测试自动化。在常见的不可行因素下，如果出现其中任何一种，自动化测试工作都是不应该展开的，项目常见不可行因素如下：</li></ol><ul><li>项目时间紧迫：如果项目进度很紧迫，开发周期的时间表很紧，每次交付间隔时间很短，你就没有时间进行测试自动化，也就不要考虑自动化测试了。</li><li>项目需求变幻无常：测试负责人应该及时和 PM 或专门的需求人员沟通来获得最直接的项目方面、客户方面的现有情况以及未来情况，从而最终通过分析来确认是否要进行自动化测试。因为 PM 和需求人员往往是对项目现今和未来的发展或对客户的思想及个性最了解的人群。如果项目是一个需求时常变化的项目，引入自动化测试的话，必定是个烂尾楼工程。</li><li>项目周期短：如果觉得在写完所有自动化测试脚本后，这些脚本只能仅仅为项目服务几个（6 个或更少）版本，不用多考虑，放弃自动化测试吧。</li><li>自动化测试工具对系统的有效性：如果上述的前 3 个和你所在的项目不沾边，那么请再看看这条因素。我们知道，想要开发自动化测试脚本，那么必须具备一款匹配的自动化测试工具，可以是开源的也可以是商业化的，甚至是自主研发一款。此时，就需要确切地了解这款测试工具能否应付项目中的需要。举个例，假设你所在的公司购买了一款商业化的自动化测试工具，项目系统中全部是一些 Java 控件，但是测试工具自带的插件中又不包含 Java 控件的识别插件，那么此时就算拥有这款自动化测试工具，但由于无法有效地识别到项目中的控件，所以，对于项目来说是毫无作用的。该过程产出物为《可行性分析报告》。<h4 id="4-3-2-抽样-demo-分析"><a href="#4-3-2-抽样-demo-分析" class="headerlink" title="4.3.2.抽样 demo 分析"></a>4.3.2.抽样 demo 分析</h4>通过可行性分析后，接下来要做的就是一个做 demo 了，等待 demo 完成后，可以再次通过分析看看自动化测试工作能否顺利地展开去，因为 demo 已经是一个实体案例，所以，可以完全通过透析 demo来发现是否存在技术上的致命问题。通常在 demo 完成之后，有经验的自动化测试工程师或组长就能对这个项目的自动化测试工作有一个大体的把握了。换言之，可以把 demo 看成更深层次的可行性分析，一旦通过了抽样 demo 分析，自动化测试就可以展开了。关于 demo 的选取，一般直接选择冒烟测试用例（大冒烟）写成测试脚本后执行，检查脚本是否能够成功运行通过，已设计的测试点是否全部执行到即可。<h4 id="4-3-3-测试需求分析"><a href="#4-3-3-测试需求分析" class="headerlink" title="4.3.3.测试需求分析"></a>4.3.3.测试需求分析</h4>到了测试需求分析这一步，分析的就不再是能否在项目中引入测试自动化了，而是在为下一阶段定制具体计划打下基础。测试需求其实就是测试目标，也可看做测试自动化的功能点，也就是自动化测试工程师想完成的任务。比如我们需要分析项目中具体有哪些测试需求（功能点）准备进行自动化测试。一条测试需求可以包含多条自动化测试用例，通过测试需求分析来判定项目中测试自动化要做到什么程度。举个例子，在自动化测试用例的设计上，大体是以正向、反向划分的，一般在自动化测试中，优先考虑实现正向的测试用例后再去实现反向的测试用例，而且反向的测试用例大多都是需要进行分析然后筛选出来的，因为反向的测试用例实在太多了。我们知道，自动化测试是不需要也没有必要做到 100%覆盖率的。所以，在测试需求分析这个阶段，确定测试覆盖率以及自动化测试粒度、测试用例上的筛选等都是重点工作。<h4 id="4-3-4-制定测试计划"><a href="#4-3-4-制定测试计划" class="headerlink" title="4.3.4.制定测试计划"></a>4.3.4.制定测试计划</h4>在经过了测试需求分析阶段后，项目 PM 和自动化测试组长就该正式起草正式方案了。<br>与以前的测试计划过程一致，只是在原来的测试计划中，添加对项目实施自动化测试所需的资源、测试范围、测试进度的描述。该过程产出物为《测试计划》。<h4 id="4-3-5-自动化测试设计"><a href="#4-3-5-自动化测试设计" class="headerlink" title="4.3.5.自动化测试设计"></a>4.3.5.自动化测试设计</h4><strong>框架设计、开发与搭建</strong><br>自动化测试框架是能保证测试的分布执行，脚本模块化,数据驱动，日志分析，错误截图，报表回收,共享对象库，公共函数库，环境配置，统一设计模式，异常处理,场景恢复等的一个无人值守的，针对每个独立项目的测试框架。<br><strong>测试用例设计</strong><br>自动化测试流程其实跟手工测试流程差不太多，要先编写测试用例，只是被叫作自动化测试用例而已。先设计好自动化测试用例，再严格根据设计完成的测试用例编写测试脚本，这是一种规律、一个过程。此过程产出物为《自动化测试用例》。<br>自动化测试用例设计和手工测试用例设计是有明显区别的，手工测试用例是从无到有的过程，而自动化测试用例不是的。自动化测试用例是有参考物的，它就是手工测试用例。它有时候可以直接拿来用、有时候需要稍加修改，在此把整个自动化测试用例设<br>计过程分为 3 步：</li><li>筛选手工测试用例的过程。</li><li>转换手工测试用例的过程。一般转换要素无非两种，一种就是测试用例的格式和规则，另一种就是优化自动化测试业务流程。自动化测试业务流程和手工测试业务流程还是有一定区别的，自动化测试业务流程更精简、严格。</li><li>新增&amp;补充自动化测试用例的过程。<h4 id="4-3-6-测试脚本开发"><a href="#4-3-6-测试脚本开发" class="headerlink" title="4.3.6.测试脚本开发"></a>4.3.6.测试脚本开发</h4>根据《软件需求规格说明书》、《自动化测试用例》、《系统原型》，录制、调试、编写各个功能点的自动化测试脚本，并添加检查点，进行参数化。该过程还需要编写数据文件处理脚本、日志文件处理脚本、数据库处理脚本、公共检查点处理脚本等等。该过程的产出物是各个功能点的自动化测试脚本和其他公共处理脚本。<br>此过程需要注意的是：</li><li>自动化测试脚本代码必须严谨、规范。</li><li>自动化测试脚本需参照自动化测试用例开发，测试用例即是开发参照物。</li><li>尽一切可能使自动化测试脚本更智能、高效、稳定、复用性高。</li><li>开发过程多利用插桩+断点，检查业务组件是否存在缺陷或代码是否存在漏洞。</li><li>脚本开发完毕后，至少运行成功 3 次以上，方可认为脚本已经没有问题。</li><li>必须使用一款优秀的代码版本管理软件来管理好每一个测试版本的自动化测试脚本，这也是自动化测试项目中非常重要的环节。<h4 id="4-3-7-自动化测试数据设计"><a href="#4-3-7-自动化测试数据设计" class="headerlink" title="4.3.7.自动化测试数据设计"></a>4.3.7.自动化测试数据设计</h4>根据《软件需求规格说明书》、《自动化测试用例》设计出对各个功能点和相关业务规则进行测试的输入数据和预期输出，填写入对应的数据文件中。该过程的产出物是各个功能点的数据文件。<h4 id="4-3-8-自动化测试执行"><a href="#4-3-8-自动化测试执行" class="headerlink" title="4.3.8.自动化测试执行"></a>4.3.8.自动化测试执行</h4>测试脚本开发完成后就要对测试脚本进行管理，执行；测试脚本的执行主要包含如下内容：</li><li>测试环境的管理配置</li><li>测试脚本配置</li><li>测试脚本的执行</li><li>测试异常中断处理和恢复<h4 id="4-3-9-自动化测试结果分析"><a href="#4-3-9-自动化测试结果分析" class="headerlink" title="4.3.9.自动化测试结果分析"></a>4.3.9.自动化测试结果分析</h4>对测试结果文件中报告错误的记录进行分析，如果确实是由于被测系统的缺陷导致，则提交缺陷报告。对自动化测试的结果进行总结，分析系统存在的问题，提交《测试报告》。<h3 id="4-3-10-自动化测试脚本维护"><a href="#4-3-10-自动化测试脚本维护" class="headerlink" title="4.3.10.自动化测试脚本维护"></a>4.3.10.自动化测试脚本维护</h3>如果系统发生变更时，对自动化测试脚本和相关文档包括《自动化测试用例》、《自动化脚本设计说明书》进行维护，以适应变更后的系统。<h3 id="4-4-脚本开发流程简述"><a href="#4-4-脚本开发流程简述" class="headerlink" title="4.4.脚本开发流程简述"></a>4.4.脚本开发流程简述</h3></li></ul><ol><li>安装配置开发环境和工具</li></ol><ul><li>安装配置 JDK</li><li>安装 Eclipse</li><li>安装 testng 插件</li><li>新建 testng 测试项目</li><li>导入需要的 jar 包和 driver 驱动</li></ul><ol start="2"><li>制定手工 case</li><li>脚本录制、对象识别</li><li>编写公共方法和公共 case</li><li>Case 分层编码实现</li><li>加入适当的断言覆盖手工 case 的验证点</li><li>调试回放运行<h3 id="4-5-自动化测试项目“标配”"><a href="#4-5-自动化测试项目“标配”" class="headerlink" title="4.5.自动化测试项目“标配”"></a>4.5.自动化测试项目“标配”</h3>下述各角色依据人力资源配备情况，可兼任，建议最少配置 3 人。</li></ol><ul><li>自动化测试组长<br>自动化测试团队最高管理，负责自动化测试项目从自动化立项到进度实施，到验收报告等整个测试流程；负责团队人员调度与管理；负责与上级领导、项目经理、手工测试负责人沟通与协调，并带领整个自动化小组工作</li><li>测试开发工程师<br>需要较高的技术水平，通常负责自动化测试框架的设计与搭建；负责自动化项目实施过程中各类技术难点的解决；负责公共数据的提炼和开发，如公共函数库等。</li><li>用例设计工程师<br>由团队中对业务和手工测试情况最熟悉的人员担当。负责自动化测试用例的设计开发工作，及今后的测试用例维护工作；负责测试脚本的验收工作，监督测试脚本业务逻辑是否与设计好的自动化测试用例一致。</li><li>脚本开发工程师<br>负责自动化测试脚本的设计与开发；负责脚本合并联调工作；负责后期的脚本维护工作。</li><li>配置管理<br>类似文职人员，可以没有代码开发经验。负责整个自动化团队日常工作中的文档变更记录的整理、公共对象库管理、代码版本管理及公共函数库管理等。<h2 id="5-自动化测试实施规范"><a href="#5-自动化测试实施规范" class="headerlink" title="5.自动化测试实施规范"></a>5.自动化测试实施规范</h2><h3 id="5-1-用例选取标准"><a href="#5-1-用例选取标准" class="headerlink" title="5.1.用例选取标准"></a>5.1.用例选取标准</h3></li><li>该测试是否包含核心业务流程</li><li>该测试是否覆盖了最关键的特性路径</li><li>该测试的重复执行率较高</li><li>该测试是否定期运行，比如，经常重用，还作为回归测试或构建测试的一部分</li><li>对于手动运行这个测试是否太昂贵而不可能或是禁止的，如并行，渗透，耐力测试，内存泄漏等</li><li>是否有对时间敏感的组件而必须自动化</li><li>该测试是否覆盖了最复杂的领域（通常是最有可能出错的领域）</li><li>使用相同步骤时，该测试是否需要许多数据组合</li><li>期望的结果是常数吗，比如每一次测试时都不会改变或不同？即使结果不同，是否可参数化（结果可预知）或可测出一个与期望结果的可接受的百分比（结果不可预知）</li><li>该测试是否非常耗时，如对成百上千的输出进行预期的分析</li><li>该测试是否运行在稳定的应用上</li><li>运行速度很慢的 case 不应该选取为自动化实现</li><li>自动化测试用例是否包含了手工测试的基线用例集</li><li>自动化的用例以正向用例为主，辅以个别重要的反向用例<h3 id="5-2-验证点规范"><a href="#5-2-验证点规范" class="headerlink" title="5.2.验证点规范"></a>5.2.验证点规范</h3><h4 id="5-2-1-验证点选取标准"><a href="#5-2-1-验证点选取标准" class="headerlink" title="5.2.1.验证点选取标准"></a>5.2.1.验证点选取标准</h4>自动化 case 的验证点需满足对手工 case 验证点的覆盖，这里说的手工 case 是专门为自动化测试选取的，验证点也是专门为自动化测试优化选取的，验证点选取原则如下：</li><li>要选取能覆盖当前 case 本质的主要验证点</li><li>尽量选取前台的明文验证点，即验证点在页面上可见，方便获取</li><li>前台无法验证的 case，需要去后台验证的情况下，需提供查询的表名与字段以及验证关系</li><li>新增类 case 的验证点需新增保存成功后重新查询比对查询结果得出</li><li>修改类 case 的验证点需修改保存保存成功后重新查询比对查询结果得出</li><li>数据计算类的验证点需要在数据驱动中提供预期结果</li><li>页面跳转类的验证点可以选 page title 或判断页面上比较特殊的元素的存在性<h4 id="5-2-2-脚本断言机制"><a href="#5-2-2-脚本断言机制" class="headerlink" title="5.2.2.脚本断言机制"></a>5.2.2.脚本断言机制</h4>断言是 testng 中提供的一种判断验证点是否通过的机制，需要说明的是：如果某个断言失败，则当前 case 会自动结束并 fail 掉，不会继续执行当前 case 的后续步骤。断言可以添加在业务层即 business 层也可以添加到 case 层，可根据 case 的实际业务选择断言的置，为了代码风格的统一并尽量少的引入 jar 包，断言建议使用 testng 自带断言org.testng.Assert，尽量不要使用 junit 断言。<br>Testng 提供了多种断言方法，详见 Testng API Assert 类。建议优先选用下面的断言：</li><li>Assert.assertEquals(expected, actual);：期望值与实际值比较</li><li>Assert.assertTrue(Boolean expression)：布尔表达式即为验证点的预期值与实际值的关系</li><li>Assert.fail(“failing message”)：对于可预知失败的验证点<h3 id="5-3-待测系统开发规范"><a href="#5-3-待测系统开发规范" class="headerlink" title="5.3.待测系统开发规范"></a>5.3.待测系统开发规范</h3>此章节主要罗列影响自动化测试编码的几个重要的规范，其余规范请遵循 Java Web应用开发通用编码规范。</li><li>元素的 ID 名有意义且尽量不要使用动态 ID</li><li>一个页面上的所有元素的 name 名尽量保证不重复</li><li>日期选择控件需要支持手动输入</li><li>文件上传控件的路径需要支持手动输入</li><li>尽量少的使用弹出页面</li><li>尽量避免使用 js 监听浏览器的关闭事件，会导致浏览器无法正常关闭<h3 id="5-4-自动化脚本编码规范"><a href="#5-4-自动化脚本编码规范" class="headerlink" title="5.4.自动化脚本编码规范"></a>5.4.自动化脚本编码规范</h3><h4 id="5-4-1-基本信息"><a href="#5-4-1-基本信息" class="headerlink" title="5.4.1.基本信息"></a>5.4.1.基本信息</h4>在每个脚本模块的最上面，必须写上脚本运行的软件和硬件环境（如 IE 版本、框架版本、数据库版本等）、项目名称、脚本编写人（使用英文名或中文拼音缩写）、脚本创建时间、脚本修改时间、修改说明、输入参数、输出参数、脚本描述等。<h4 id="5-4-2-常量命名规范"><a href="#5-4-2-常量命名规范" class="headerlink" title="5.4.2.常量命名规范"></a>5.4.2.常量命名规范</h4>常量的命名应该全部用大写，使用”_”作为单词间的分隔符，单词尽量使用全名称，如，final int MY_SCORE = 100;。另外，对常量的声明必须带上类型。<h4 id="5-4-3-变量命名规范"><a href="#5-4-3-变量命名规范" class="headerlink" title="5.4.3. 变量命名规范"></a>5.4.3. 变量命名规范</h4>变量命名应该简单，应尽量使用缩写。如果是一般的值类型（如 int、String），则直接使用变量用途命名。尽量使用全名，例如，String name；如果是一般的临时性变量定义，应该尽可能地简单，例如，int i；如果名称由多个单词组成，则取每个单词的首字母，如 EntityManager 缩写为 em，ProcedureManager 缩写为 pm；如果名称由一个单词组成，则对单词进行分段取首字母，如 Entity 缩写为 et。缩写应该控制在 3 个字母以内，且尽量清晰。<h4 id="5-4-4-参数命名规范"><a href="#5-4-4-参数命名规范" class="headerlink" title="5.4.4. 参数命名规范"></a>5.4.4. 参数命名规范</h4>参数命名的原则是全部用小写，如果参数包括两个或两个以上的单词时，首单词字母小写，其他单词首字母大写，如 stepName、stepDescription。<h4 id="5-4-5-方法命名规范"><a href="#5-4-5-方法命名规范" class="headerlink" title="5.4.5.方法命名规范"></a>5.4.5.方法命名规范</h4>方法表示的是一个动作，所以它的结构应该是动词+名词，动词必须小写，后面的名称首字母大写，如 getMaterialCode。函数命名尽量不要使用缩写，而且它的名称应该使人一目了然，能够从名称就知道这个函数的功能，不要使用无意义的函数名称。当函数名称不足以表达其功能时，应使用在函数头部加上让调用者足够明白的注释。<h4 id="5-4-6-代码注释规范"><a href="#5-4-6-代码注释规范" class="headerlink" title="5.4.6.代码注释规范"></a>5.4.6.代码注释规范</h4>注释务必做到准确简洁，能够充分表达代码实现的功能。<h4 id="5-4-7-空行"><a href="#5-4-7-空行" class="headerlink" title="5.4.7.空行"></a>5.4.7.空行</h4>空行是区分代码块与块的间隔，在函数之间必须加上空行；而在函数内部，变量声明块和实现块（实现块指除变量声明外的其他代码）要使用空行来间隔，实现块的内部，通过空行来标识一个功能段。<h4 id="5-4-8-缩进"><a href="#5-4-8-缩进" class="headerlink" title="5.4.8.缩进"></a>5.4.8.缩进</h4>必须严格执行缩进，变量声明块不缩进，实现块必须保证全部缩进（不可能有实现块是行首对齐的）；对于基本的控制结构来说，必须要有缩进，如 IF、DO、FOR、WHILE块。<h4 id="5-4-9-续行"><a href="#5-4-9-续行" class="headerlink" title="5.4.9.续行"></a>5.4.9.续行</h4>对于过长的语句来说，必须使用续行，续行的位置要有明显意义，例如，sql=”SELECT [code]，[name] FROM [Person]”_&amp;”WHERE [code] LIKE’001%’”。<br>另外，还要通过管理对象库来提高代码的可读性，通过修改命名来达到更加易读的效果。对于使用比较频繁的代码块来说，最好将其写成函数，并尽量将功能复杂的大函数拆分成小函数。<h4 id="5-4-10-检查点检查"><a href="#5-4-10-检查点检查" class="headerlink" title="5.4.10.检查点检查"></a>5.4.10.检查点检查</h4>每个测试脚本都应该有相应的检查点及对应的检查结果输出。<h3 id="5-5-结构分层规范"><a href="#5-5-结构分层规范" class="headerlink" title="5.5.结构分层规范"></a>5.5.结构分层规范</h3><h4 id="5-5-1-Control-层"><a href="#5-5-1-Control-层" class="headerlink" title="5.5.1.Control 层"></a>5.5.1.Control 层</h4>框架底层，定义web page的基本元素类型（含元素识别、属性、方法），勿轻易修改。<h4 id="5-5-2-Util-层"><a href="#5-5-2-Util-层" class="headerlink" title="5.5.2.Util 层"></a>5.5.2.Util 层</h4>对 selenium driver方法的 重定义 与 封 装 （ Selenium2Proxy） 、 自 定 义 通 用 方 法（CommonMethord）、公共case方法（CommonCase），第三方服务等，可根据需要自行添加<h4 id="5-5-3-Page-层"><a href="#5-5-3-Page-层" class="headerlink" title="5.5.3.Page 层"></a>5.5.3.Page 层</h4>以页面为单位，定义页面上的元素识别与基本动作（赋值、点击等），一个页面对应一个java文件<h4 id="5-5-4-Business-层"><a href="#5-5-4-Business-层" class="headerlink" title="5.5.4.Business 层"></a>5.5.4.Business 层</h4>一个页面对应一个java文件，定义该页面上的所有基本事务（查询、新增、删除等），事务是page层所定义元素的动作组合<h4 id="5-5-5-Case-层"><a href="#5-5-5-Case-层" class="headerlink" title="5.5.5.Case 层"></a>5.5.5.Case 层</h4>Case实现层，是business层、page层所定义对象的组合操作，并加入适当的断言（验证点）。Case组织方式请参看“用例组织规范”<h4 id="5-5-6-Data-层"><a href="#5-5-6-Data-层" class="headerlink" title="5.5.6.Data 层"></a>5.5.6.Data 层</h4>数据驱动层，定义case层中的测试方法所用到的数据<h4 id="5-5-7-Config-层"><a href="#5-5-7-Config-层" class="headerlink" title="5.5.7.Config 层"></a>5.5.7.Config 层</h4>配置定义，含浏览器驱动配置、配置文件读取等，勿轻易修改。<h3 id="5-6-用例组织规范"><a href="#5-6-用例组织规范" class="headerlink" title="5.6.用例组织规范"></a>5.6.用例组织规范</h3>如项目 case 总数量不多（1500 以内），为了提高回放通过率，建议使用低耦合的方式组织 case，即每个测试方法结束后将浏览器关闭。如果 case 数量较多，为了保证一次自动化的构建所占用的时间不会特别长以至于无法接受，建议将 case 改造为高耦合的方式 ，即每次启动浏览器后完成一系列相关的 case 执行后再关闭浏览器，case 执行顺序通过 dependsOnMethods 实现。构建两个测试基类，可实现在一个自动化构建中两种方式并存。<br><strong>低耦合方式组织 case</strong></li><li>一个模块对应一个 class</li><li>一个测试对应一个@test，测试方法无需指定执行顺序，默认顺序或者随机顺序执行都可以</li><li>Case 可自定义属于 Groups，如 groups = { “uitest”, “funtest” }</li><li>浏览器的初始化与全局元素等待在基类的@BeforeMethod 中定义</li><li>浏览器的关闭与其他资源回收在基类的@AfterMethod 中定义</li><li>Xml 中配置需要执行的 class 与 groups 即可<br><strong>高耦合方式组织 case</strong></li><li>一个模块下的有关联的一系列 case 对应一个 class</li><li>一个测试对应一个@test，测试方法需指定执行顺序，用 dependsOnMethods 实现</li><li>浏览器的初始化与全局元素等待在基类的@BeforeClass 中定义</li><li>浏览器的关闭与其他资源回收在基类的@AfterClass 中定义</li><li>Xml 中配置需要执行的 class 与 groups 即可<br><img src="https://upload-images.jianshu.io/upload_images/12273007-eaea0f4735f0822b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xml配置.jpg"><h3 id="5-7-对象识别规范"><a href="#5-7-对象识别规范" class="headerlink" title="5.7.对象识别规范"></a>5.7.对象识别规范</h3>Selenium 提供了如下的对象识别方法，参考 API 中 Class By。<br><img src="https://upload-images.jianshu.io/upload_images/12273007-54fac7bc487278ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对象识别.jpg"></li><li>优先选择 By.id,By.name,By.classname</li><li>优先选择当前页面中不重名的属性</li><li>如遇重名属性，使用 List 返回多个元素，使用时根据元素在 List 中的位置调用</li><li>极其难以定位的元素可以考虑使用 xpath 定位<h3 id="5-8-脚本回放规范"><a href="#5-8-脚本回放规范" class="headerlink" title="5.8.脚本回放规范"></a>5.8.脚本回放规范</h3>Selenium 脚本回放由快到慢：htmlunit&gt;chrome&gt;firefox&gt;ie。</li><li>Htmlunit 回放时无界面，对 js 支持不是很好，不建议使用</li><li>本地开发时选择适合自己的回放浏览器（不建议使用 IE6，推荐 IE8 和Chrome）</li><li>执行机批量执行选择可兼容的最快的浏览器进行回放</li><li>浏览器兼容性测试时选择需求规定的浏览器回放</li><li>建议控制每个测试方法的回放速度在 60S 之内，通过优化测试脚本实现</li><li>为防止因某个测试方法卡住很长时间影响整个自动化构建的持续运行，所有测试方法应该加上超时限制，如：timeOut = 120000(ms)，时间长短根据当前case 的复杂程度人为判定</li><li>为提高元素识别的准确率和稳定性，自动化测试回放时浏览器默认最大化处理</li><li>为提高元素识别的准确率与识别速度，自动化测试回放时需设置全局的元素默认等待时间，implicitlyWait(10, TimeUnit.SECONDS)，建议 10S<h2 id="6-其他注意项"><a href="#6-其他注意项" class="headerlink" title="6. 其他注意项"></a>6. 其他注意项</h2></li></ul><ol><li>注意根据项目特点选取 case 的组织形式，如项目 case 较多，建议采用高耦合的方式组织 case，以提高回放执行的效率</li><li>善用 aftermethod 和 afterclass 方法，对资源进行回收，避免脚本执行机器的资源被大量占用而引起当机（常见于浏览器和 driver 没有回收）</li><li>避免死脚本的出现，如数据硬编码，唯一键冲突，无效数据驱动等</li><li>断言失败会导致 case 中断执行，故不是每个步骤都需要加入验证点</li><li>已知处理表格时，全局的元素等待会造成表格遍历的性能问题，故处理表格之前需要将全局元素等待时间归 0，表格处理完毕后再还原</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Selenium" scheme="http://wysh.site/categories/Selenium/"/>
    
      <category term="自动化测试" scheme="http://wysh.site/categories/Selenium/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="http://wysh.site/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>详解服务器性能测试的全生命周期？——从测试、结果分析到优化策略</title>
    <link href="http://wysh.site/2017/06/24/%E8%AF%A6%E8%A7%A3%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%9A%84%E5%85%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E4%BB%8E%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90%E5%88%B0%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://wysh.site/2017/06/24/详解服务器性能测试的全生命周期从测试结果分析到优化策略/</id>
    <published>2017-06-24T06:20:17.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>服务器性能测试是一项非常重要而且必要的工作，本文是作者Micheal在对服务器进行性能测试的过程中不断摸索出来的一些实用策略，通过定位问题，分析原因以及解决问题，实现对服务器进行更有针对性的优化，提升服务器的性能。  </p></blockquote><h2 id="1-服务器性能测试小结"><a href="#1-服务器性能测试小结" class="headerlink" title="1. 服务器性能测试小结"></a>1. 服务器性能测试小结</h2><p> 讲到服务器性能大部分人会想到这个服务器的架构是什么样子的，用的什么epoll，select，spring，tornado之类的。其实从本质上来看的话目前大部分的服务器主要包括逻辑层以及DB层，我们采用的各种框架组件处于逻辑服务器中，如下图所示。<br> <img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7OGDJykZM7QvZRFPOjExHgjvKXhGN4bW1s3ic0rqM7OhhhKLkIia9jOrQ/0?wx_fmt=gif" alt="image">  </p><p> 服务器性能测试是一项比较繁琐的事情，作为没有做过性能测试的同学可能需要理清楚以下几个事情。</p><h3 id="1-1-协议分析"><a href="#1-1-协议分析" class="headerlink" title="1.1. 协议分析"></a>1.1. 协议分析</h3><p>首先是协议分析，性能测试本质上是我们用代码来模拟真实的用户请求，所以我们必须要知道发送出去的请求内容才能模拟。在典型的CS服务器中很多使用了protobuf，thrift，tdr（腾讯自研）来序列化以及反序列号请求内容。  </p><p>序列化之后一方面可以对数据进行压缩处理，另一方面也避免请求内容明文传输造成被抓包·泄漏数据的危险。之前有过服务器传输数据的时候使用的是明文直接发送，而且这个数据是一些敏感的sql语句，这样首先暴露了数据库的表结构，同时不法分子可以通过模拟发包造成“脱裤”甚至是数据被清空。  </p><h4 id="1-1-1-Protobuf"><a href="#1-1-1-Protobuf" class="headerlink" title="1.1.1.   Protobuf"></a>1.1.1.   Protobuf</h4><p>谷歌出品，必属精品。Protobuf使用起来很方便，学习成本非常低，而且序列化和反序列号的接口很容易使用。同时它相对于xml以及json，极大的的减小了数据占用的空间，减少了传输成本。目前支持包括C，java以及python等多个语言。Protobuf目前用的比较多，打解包也很方便，比较推荐使用。  </p><h4 id="1-1-2-Thrift"><a href="#1-1-2-Thrift" class="headerlink" title="1.1.2.   Thrift"></a>1.1.2.   Thrift</h4><p>Thrift是一个跨语言的轻量级rpc消息和数据交换框架。Thrift支持几乎绝大部分主流的语言，包括C, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, Smalltalk, and OCaml，虽然大部分我都没有用过。相对于protobuf，thrift提供了全套RPC解决方案，包括序列化机制、传输层、并发处理框架等，也因为如此thrift的学习成本比较高。  </p><h4 id="1-1-3-腾讯自研协议tdr"><a href="#1-1-3-腾讯自研协议tdr" class="headerlink" title="1.1.3.   腾讯自研协议tdr"></a>1.1.3.   腾讯自研协议tdr</h4><p>Tdr是腾讯自研跨平台多语言数据表示组件，主要用于基于数据的序列化反序列化（支持二进制方式和XML文本方式）以及ORM数据存储。广泛用于互娱自研游戏和部分代理游戏。在性能上基本和protobuf差不多，主要应用在C程序中。<br>在做服务器性能测试之前，我们需要了解它的协议是怎么定义的。</p><h3 id="1-2-机器人管理"><a href="#1-2-机器人管理" class="headerlink" title="1.2.  机器人管理"></a>1.2.  机器人管理</h3><p>本质上机器人管理就是一个调度控制器，在获取需要发送的请求协议之后，需要有一个框架来管理所有的机器人，控制机器人的启动，发送请求以及停止的动作。框架的选择需要根据服务器的实际情况来，不同的业务场景，使用不同的框架产生的压力上限也会不一样。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7Sf2V9LvI1Hcb0PibfLTRj1L8OlS5on0wpP0kFl452ODdlPRd4kjCA4A/0?wx_fmt=gif" alt="image">   </p><p>以一个简单的多线程框架为例，主线程负责控制逻辑，管理所有的机器人状态信息。子线程执行每个机器人的任务，包括连接服务器，发送数据，接收数据，断开连接等。</p><h3 id="1-3-结果统计"><a href="#1-3-结果统计" class="headerlink" title="1.3.  结果统计"></a>1.3.  结果统计</h3><p>机器人发送请求包之后，一般是要等待服务器的响应回包。服务器那边可以计算本次压测过程中各项业务数据，包括TPS，总的收发包量等。    </p><p>不可能在测试过程中一直盯着各个数据看，我们需要把每项数据记录下来，后续综合各项结果进行分析。<br>这里的结果统计除了需要统计每个机器人收到回包的结果，还需要统计服务器在压测过程中的各项性能数据变化。一旦客户端的压力上到一定值时，服务器某项资源支撑不了的话，说明这个资源可能存在短板，存在可以优化的空间。    </p><p>性能结果分析是一个比较复杂的过程。需要综合硬件、操作系统、应用程序等多方面来定位。  </p><h3 id="2-1-硬件的影响"><a href="#2-1-硬件的影响" class="headerlink" title="2.1.  硬件的影响"></a>2.1.  硬件的影响</h3><p>硬件对服务器性能影响还是蛮大的，如果是土豪的话，可以直接买最好的。我们分析硬件主要是希望选择合适的配置，节约资源，避免出现高射炮打蚊子的情况。  </p><h5 id="2-1-1-CPU"><a href="#2-1-1-CPU" class="headerlink" title="2.1.1.   CPU"></a>2.1.1.   CPU</h5><p>在资金的充足下，一般来说CPU的数量越多，主频越高，那么服务器的性能也就会越好。在实际测试过程中，如果在大压力下持续观察CPU的使用率很低，那么CPU的资源基本上是可以满足服务器要求的。这样的情况其实是有点浪费CPU资源的，比较理想的情况是压力不大的时候CPU利用率比较低，压力上来之后CPU利用率保持在60%-70%。  </p><p>大部分的CPU在同一时间内只能运行一个线程，但是超线程的处理器可以在同一个时间运行多个线程，我们可以利用处理前超线程特性提高系统性能。虽然采用超线程技术能同时执行两个线程，但它并不象两个真正的CPU那样，每个CPU都具有独立的资源。当两个线程都同时需要某一个资源时，其中一个要暂时停止，并让出资源，直到这些资源闲置后才能继续。因此超线程的性能并不等于两颗CPU的性能。  </p><h4 id="2-1-2-内存"><a href="#2-1-2-内存" class="headerlink" title="2.1.2.   内存"></a>2.1.2.   内存</h4><p>内存的大小也是影响服务器性能的一个重要因素。内存太小，系统进程要被阻塞，应用程序会变得缓慢，甚至是失去响应；如果太大的话，也是造成一种浪费。Linux系统中采用物理内存和虚拟内存两种方式，使用虚拟内存可以缓解物理内存的不足，但是如果占用过多的虚拟内存的话，应用程序的性能会明显的下降。  </p><h4 id="2-1-3-网络带宽"><a href="#2-1-3-网络带宽" class="headerlink" title="2.1.3.   网络带宽"></a>2.1.3.   网络带宽</h4><p>网络带宽的大小限制了客户端与服务器交互的流量，相对其他硬件资源，网络带宽在价格上更贵。这需要我们合理预估服务器的可服务器能力，需要占用的带宽资源。  </p><h4 id="2-1-4-磁盘IO"><a href="#2-1-4-磁盘IO" class="headerlink" title="2.1.4.   磁盘IO"></a>2.1.4.   磁盘IO</h4><p>目前磁盘都是机械方式运作的，主要体现在磁盘读写前寻找磁道的过程。磁盘自带的读写缓存大小，对于磁盘读写速度至关重要。读写速度快的磁盘，通常都带有较大的读写缓存。磁盘的寻道过程是机械方式，决定了其随机读写速度将明显低于顺序读写。在我们做系统设计和实现时，需要考虑到磁盘的这一特性  </p><h3 id="2-2-操作系统及软件"><a href="#2-2-操作系统及软件" class="headerlink" title="2.2.  操作系统及软件"></a>2.2.  操作系统及软件</h3><h5 id="2-2-1-版本"><a href="#2-2-1-版本" class="headerlink" title="2.2.1.   版本"></a>2.2.1.   版本</h5><p>不同的操作系统在内核实现上可能各不相同，因而对运行在上面的应用程序来说可能影响比较大。  </p><p>笔者并没有做过分析不同操作系统对服务器性能的影响，因为只用过Linux开发服务器程序。Linux操作系统在这十几年发展的异常迅猛，目前大部分的服务器都是运行在Linux操作系统上的。Linux目前具有最好的生态系统，服务器端的各种软件都为它而设计，默认都认为你是在 Linux 上跑，你要是整一个非 Linux 的服务器，你得有足够的心理准备，因为出现任何问题，你可能未必能找到能帮你解决问题的人。  </p><h4 id="2-2-2-参数配置"><a href="#2-2-2-参数配置" class="headerlink" title="2.2.2.   参数配置"></a>2.2.2.   参数配置</h4><p>先说一个小故事。福特公司一套重要设备出现故障，找了很多人来维修，结果都没有维修好，没办法了，就在购买设备的英国公司高价聘请一位工程师过来维修，工程师来到之后，反复查找原因，最后在一个小零件上划了一条线，然后对旁边福特公司的人说，在划线的地方切掉就好了，果不其然，切掉之后故障真的解除了，按照合约，福特公司应支付公司一万美元，周围的人都唏嘘不已，感叹一条线就可以价值一万美元，工程师回答到：那条线只值一美元，而怎样找到那条线值9999美元。  </p><p>我们在测试服务器的过程中，经常会遇到性能上不去。查看CPU，网络，IO消耗都挺低的，就是定位不到问题的原因。有经验的程序员可能会告诉你你把某个参数修改一下，立马性能噌噌噌上去了。比如mysql相关设置，系统文件描述符，缓冲区大小，time_wait快速回收设置等，甚至是线程池配置的线程个数也会对服务器的性能产生较大的影响。  </p><p>关于数据库参数的设置，比如mysql的配置文件my.cnf文件中，修改不同的配置（比如innodb_flush_log_at_trx_commit 设置为0，1还是2 ）可能会对数据库的读写性能影响很大。  </p><h4 id="2-2-3-应用程序本身实现"><a href="#2-2-3-应用程序本身实现" class="headerlink" title="2.2.3.   应用程序本身实现"></a>2.2.3.   应用程序本身实现</h4><p>比如程序中需要频繁申请内存，使用bzero和memset对服务器性能影响差距可能会很大。  </p><p>另外程序中的一些查询操作，采用不同的数据结构，可以实现时间和空间上的相互转化，从而影响服务器的性能。  </p><h2 id="3-Linux下的数据监控工具"><a href="#3-Linux下的数据监控工具" class="headerlink" title="3. Linux下的数据监控工具"></a>3. Linux下的数据监控工具</h2><h3 id="3-1-Vmstat"><a href="#3-1-Vmstat" class="headerlink" title="3.1. Vmstat"></a>3.1. Vmstat</h3><p>Vmstat，virtual memmory statistics（虚拟内存统计），主要是对操作系统的内存信息、进程状态、cpu活动等进行监视，但是它不能对某个进程进行深入的分析。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7aUzjib2mpwyibh8GDrDrp8MoTalMAJRBH2zvO0SQhdabMSGg4feOsxbA/640?wx_fmt=jpeg" alt="image">  </p><p>Procs中r列表示运行和等待CPU时间片的进程数，如果r值长期大于CPU个数，说明CPU资源不够用啦，可以适当增加CPU数量。  </p><p>Procs中b列表示当前等待资源的进程数，包括等待I/O，内存等。  </p><p>Swpd列表示切换到内存交换区的KB数，一般si，so为0的话基本不影响系统的性能。  </p><p>Cache是page cache的内存数量，Linux会把空闲的物理内存的一部分拿来做文件和目录的缓存，以便提高程序执行的性能。如果cache的值较大的话，说明缓存了太多的文件，如果bi值小的话，说明文件系统效率比较高。  </p><p>Si是每秒从磁盘读入虚拟内存的大小，如果这个值一直大于0，表示物理内存不够用或者内存泄露了，需要查找耗内存进程解决掉。  </p><p>Bi，bo是表示从块设备读入数据的总量以及写到块设备的数据总量。如果bi+bo值比较大，而且wa值也比较大的话，说明系统磁盘I/O可能有问题，性能不高。  </p><p>In和cs是每秒钟的设备中断数以及上下文切换数。它们很大的话，表面内核消耗的CPU时间较多。  </p><h3 id="3-2-Top"><a href="#3-2-Top" class="headerlink" title="3.2. Top"></a>3.2. Top</h3><p>Top是一个动态显示过程，即可以通过用户按键来不断刷新当前状态。它可以按照系统中当前进程的CPU利用率以及占用的内存大小进行排序，可以比较快速定位出系统响应迟钝的原因。如果在前台执行该命令，它将独占前台，直到用户终止该程序为止。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7uyVhIzfMjOK5qEMjEMbbicwhDl3KozIE9Yg8VZbSAPg8yibzczD8vKlg/640?wx_fmt=jpeg" alt="image"> </p><p>top是一个显示数据较多的工具，第一行显示的是系统的开机运行时间，机器的CPU负载信息；第二行显示当前系统任务的总数，以及各个状态的进程数；第三行显示的是CPU资源的使用情况总览；第四行显示内存的使用情况总览；第五行显示的是内存交换区的使用情况总览；后面开始是每个进程对资源使用的情况。  </p><h3 id="3-3-Nmon"><a href="#3-3-Nmon" class="headerlink" title="3.3.  Nmon"></a>3.3.  Nmon</h3><p>Nmon提供对CPU、内存、网络、磁盘等系统资源占用情况分析，相比其他Linux命令获取到的数据，nmon的功能更为集中、配置性更强。通过nmon采集到数据之后可以在windows系统中使用nmon_analyser做数据的展示以及分析工作，可视化效果比较好。  </p><p>由于一般Linux系统都不自带nmon，使用之前需要下载安装。  </p><h3 id="3-4-Uptime"><a href="#3-4-Uptime" class="headerlink" title="3.4. Uptime"></a>3.4. Uptime</h3><p>Uptime命令显示系统已经运行了多长时间，它依次显示当前时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。  </p><p>关于系统平均负载，它表示在特定时间间隔内运行队列中的平均进程数。如果一个进程满足以下条件则其就会位于运行队列中：没有在等待I/O操作的结果；没有主动进入等待状态；没有被停止。  </p><h3 id="3-5-Netstat"><a href="#3-5-Netstat" class="headerlink" title="3.5.  Netstat"></a>3.5.  Netstat</h3><p>Netstat命令可以显示本机的网络连接情况，监听端口以及路由表等各种网络相关信息。Netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。  </p><p>比较常用的可以用次命令查看当前开启监听的服务器进程信息以及端口信息。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7ZNdk6KukibDGHBqPDPFPLJpHqib3iaAYE9yhcrsAia0s7Te9rVYMOxrS2g/640?wx_fmt=jpeg" alt="image">  </p><h3 id="3-6-Free"><a href="#3-6-Free" class="headerlink" title="3.6.  Free"></a>3.6.  Free</h3><p>Free是监控Linux使用情况最常用的命令。  </p><p><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7QcDjcBdOpd4ReiaVQMeoxYtZ5gtaZe17hKEzBoXKtpmOhRfm4Lc7Olg/640?wx_fmt=jpeg" alt="image">  </p><p>“Free -m”可以查看以M为单位的使用情况，这里主要观察free和cached两列。  </p><p>一般来说，如果应用程序可用内存/系统物理内存&gt;70%时，表明目前系统内存资源比较充足，不影响系统性能；如果应用程序可用内存/系统物理内存&lt;20%时，表明目前系统内存资源比较紧缺，需要释放其他程序内存或者增加内存；如果应用程序可用内存/系统物理内存在20%-70%之间，表明目前系统的内存资源基本满足应用需求，暂时不影响系统的性能  </p><h3 id="3-7-Sar"><a href="#3-7-Sar" class="headerlink" title="3.7. Sar"></a>3.7. Sar</h3><p>Sar也是一个强大的分析系统性能的工具，它可以比较全面的获取系统的CPU，运行队列，磁盘IO，分页，内存，CPU中断，网络等多项数据。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc74HZibcLbxKLdyY0AszSFmlWtrS2roXKABh9GJvGPdGHIZKibOibFzf8TQ/640?wx_fmt=jpeg" alt="image"><br>上图是使用sar获取系统CPU的整体负责情况，每隔1秒统计一次，统计3次，最后会给出3次的平均值。需要查看其他的数据可以查看手册使用。  </p><h3 id="3-8-Iostat"><a href="#3-8-Iostat" class="headerlink" title="3.8.  Iostat"></a>3.8.  Iostat</h3><p>Iostat是I/O statistics的缩写，主要功能是对系统的磁盘I/O操作进行监控。它的输出主要显示磁盘读写操作的统计信息，同时也会给出CPU的使用情况。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7wsOoyicvK4ugliayMCaJGTTAMlXY05ytmUg1rkx6jGbGpl2DwrrdJHpA/640?wx_fmt=jpeg" alt="image">  </p><p>这里显示的是查看CPU和磁盘的信息，统计间隔2秒，共3次。  </p><h3 id="3-9-Valgrind"><a href="#3-9-Valgrind" class="headerlink" title="3.9. Valgrind"></a>3.9. Valgrind</h3><p>Valgrind是一款广泛用于监控程序运行过程进行内存调试、内存泄漏检测以及性能分析的工具。它会给出内存泄漏的统计，包括definitely lost,indirectly lost,possibly lost,still reachable ,suppressed等，我们可以使用valgrind来测试程序中内存不规范使用的部分。同时对于地址越界问题也可以通过valgrind扫出来，它会统计invalid write的情况。  </p><h2 id="4-服务器的性能优化"><a href="#4-服务器的性能优化" class="headerlink" title="4. 服务器的性能优化"></a>4. 服务器的性能优化</h2><h3 id="4-1-存储的优化"><a href="#4-1-存储的优化" class="headerlink" title="4.1. 存储的优化"></a>4.1. 存储的优化</h3><p>IO相对来说比较耗时，我们都知道越靠近CPU的存储，其访问速度越快，但是其价格越贵。下图来展示了不同存储的容量以及访问时间。  </p><p>目前很多同学在优化服务器性能的时候都会从存储这方面入手。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7MHDxSkicjSIYGFibxxmCB9ib1Qz2scSZqJLnPG1o7ibP8SBjibq03KkKZ0w/0?wx_fmt=gif" alt="image">  </p><h4 id="4-1-1-用内存换时间"><a href="#4-1-1-用内存换时间" class="headerlink" title="4.1.1. 用内存换时间"></a>4.1.1. 用内存换时间</h4><h6 id="4-1-1-1-增加缓存"><a href="#4-1-1-1-增加缓存" class="headerlink" title="4.1.1.1. 增加缓存"></a><strong>4.1.1.1. 增加缓存</strong></h6><p>很多web应用是有大量的静态内容，这些静态内容主要都是一些小文件，并且会被频繁的读，采用Apache以及nginx作为web服务器。在web访问量不大的时候，这两个http服务器可以说是非常的迅速和高效，如果负载量很大的时候，我们可以采用在前端搭建cache服务器，将服务器中的静态资源文件缓存到操作系统内存中直接进行读操作，因为直接从内存读取数据的速度要远大于从硬盘读取。这个其实也是增加内存的成本来降低访问磁盘带来的时间消耗。</p><h6 id="4-1-1-2-内存数据库"><a href="#4-1-1-2-内存数据库" class="headerlink" title="4.1.1.2. 内存数据库"></a><strong>4.1.1.2. 内存数据库</strong></h6><p>内存数据库，其实就是将数据放在内存中直接操作的数据库。相对于磁盘，内存的数据读写速度要高出几个数量级，将数据保存在内存中相比从磁盘上访问能够极大地提高应用的性能。内存数据库抛弃了磁盘数据管理的传统方式，基于全部数据都在内存中重新设计了体系结构，并且在数据缓存、快速算法、并行操作方面也进行了相应的改进，所以数据处理速度比传统数据库的数据处理速度要快很多。  </p><p>但是安全性的问题可以说是内存数据库最大的硬伤。因为内存本身有掉电丢失的天然缺陷，因此我们在使用内存数据库的时候，通常需要，提前对内存上的数据采取一些保护机制，比如备份，记录日志，热备或集群，与磁盘数据库同步等方式。  </p><p>对于一些重要性不高但是又想要快速响应用户请求的部分数据可以考虑内存数据库来存储，同时可以定期把数据固化到磁盘。  </p><h6 id="4-1-1-3-RDD"><a href="#4-1-1-3-RDD" class="headerlink" title="4.1.1.3. RDD"></a><strong>4.1.1.3. RDD</strong></h6><p>这里图个新鲜，说说内存换时间在大数据云计算相关领域的一些应用。Spark最近很火，它的核心要数RDD了，RDD最早来源与Berkeley实验室的一篇论文《Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing》。现有的数据流系统对两种应用的处理并不高效：一是迭代式算法，这在图应用和机器学习领域很常见；二是交互式数据挖掘工具。这两种情况下，将数据保存在内存中能够极大地提高性能。这里不详细说RDD了，只是想说程序员一直是觊觎内存的读取速度的。</p><h4 id="4-1-2-使用SSD等"><a href="#4-1-2-使用SSD等" class="headerlink" title="4.1.2.  使用SSD等"></a>4.1.2.  使用SSD等</h4><p>除了对内存方面的优化，还可以对磁盘这边进行优化。跟传统机械硬盘相比，固态硬盘具有快速读写、质量轻、能耗低以及体积小等特点。但是ssd的价格相比传统机械硬盘要贵，有条件的可以使用ssd来代替机械硬盘。</p><h3 id="4-2-数据库优化"><a href="#4-2-数据库优化" class="headerlink" title="4.2.  数据库优化"></a>4.2.  数据库优化</h3><p>大部分的服务器请求最终都是要落到数据库中，随着数据量的增加，数据库的访问速度也会越来越慢。想要提升请求处理速度，必须要对原来的单表进行动刀了。目前主流的Linux服务器使用的数据库要属mysql了，如果我们使用mysql存储的数据单个表的记录达到千万级别的话，查询速度会很慢的。  </p><p>根据业务上合适的规则对数据库进行分区分表，可以有效提高数据库的访问速度，提升服务器的整体性能。  </p><p>另外对于业务上查询请求，在建表的时候可以根据相关需求设置索引等，以提高查询速度。  </p><h3 id="4-3-利用多核优势"><a href="#4-3-利用多核优势" class="headerlink" title="4.3. 利用多核优势"></a>4.3. 利用多核优势</h3><p>现在运行服务器的主流机器配置都是多核CPU的，我们在设计服务器的时候可以利用多核心的特点，采用多进程或者多线程的框架。  </p><p>关于选择多线程还是多进程可以根据实际的需求，结合各自的优缺点进行选择。  </p><p>对于多线程的使用，特别是使用线程池的时候可以通过测试不同线程池服务器的性能来设置合适的线程池。  </p><h3 id="4-4-选择合适的IO模型"><a href="#4-4-选择合适的IO模型" class="headerlink" title="4.4.  选择合适的IO模型"></a>4.4.  选择合适的IO模型</h3><p>《UNIX网络编程卷1:套接字联网API》中有一幅图比较经典。<br><img src="http://img.chuansong.me/mmbiz/MDcf9yruyu3PSFmovTxnSCupSKApMFc7TS8Sab5XbCibHdGgb6HvWNASNPhmkGSib0ibFibibEBfcDgTX7GjlmkesOg/0?wx_fmt=gif" alt="image"></p><p>信号驱动：首先开启套接口信号驱动I/O功能,并通过系统调用sigaction安装一个信号处理函数。当数据报准备好被读时，就为该进程生成一个SIGIO信号。随即可以在信号处理程序中调用recvfrom来读数据报，井通知主循环数据已准备好被处理中。也可以通知主循环，让它来读数据报。  </p><p>异步的IO模型：告知内核启动某个操作，并让内核在整个操作完成后(包括将数据从内核拷贝到用户自己的缓冲区)通知我们。  </p><p>这里并不是说一定要用某个模型，epoll也并不是在所有情况下都比select性能要好的，在选择的时候还是要结合业务需求来。  </p><h3 id="4-5-分布式部署程序"><a href="#4-5-分布式部署程序" class="headerlink" title="4.5.  分布式部署程序"></a>4.5.  分布式部署程序</h3><p>当单机服务器已经找不到合适的优化点时，我们可以通过分布式部署来提高服务器的响应能力。优秀的服务器开发都会为自己的服务器的扩容，容灾提出一些解决方案。个人觉得服务器设计的时候简单点比较好，这样后期扩容的时候会很方便。  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务器性能测试是一项比较繁琐的事情，作为没有做过性能测试的同学需要事先了解服务器的协议是如何定义的，建立框架管理机器人、统计测试中机器人收到回包的结果以及压测过程中各项性能数据的变化。在完成了测试的过程后，可以从硬件、操作系统以及应用程序等多个方面进行对性能结果进行定位。最后在明确业务需求的前提下，通过存储优化、数据库优化以及分布式部署程序等手段完成服务器的性能优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="测试文档" scheme="http://wysh.site/categories/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="测试文档" scheme="http://wysh.site/tags/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Web安全测试基础一 （一：跨SQL注入，二：跨站脚本攻击，三，命令执行漏洞，四，跨站请求伪造，五，文件上传漏洞，六，文件包含漏洞）</title>
    <link href="http://wysh.site/2017/06/23/Web%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://wysh.site/2017/06/23/Web安全测试基础/</id>
    <published>2017-06-23T00:45:34.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Web安全漏洞概念及原理分析"><a href="#一、Web安全漏洞概念及原理分析" class="headerlink" title="一、Web安全漏洞概念及原理分析"></a>一、Web安全漏洞概念及原理分析</h2><h3 id="1-1-跨SQL注入"><a href="#1-1-跨SQL注入" class="headerlink" title="1.1 跨SQL注入"></a>1.1 跨SQL注入</h3><p><strong>概念</strong>：SQL Injection按照字面意思来翻译就是“SQL注射”，常被叫做“SQL注入”，它的含义就是利用某些数据库的外部接口把用户数据插入到实际数据库操作语言当中，从而达到入侵数据库乃至操作系统的目的。SQL注入漏洞形成原因是：用户输入的数据被SQL解释器执行。  </p><p><strong>原理分析：</strong> 假设如下URL存在漏洞  </p><p><a href="http://www.xxx.com/xx.asp?id=666" target="_blank" rel="noopener">http://www.xxx.com/xx.asp?id=666</a>  </p><p><strong>构造数据库原型：</strong>   </p><p>select * from table_name where id=1  </p><p>那么<strong>提交：</strong>    </p><p><a href="http://www.xxx.com/xx.asp?id=666" target="_blank" rel="noopener">http://www.xxx.com/xx.asp?id=666</a> and [查询语句]  </p><p>select * from table_name where username=‘or’=‘or’ And pass=‘or’=’or’  </p><p>这样，如果页面和id=666返回相同的结果，就说明附加查询条件成立，如果不同，就说明不成立。  </p><p><strong>手工判断能否进行SQL注入方法：</strong>    </p><p>第一步先把IE菜单=&gt;工具=&gt;Internet选项=&gt;高级=&gt;显示友好 HTTP 错误信息前面的勾去掉。否则，不论服务器返回什么错误，IE都只显示为HTTP 500服务器错误，不能获得更多的提示信息。  </p><p>简单判定有无漏洞： 粗略型：提交单引号’  </p><p>逻辑型（数字型注入）：and 1=1 / and 1=2  </p><p>逻辑型（字符型注入）：’ and ‘1’=’1 / ‘ and ‘1’=’2  </p><p>逻辑型（搜索型注入）： 关键字%’ and 1=1 and ‘%’=’% / 关键字%’ and 1=2 and ‘%’=’%  </p><p>危害：获取数据库信息，脱裤，获取服务器权限，植入webshell，获取服务器后门，读取服务器敏感文件等。  </p><p><strong>示例：</strong>  </p><p>如下，user id查询框中输入1，则正常显示结果如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNeuFYQXMXyPZGvMicnNsAS6sqjRALlkofaGJuHwcIvYFJicGiaEIHXgblHeru3dKCjy9Z91mL6WFicPQ/0?wx_fmt=png" alt="image">  </p><p>但是，当user id查询框中输入1’时，则显示输出如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNeuFYQXMXyPZGvMicnNsAS6mKCEthLiaribe6OIhf3qoz9theKIQwz7bk5e8ztMqCSS5QVyAOuqw8Xw/0?wx_fmt=png" alt="image">  </p><p>则该处存在sql注入漏洞。  </p><p>目前流行的注入工具有：<strong>SQLMap、Pangolin（穿山甲）、Havij</strong>等。  </p><h3 id="1-2-跨站脚本攻击（XSS）"><a href="#1-2-跨站脚本攻击（XSS）" class="headerlink" title="1.2 跨站脚本攻击（XSS）"></a>1.2 跨站脚本攻击（XSS）</h3><p><strong>概念：</strong> 通常指黑客通过“HTML注入”篡改了网页，插入了恶意的脚本，从而在用户浏览网页时，实现控制用户浏览器行为的一种攻击方式。  </p><p><strong>全称：</strong> Cross Site Script（本来缩写是CSS，但是为了和层叠样式表CSS有所区别，所以在安全领域叫做“XSS”）  </p><p><strong>危害：</strong> 盗取用户信息、篡改页面钓鱼、制造蠕虫等。  </p><p><strong>XSS分类：</strong> 存储型、反射型、DOM型  </p><blockquote><p><strong>反射型XSS</strong>  </p></blockquote><p>反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功  </p><p>如下，查询name信息，正常用户请求：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaead33ibWaTOG4ZKKHX5HoaWQY7yUia6UuVptaPQfyMTWAgQmC7eVRRVG6gA/0?wx_fmt=png" alt="image">  </p><p>如果那name参数1修改成，则显示结果：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadIQLibZ8H6uRHP7JDR8DUDYzuCniabe63LrZ1ouOGdqSsUQvNT8ib657tA/0?wx_fmt=png" alt="image">  </p><p><strong>存储型XSS</strong>  </p><p>如下，正常留言或者评论，显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadCQNziaPT5nzvnCQGYZDswzibPY7UadP0nEwp6sibTiavnlTvDUpmJE99uw/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadGOG9siaQzy5JCVRz3V9re9mqV5g5uMOXTOVibOUt4eDIaRicMIOzbsWMA/0?wx_fmt=png" alt="image">  </p><p>如果将message信息写成，则显示  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadw5pbD7KgK55aiaAJ8c1NGVLtXExNG0Q7vBqR8Wmo0EjyqPuPOBpIwUg/0?wx_fmt=png" alt="image">  </p><p><strong>DOM XSS</strong>  </p><p>基于DOM型的XSS是不需要与服务器端交互的，它只发生在客户端处理数据阶段。  </p><p>下面一段经典的DOM型XSS示例。  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeaduIQO5JiclvGq4CdTgfXHtk7NgIlbnSb3SLFogr1cianaM1mRfqmPrlCA/0?wx_fmt=png" alt="image">  </p><p>上述代码的意思是获取URL中content参数的值，并且输出，如果输入<a href="http://www.xxx.com/dom.html?content=，就会产生XSS漏洞。" target="_blank" rel="noopener">http://www.xxx.com/dom.html?content=，就会产生XSS漏洞。</a>  </p><p>各种类型原理分析  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMibkTClGv4t1omNHCMOiaeadEX3QXTFyGKfRKjjtMN5RsYVSmQp0wauxYsHwOJbfv6R3BVggYL6LIw/0?wx_fmt=png" alt="image">  </p><h3 id="1-3-命令执行漏洞"><a href="#1-3-命令执行漏洞" class="headerlink" title="1.3 命令执行漏洞"></a>1.3 命令执行漏洞</h3><p><strong>漏洞产生原因:</strong> 程序中因为某些功能需要执行系统命令，并通过网页传递参数到 后台执行。然而最根本的原因是没有对输入框的内容做代码过滤，正常情况下输入框只能接收指定类型的数据。  </p><p><strong>漏洞影响:</strong>  命令注入漏洞可以使攻击者在受攻击的服务器上执行任意的系统命令。  </p><p><strong>示例:</strong>  </p><p>正常情况下，在 ip 地址输入框中输入 127.0.0.1，结果如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTZGRcw9F10xORucTMNQTYVibatNznw2hf7N0eyjeN82aqTv54f7mOjtw/0?wx_fmt=png" alt="image">  </p><p>但是，当我们输入 127.0.0.1&amp;&net; user 时，输出结果如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dT1wNHsejdz6Bbtd7pUic6fntrZOIsC71rUIfz7iaAFNcf4VeuQAw5ibsPQ/0?wx_fmt=png" alt="image">  </p><p>结果显示不仅仅执行了 ping 127.0.0.1 操作，而且也执行了 net user 命令，我们可 以把 net user 换成其他任意命令进行攻击。  </p><h3 id="1-4-跨站请求伪造-CSRF"><a href="#1-4-跨站请求伪造-CSRF" class="headerlink" title="1.4 跨站请求伪造(CSRF)"></a>1.4 跨站请求伪造(CSRF)</h3><p><strong>概念:</strong> Cross-Site request forgery，利用用户已登录的身份，在用户毫不知情的情 况下，以用户的名义完成非法操作。  </p><p>CSRF 攻击迫使终端用户在通过验证后 web 应用中执行不必要的操作。在社会工 程帮助下(如通过电子邮件/聊天发送的链接)，攻击者可能会迫使 Web 应用程序 用户执行攻击者所选择的行动。  </p><p><strong>危害:</strong> 执行恶意操作(“被转账”、“被发表垃圾评论”等)、制造蠕虫等 漏洞影响:当一个成功的 CSRF 漏洞的目标是普通用户时，它能够危害终端用户 的数据操作。但如果最终的目标用户是管理员账户，一个 CERF 攻击可以损害整 个 Web 应用程序。  </p><p><strong>示例:</strong>  </p><p>如下，正常修改密码页面，New password 输入 test，Confirm new password 输入 test，然后提交，密码修改成功。   </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTmz78um8aVZvV3sfp0jQUziciacB3oN6VibU3wSW87tBfYAAnG7ViapZEiaw/0?wx_fmt=png" alt="image">  </p><p>我们发现，这个修改密码的请求为 “ <a href="http://10.4.70.188/DVWA-1.9/vulnerabilities/csrf/?password_new=test&password;" target="_blank" rel="noopener">http://10.4.70.188/DVWA-1.9/vulnerabilities/csrf/?password_new=test&password;</a>_ conf=test&Change;=Change ”， 此 时 ， 我 们 打 开 新 的 窗 口 ， 修 改 password_new=password 和 password_conf=password，访问显示如下:  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdNlfwwwWILDE3P5CgrnI4dTEsajjB72Ns0ubsFL1icX4HxUKVAbQ7vLvg30ygt5SYyfYR5cM1SoIlw/0?wx_fmt=png" alt="image">  </p><p>此时，密码已经被修改成功，如果该 URL 被黑客通过电子邮件或其他途径精心 伪造，诱惑你触发点击，则可直接修改当前用户配置，后果不堪设想。  </p><h3 id="1-5-文件上传漏洞"><a href="#1-5-文件上传漏洞" class="headerlink" title="1.5 文件上传漏洞"></a>1.5 文件上传漏洞</h3><p>文件上传漏洞，是指用户上传了一个可执行的脚本文件，并通过此脚本文件获取了执行服务器端命令的能力。这种攻击方式是最为直接和有效的，有时候几乎没有什么技术门槛。  </p><p>如下，选择正常的图片文件test.jpg上传，上传成功后显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSiaTyibL3CcodZxlabpYicg4pBu6CbmjPGYFvslrpuodyy2DfBWXq9fghQ/0?wx_fmt=png" alt="image">  </p><p>我们根据显示的路径信息，推测上传图片的地址为“<a href="http://10.4.70.188/DVWA-1.9/hackable/uploads/test.jpg”，在浏览器中打开：" target="_blank" rel="noopener">http://10.4.70.188/DVWA-1.9/hackable/uploads/test.jpg”，在浏览器中打开：</a>  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSfo1IwEia6WhxdCZ9cwZD5fnN2obnMGuHQnDwoU2DPBJyef9yZLwAzAQ/0?wx_fmt=png" alt="image">  </p><p>那么，我们写一个文件phpinfo.ini，内容为，上传成功后，我们访问该文件显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSic81UkEE5gL2bdUeFJPtpnyZebAibvEDBia61jZe2yT2ibgSHlgibdOxbGg/0?wx_fmt=png" alt="image">  </p><p>如果我们编辑一句话shell：” “为cmd.php文件，上传成功后访问文件url并且传参cmd=phpinfo()，查看结果如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSjibvswpiaqmC7RUE4RCiakml8tAyI8MYRLQBJ4hbJZMpksmIfnl2CyQQA/0?wx_fmt=png" alt="image">  </p><p>我们修改cmd参数为任意命令，如cmd= system(‘dir’); ，显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdPicn7shKiaL4BoicVMZOFqCdSJBfU82pYNGCMKOUqzRbcL2xVaDtiaOKFOBq7tnpHd15XhDMPRBfNHFw/0?wx_fmt=png" alt="image">  </p><p>一旦被黑客利用，后果不堪设想。  </p><h3 id="1-6-文件包含漏洞"><a href="#1-6-文件包含漏洞" class="headerlink" title="1.6 文件包含漏洞"></a>1.6 文件包含漏洞</h3><p>如下页面，点击file1、file2、file3，页面地址都会随之变化为  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarNC2CELvmwtTTX2Muk7dFhx85sYabX7HricrrHFK14T6r7YA0sJr74bQ/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiaricpOlozTPkUv86wjBpW7yNAHx6cicVYMNbsCYNujgdYXm6iaOoJl0KClw/0?wx_fmt=png" alt="image">  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarp9Bj02HHsys7uEdq6hnJlENshtTJFELMFJ190ZwOvb8SXPLTzdG8Cg/0?wx_fmt=png" alt="image">  </p><p>由此，page参数就是我们可以利用的地方，我们修改page参数为随意字段，如abc.php访问，则显示：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarkFcpCOmg3jo1CuoG2rFKSb3lYOstBJmGA7HOjeiaVjCZWRkzcnl2CibQ/0?wx_fmt=png" alt="image">  </p><p>报错信息中，我们获取到文件的物理路径，可以利用该漏洞读取本地文件，如读取dvwa目录下的php.ini文件，将文件路径进行如下修改：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarM7OKmOjZK2LmK6epwer4U8DibaoEKItsIl5f54DO1TkWcwOgiaricYeSQ/0?wx_fmt=png" alt="image">  </p><p>也就是page参数为”../../php.info”，访问显示如下：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdMtXr4AoZWG3Upm16D8mIiarHHEbN4Ywu3Q3I1iadzsR4WCJF6Da5C4tmEVUv7kHIZbHbKL7LBAMSog/0?wx_fmt=png" alt="image">  </p><p>成功读取服务端文件信息，当然，攻击者肯定不满足读取本地文件，攻击者可以修改成可执行php代码进行攻击。  </p><h3 id="1-7-点击劫持（ClickJacking）"><a href="#1-7-点击劫持（ClickJacking）" class="headerlink" title="1.7 点击劫持（ClickJacking）"></a>1.7 点击劫持（ClickJacking）</h3><p>点击劫持是一种视觉上的欺骗手段。攻击者使用一个透明的、不可见的iframe，覆盖在一个网页上，然后诱使用户在该网页上进行操作，此时用户将在不知情的情况下点击透明的iframe页面。通过调整iframe页面的位置，可以诱使用户恰好点击在iframe页面的一些功能性按钮上。也就是通过覆盖不可见的框架误导受害者点击而造成的攻击行为。   </p><p>隐蔽性高，骗取用户操作，也称UI-覆盖攻击，是利用iframe或者其他标签的属性，如flash也可以。  </p><h3 id="1-8-URL跳转漏洞与钓鱼"><a href="#1-8-URL跳转漏洞与钓鱼" class="headerlink" title="1.8 URL跳转漏洞与钓鱼"></a>1.8 URL跳转漏洞与钓鱼</h3><p>借助未验证的URL跳转，将应用程序引导到不安全的第三方区域，从而导致的安全问题。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十二:Bug管理规范）</title>
    <link href="http://wysh.site/2016/11/23/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81%E4%BA%8CBug%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <id>http://wysh.site/2016/11/23/产品测试规范十二Bug管理规范/</id>
    <published>2016-11-23T00:34:34.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-11-Bug管理规范"><a href="#1-11-Bug管理规范" class="headerlink" title="1.11 Bug管理规范"></a>1.11 Bug管理规范</h2><h3 id="1-11-1-bug提交规范"><a href="#1-11-1-bug提交规范" class="headerlink" title="1.11.1 bug提交规范"></a>1.11.1 bug提交规范</h3><p>Bug的报告要求描述内容清晰、简介、易懂，让用根据简要描述就可以大致了解问题所在：  </p><p><strong>缺陷ID</strong>  </p><p>BUG的唯一标识，由BUG管理工具自动生成。  </p><p><strong>项目名称</strong>  </p><p>每个要测试的软件项目都有唯一的名称。  </p><p><strong>问题类型（严重程度）</strong>  </p><p>BUG所属的类型（即严重程度），包括致命问题、严重问题、一般  问题、优化建议等。缺陷标题简明的对BUG进行概要描述。  </p><p><strong>缺陷标题</strong>  </p><p>简明的对BUG进行概要描述。  </p><p><strong>优先级</strong>  </p><p>BUG解决的优先级。  </p><p><strong>所属模块</strong>  </p><p>项目的各个组成模块。  </p><p><strong>测试版本</strong>  </p><p>提交BUG时，一定要正确填写产生BUG的软件版本号。  </p><p><strong>分派人</strong>  </p><p>BUG需要指派处理的人员，如果不清楚统一给项目负责人。  </p><p><strong>报告人</strong>  </p><p>报告BUG的人员。  </p><p><strong>测试环境</strong>  </p><p>可根据实际描述当前测试的软硬件环境，以作为参考。</p><p><strong>详细描述</strong>  </p><p>在详细描述中，可对BUG产生的前提条件、操作的步骤、实际结 果、预期结果等进行描述。</p><p><strong>文字注释与附图</strong>  </p><p>在提交BUG时，可上传必要的附图，便于确认错误的表现形式和 错误位置等。  </p><p>在提交BUG时，提交人可根据提交BUG的紧急程度，选择对应的“优先级”，同时建议开发人员在处理BUG的时候能够根据优先级进行处理，优先级别较高的可以最先进行处理。  </p><p>在BUG详细描述中，可在从BUG产生的前提条件、操作的步骤、实际结果、预期结果等方面进行描述：  </p><ol><li><p>前提条件：有些BUG的产生是需要在一定条件下才会出现，例如浏览器、分辨率、Office版本等，所以就要求在描述时描述清楚前提条件；  </p></li><li><p>BUG的操作步骤：详细的、有次序的、每一步的操作步骤，包括输入的数据，尽可能的重新操作的步骤；</p></li><li><p>实际结果：指的我按照以上的操作步骤，最后得出的结果是什么， 例如我点击“增加”按钮后出现白页，这就是实际结果；</p></li><li><p>预期结果：指的我按照以上的操作步骤，我想要得到的结果是什么，例如我点击“增加”按钮想要得到的预期结果是提示我“增加成功”提示；</p></li><li><p>图文描述：在必要的情况下可上传截图并注释文字，这样更便于确认错误的表现形式和错误位置等。</p></li></ol><p>一般情况下，开发人员在提交BUG时，“分派人”可指定对应的处理人员，如果无法确定“分派人”，可分派给项目的负责人，然后由项目负责人进行二次分派给对应的开发人员进行处理。在分派时可以添加一些对应的批注信息。</p><h3 id="1-1-2-bug级别定义"><a href="#1-1-2-bug级别定义" class="headerlink" title="1.1.2 bug级别定义"></a>1.1.2 bug级别定义</h3><p>具体的优先级别有以下几种   </p><p><strong>1</strong>  </p><p><strong>致命问题(一级bug)</strong>  </p><p>致命问题：不能完全满足系统正常的功能操作要求，系统停止运行，系统的重要部件无法运行，系统崩溃或挂起等导致系统不能继续运行。  </p><ol><li><p>常规操作下因程序问题导致系统崩溃，迫使整个系统无法使用（其中非程序问题有：系统配置、数据结构变动、session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。  </p></li><li><p>常规操作下因程序问题导致程序重启、死机或非法退出。</p></li><li><p>常规操作下系统出现死循环。</p></li><li><p>数据丢失或异常。</p></li><li><p>模块间数据传递及取值错误（如：输入A，预期结果应该是B，但实际结果不是B等）。</p></li><li><p>流程输出错误（包括业务流程和事件流程。如：输入流程A，但实际流程处理中未能按A流程处理数据；点击某按钮，应跳转增加页面，结果跳转成修改页面等）。</p></li><li><p>按照需求文档，功能未在程序中体现出来，即系统无此功能（据项目经理及相关负责人确认此功能必须具备的）；功能不符合用户需求，功能实现不正确（由项目经理及相关负责人确认此功能必须具备的）。</p></li></ol><p><strong>2</strong>  </p><p><strong>严重问题(二级bug)</strong>  </p><p> 严重问题：严重地影响系统要求或基本功能的实现，且没有更正办法（重新安装或重新启动该软件不属于更正办法）。使系统不稳定、或破坏数据、或产生错误结果，或部分功能无法执行，而且是常规操作中经常发生或非常规操作中不可避免（不能用其他操作修复问题）的主要问题，系统无法满足主要的业务要求，性能、功能或可用性严重降低。  </p><ol><li><p>数据计算错误。</p></li><li><p>因程序问题迫使正在操作的流程无法继续且无其他操作可以修复问题的（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>常规操作下功能异常，如：结果与实际查询条件不一致、页面按钮点击没反应等。</p></li><li><p>功能项的某些项目（可为所有控件）使用无效（对系统非致命的）。</p></li><li><p>因程序问题迫使正在操作的流程无法继续且有其他操作可以修复问题的（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>多余功能，且该功能影响了程序的正常使用（需项目经理及相关负责人确认），如客户名称录入项需要录入汉字和英文，但程序限制了只能输入汉字等。</p></li><li><p>常规操作下，程序打印、导出的内容错误。</p></li><li><p>在程序安装配置无误的情况下相关功能js报错，且该功能影响业务流的正常进行。</p></li><li><p>在1024*768分辨率下，页面严重变形，使数据无法浏览。</p></li><li><p>在Session超时，无友情页面提示</p></li></ol><p><strong>3</strong>  </p><p><strong>中级问题（三级bug）</strong>  </p><p>系统可以满足业务要求，系统性能或响应时间变慢、产生错误的中间结果但不影响最终结果等影响有限的问题，另外，还包括系统健壮性方面的测试。</p><ol><li><p>对于一些重要数据的操作、重要环节的变动且相关的操作和变动不可挽回时，系统应给出相应的操作确认提示，防止误操作，如数据删除、审批等。</p></li><li><p>常规操作下页面跳转至错误友情提示页面，且操作其他模块，程序可正常运行（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录）。</p></li><li><p>功能实现不完整，如删除时没有考虑数据关联。</p></li><li><p>因错误操作且因程序问题导致系统崩溃，迫使整个系统无法使用（其中非程序问题有：系统配置、数据结构变动、Session超时、网络中断、人为变更数据库中的数据、系统缺少相应文件或目录等）。</p></li><li><p>数据添加、修改、查看界面中控件没有一一对应或对应控件长度、格式、验证性提示信息内容等不一致，但又不影响程序功能的进一步的操作（最终以需求规格说明书中内容规定为准）。</p></li><li><p>响应时间较慢。（不可超过1分钟）</p></li><li><p>功能性建议。</p></li><li><p>操作界面错误（包括数据窗口内列名定义、含义是否一致）。</p></li><li><p>简单的输入限制未放在前台进行控制。</p></li><li><p>虽然正确性不受影响，但系统性能和响应时间受到影响。</p></li><li><p>常规操作下，程序显示、打印、导出的内容格式错误，如页面变形、金额类数据未加货币符号等。</p></li><li><p>在程序安装配置无误的情况下相关功能js报错，且该功能不影响业务流的正常进行。</p></li><li><p>页面验证提示信息位置或内容错误，如空值验证对应位置或内容错误、提示对话框内容错误等（最终以需求规格说明书中内容规定为准）。</p></li><li><p>在1024*768分辨率下，页面变形，但不影响数据的浏览。</p></li><li><p>输入超长数据或特殊字符导致程序报黄页或跳转到友情提示页面等影响程序进一步的操作（需跳转友情页面）。</p></li><li><p>在Session超时（需友情页面）、网络中断时，出现浏览器卡死、报黄页等异常情况，且没有对应的错误捕获机制并给出友情提示。</p></li><li><p>滚动条无效，但不影响数据的显示与浏览。</p></li><li><p>界面不规范，页面表现形式、样式与其他类似功能模块不一致，且差异明显的。</p></li><li><p>必填项与非必填项应加以区别。</p></li></ol><p><strong>4</strong>  </p><p><strong>轻微问题</strong>  </p><p>轻微问题：使操作者不方便或遇到麻烦，但它不影响执行工作功能或重要功能。界面拼写错误或用户使用不方便等小问题或需要完善的问题。  </p><ol><li><p>页面表现建议。</p></li><li><p>功能操作建议。</p></li><li><p>非程序代码导致黄页（如：手动删除、修改、增加数据库中的数据；缺少相应的系统配置；项目缺少目录或文件、因不明操作导致数据库中数据不符合正常逻辑关系）。</p></li><li><p>辅助说明字体大小、颜色明显与页面整体表现形式不协调或者文字描述不清楚。</p></li><li><p>长时间操作未给用户提示（不可超过1分钟），但程序一直在正常运行的，没有出现卡死等情况，如给出旋转的loading图标或程序后台操作进度条或显示进度百分比等。</p></li><li><p>提示窗口文字未采用行业术语。</p></li><li><p>可输入区域和只读区域没有明显的区分标志，如只读区域置灰显示等。</p></li><li><p>键盘支持不好，如在可输入多行的字段中不支持回车换行，输入查询条件后不支持回车触发查询。</p></li><li><p>界面不能及时刷新，如需要重新执行查询或加载页面等（最终以需求规格说明书中内容为准）。</p></li></ol><p>以上就是产品的测试规范，囊括了从需求到测试计划、测试准备、测试执行、结果分析、上线准备、跟踪测试到项目总结的整个流程，规范了产品测试流程。</p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防    </p><p>1.10.2 app常见产品问题及预防</p><p>[TOC]  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十:Bug预防体系）</title>
    <link href="http://wysh.site/2016/11/07/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81Bug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/11/07/产品测试规范十Bug预防体系/</id>
    <published>2016-11-07T11:23:38.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-10-2-app常见产品问题及预防"><a href="#1-10-2-app常见产品问题及预防" class="headerlink" title="1.10.2 app常见产品问题及预防"></a>1.10.2 app常见产品问题及预防</h3><p><strong>01</strong>  </p><p><strong>界面适配</strong>  </p><p>a：手机分辨率为1920x7080的高分辨率手机，在调整手机字体大小时，会导致页面显示出现变形；  </p><p>b：因用户设置的特殊字体导致列表的字母条不显示；  </p><p>c：某些 banner 图片在部分机型只能显示一半。  </p><p><strong>预防方法：</strong>  </p><p>a：文字或者图片需要适配不同分辨率的机型时，建议使用dp方式进行开发，即使是使用dp,也需要考虑特殊分辨率的机型显示；  </p><p>b：适应宽度/适应高度/高宽均适应的；  </p><p>c：针对程序需求，设定合适的适配机制。  </p><p><strong>02</strong>  </p><p><strong>系统适配</strong>  </p><p>a：调用高版本API，导致某些机型进入主页显示空白页面。   </p><p><strong>预防方法：</strong>  </p><p>a：调用高版本API，需要考虑兼容性，开发团队需要制定程序API调用规范。  </p><p><strong>03</strong>  </p><p><strong>交互适配（1）</strong>  </p><p>a：在输入框操作时，调出系统输入法软键盘后，没有有效启用键盘上的 “下一项”、“确定”、“搜索”等按键；  </p><p>b：系统软键盘，在关闭当前页面时没有及时收起软键盘。  </p><p><strong>预防方法：</strong>  </p><p>a：需求设计过程中需要考虑输入法操作键的使用细节，确保所有软键盘的输入键可使用；  </p><p>b：设计规范：程序/页面设计针对输入法操作键的使用制定规范  </p><p><strong>04</strong>  </p><p><strong>交互适配（2）</strong>  </p><p>a：APP界面的“返回”操作与手机系统的“返回”按键操作效果不一致；或界面未提供“返回”，在无系统“返回”按键的手机上，无法返回。  </p><p><strong>预防方法：</strong>   </p><p>a：设计规范：程序设计针对手机返回键制定使用规范；  </p><p>b：在设计中要综合界面需求设定是否提供 “返回”操作。  </p><p><strong>05</strong>  </p><p><strong>界面风格</strong>  </p><p>a：对话框标点、英文字符出现全角、半角的不统一；  </p><p>b：对话框、提示浮动框提示语风格不同，显示位置均不同，产品友好度下降；  </p><p>c：字体和字号要在app中是不同的风格。  </p><p><strong>预防方法：-语言文字提示规范</strong>  </p><p>a：全角字符和半角字符都要使用一个空格分开；  </p><p>b：英文和数字之间要有空格分开；  </p><p>c：汉字和英文、数字要有空格分开；  </p><p>d：带有汉字的话要使用全角字符；  </p><p>e：语言中不要混用全角和半角标点；  </p><p>f：字体和字号要保持统一的风格。  </p><p><strong>06</strong>  </p><p><strong>性能优化(1)</strong>  </p><p>a：进入一些列表，若数量较多则会出现卡死:；  </p><p>b：界面显示对象数量较多，某些会导致页面操作卡顿，用户体验很差；  </p><p>c：处理大量数据时，用户等待时间过长，无进度条提示进度。  </p><p><strong>预防方法： </strong>  </p><p>a：程序对耗时较多的操作逻辑、判断逻辑，不放入UI主线程；  </p><p>b：对数据库记录较多的操作，可以改成数据库批量操作，或者 调用批量接口；c：程序在后台处理用户的输入，则提供进度条或对话框。  </p><p><strong>07</strong>  </p><p><strong>性能优化(2)</strong>  </p><p>a：后台播放内存泄露；  </p><p>b：程序后台运行的时候，手机一直处于占用CPU的运行状态；  </p><p>c：页面中的动态效果（如：马灯滚动）次数无限制，导致界面不断刷新消耗资源。  </p><p><strong>预防方法： </strong>  </p><p>a：使用静态分析工具或代码检查方式检查内容的分配和释放；  </p><p>b：WakeLock机制是防回收技术，当没有播放、下载等操作时，应该主动关闭后台的唤醒锁，减少耗电。当再次需要使用播放、下载功能时才去开启唤醒；  </p><p>c：对刷新消耗资源类操作，要有次数限制。  </p><p><strong>08</strong>  </p><p><strong>多服务、多进程</strong></p><p>a：某些功能操作后， app 无法连接网络；  </p><p>b：进程被杀死后重启，通知栏中显示的信息不正确，没有显示正确的信息；  </p><p>c：app未启动，通过其他第三方app的调用入口调用app,无法正常使用某些功能；  </p><p>d：服务停止后，无法被启动；  </p><p>f：程序被手动退出后，进程仍然在后台存在。  </p><p><strong>预防方法： </strong>  </p><p>a：重新初始化时获取值时读取到空值，因此赋予一个默认值；  </p><p>b：服务重启被回收重启时，初始化对象时要判断当前是否已存在，若存在则复用并更新内容  </p><p>c：任务独立，需要创建不同的服务，生命周期不会互相影响，服务独立可以避免某个服务结束会影响到其他功能的正常使用。  </p><p>总体，对有启用多服务、多进程的程序，有需要做好服务、进程的一致性管理。  </p><p><strong>09</strong>  </p><p><strong>外部调用</strong>  </p><p>a：某些机型启动app之后一直在调用某些外部服务（通过后台服务可以看到其他服务进程，退出app后，有些服务进程消失）  </p><p>b：某些功能模块被扫描成存在木马病毒；  </p><p>c：安全管家告警程序获取绝密权限（通讯录权限）。  </p><p><strong>预防方法：</strong>   </p><p>a：调用第三方功能作为统计或者监控作用时，需要考虑该sdk是否会一直唤醒app导致耗电或者程序无法真正关闭问题；  </p><p>b：调用外部第三方SDK，要考虑被安全工具（上次有广告被扫描到病毒）扫描的设计需求；  </p><p>c：及时关闭不需要的服务进程，在能满足需求的情况下，尽量减少使用敏感的系统权限。  </p><p><strong>10</strong>  </p><p><strong>网络机制(1)</strong>  </p><p>a：网络重试操作机制不统一，导致页面超时体验风格不统一；  </p><p>b：某些应用页面，访问响应慢。   </p><p><strong>预防方法： </strong>  </p><p>a：对底层网络重试机制做统一封装后，供上层调用；   </p><p>b：固定好每次重试间隔（建议10s重试）和重试总次数（建议3次）；   </p><p>c：为使页面提示可以区分网络层与业务解析层不同错误，需对不同错误类型做分类的异常处理，并提示用户原因或让用户重试；  </p><p>d：对多个网络请求的界面，网络接口并行请求有利于提高响应速度。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>[TOC]  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（十一:Bug预防体系）</title>
    <link href="http://wysh.site/2016/11/07/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%8D%81%E4%B8%80Bug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/11/07/产品测试规范十一Bug预防体系/</id>
    <published>2016-11-07T11:23:38.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-10-2-app常见产品问题及预防"><a href="#1-10-2-app常见产品问题及预防" class="headerlink" title="1.10.2 app常见产品问题及预防"></a>1.10.2 app常见产品问题及预防</h3><p><strong>11</strong>  </p><p><strong>网络机制(2)</strong>  </p><p>a：未加载完图片时切换到相似tab，切回不再加载图片；  </p><p>b：进入一个tab，该页面已经加载完成，选择点击某个详细信息页面返回时，页面会闪一下。  </p><p><strong>预防方法：</strong>  </p><p>a：一个页面有多个tab页时，用户切换tab可不轻易取消线程，取而代之使用暂停线程，退出页面时才回收清除；  </p><p>b：启动负载分摊机制的请求，可先保存请求地址，供返回时判断避免重复加载。  </p><p><strong>12</strong>  </p><p><strong>网络机制(3)</strong>  </p><p>a：iOS弱网络下获取不到配置，导致启动卡死；  </p><p>b：sim卡未激活，无移动网络，某些功能卡死；  </p><p>c：断网下启动，登录状态丢失，某些功能信息未正确显示。  </p><p><strong>预防方法：</strong>  </p><p>a：启动逻辑中的网络类请求不能阻塞UI主线程，即网络请求数据可不即时响应（可在下次启动时生效）；  </p><p>b：按钮的点击事件不跟接口关联，做成异步处理不管是否有返回，都可以正常进行点击操作；  </p><p>c：离线操作类，不因与当前网络状态有影响。  </p><p><strong>13</strong>  </p><p><strong>下载空间有效性判断</strong>  </p><p>a：空间不足时，无法保存信息时，没有提示和提前判断；  </p><p>b：本地存储空间不足时，保存文件时没有相应提示；  </p><p>c：空间不足时，文件下载不成功，导致重复不停下载，浪费用户流量。  </p><p><strong>预防方法：</strong>   </p><p>a：对磁盘剩余空间的判断和自动清理逻辑可以做统一封装，提供各不同下载业务使用  </p><p>b：可结合系统硬件配置的10%作为有效剩余空间阀值；  </p><p>c：针对手机内外置SDCard，可以在空间不足情况下做分区切换机制。  </p><p><strong>14</strong>  </p><p><strong>下载文件完整性判断(1)</strong>  </p><p>a：换肤图片未下载完，就触发换肤操作，导致换肤效果错误；  </p><p>b：图片无法下载完全，导致图片展示不完整；  </p><p>c：文件下载完成后，由于网络错误与源文件不符，导致下载后无法播放；  </p><p>d：上传文件功能，目标物理文件不存在（界面缺显示存在），导致传送文件页面一直处于等待中。  </p><p><strong>预防方法：</strong>  </p><p>a：通过判断下载前后文件的size或者文件内容签名，确保下载文件完整后再触发文件使用相关的逻辑；  </p><p>b：文件传输时检查文件是否存在，若不存在则视为传输失败，不阻塞后续传输。  </p><p><strong>15</strong>  </p><p><strong>阻断连续操作</strong>  </p><p>a：连续快速切换界面，或者频繁触发某些功能操作，导致程序卡死；  </p><p>b：连续多次点击同一张图片，导致该图片下载错误。  </p><p><strong>预防方法：</strong>  </p><p>a：使用间隔响应、延迟响应的方式，达到多次相同操作只的触发一次有效逻辑。  </p><p>b：操作一次后，可将按钮等元素设定为禁用状态，防止用户多次点击和请求。  </p><p><strong>16</strong>  </p><p><strong>有效统计逻辑</strong>  </p><p>a：操作页面某些元素，也会导致发送页面使用的统计信息。  </p><p><strong>预防方法：</strong>   </p><p>a：为确保统计数据上传的有效性，只针对真正展示的界面做上报统计，对于展示不完整、非针对性展示不做统计上报。  </p><p><strong>17</strong>  </p><p><strong>程序健壮性判断(1)</strong>  </p><p>a：分享到新浪微博（手机未装新浪微博客户端） ,app崩溃；  </p><p>b：后台接口变更（返回值和类型发生变化），客户端不兼容新格式判断，抛出崩溃异常；  </p><p>c：搜索默认操作崩溃；  </p><p>d：使用外部第三方数据，出现空数据或者非标准格式，则app崩溃  </p><p>e：输入框没有限制字符长度，保存时导致溢出崩溃。  </p><p><strong>预防方法：</strong>   </p><p>a：客户端针对接口返回需做容错处理，如返回为空、返回数据类型不一致；  </p><p>b：任何文本框类型的需要限制输入长度。  </p><p><strong>18</strong>  </p><p><strong>程序健壮性判断(2)</strong>  </p><p>a：某些功能的初始化逻辑没有加入启动逻辑，导致功能使用失败；  </p><p>b：退出重启app，无法自动登录。 </p><p><strong>预防方法:</strong>  </p><p>a：制定启动加载逻辑规范；  </p><p>b：对于重要的业务建议加入启动逻辑，并在业务实际使用时再根据状态多一层判断和加载；  </p><p>c：产品人员需要考虑是否需要保存自动登录功能，并明确告之开发和测试人员。  </p><p><strong>19</strong></p><p><strong>安全机制</strong>  </p><p>a：在URL中不要带有明文的用户信息写代码的时候，不要把密码等敏感的用户信息明文的显示在url中；  </p><p>b：即使要传递密码参数也不要使用pwd、passpord这样的参数名称来进行传递，防止被截获；  </p><p>c：要在传递参数的操作中使用NoCache参数，防止将url参数进行缓存。  </p><p><strong>预防方法：</strong>  </p><p>a：建立标准的数据传输和命名规范，并制作一些网页开发模板或者规范供参考。  </p><p><strong>20</strong>  </p><p><strong>日志调试管理</strong>  </p><p>a：上线以后，调试日志没有关闭，影响程序性能。  </p><p><strong>预防方法：</strong>  </p><p>a：日志统一开关，编译正式包需要关闭；  </p><p>b：再程序界面有入口可以检查是否关闭，方便及时校验；  </p><p>c：方便定位问题，可以做日志动态开启的隐藏开关；  </p><p>d：方便收集问题，可以对问题类型做上报处理（典型如崩溃日志上报）。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>[TOC]  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（九: Bug预防体系）</title>
    <link href="http://wysh.site/2016/10/28/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B9%9DBug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/10/28/产品测试规范九Bug预防体系/</id>
    <published>2016-10-28T08:23:52.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-10-1-web常见产品问题及预防"><a href="#1-10-1-web常见产品问题及预防" class="headerlink" title="1.10.1 web常见产品问题及预防"></a>1.10.1 web常见产品问题及预防</h3><p><strong>11</strong>  </p><p><strong>多个ie同时访问</strong>  </p><p> 用户可能打开不同的IE使用相同的用户登录后进行操作，程序处理的时候要考虑到数据的一致性和同步问题  </p><p> 多个IE使用不同用户，则cookie操作不会出现用户信息混乱的问题  </p><p><strong>预防方法：</strong></p><p> 开发：提前考虑到多个IE操作和多用户操作的使用场景，在使用cookie本地信息时需要做好针对性的程序处理，依据以往出现的问题设计开发规范  </p><p> 测试：按照多浏览器和多用户的使用情况，进行更多场景的测试  </p><p><strong>12</strong>  </p><p><strong>安全考虑</strong>  </p><p> 在URL中不要带有明文的用户信息写代码的时候，不要把密码等敏感的用户信息明文的显示在url中  </p><p>  即使要传递密码参数也不要使用pwd、passpord这样的参数名称来进行传递，防止被截获  </p><p> 要在传递参数的操作中使用NoCache参数，防止将url参数进行缓存  </p><p><strong>预防方法：</strong>  </p><p> 开发： 建立数据传输技术规范和参数命名规范标准，严格参照执行，防止信息被拦截，造成应用系统的信息泄露  </p><p> 测试：在缓存目录验证缓存信息是否有敏感信息，通过抓包方式验证是否暴露了敏感信息  </p><p><strong>13</strong>   </p><p><strong>直接URL链接检查</strong>  </p><p>在Web系统中，匿名在地址栏直接输入各个功能页面的URL地址，检查系统是否处理了权限控制  </p><p><strong>预防方法：</strong>  </p><p> 开发：代码走查的方式确认所有页面的具有权限验证逻辑  </p><p> 测试：获取所有系统url，在非登录情况下进行遍历截图，或关键字判断，验证非登录状态下无法访问具有访问权限限定的  </p><p><strong>14</strong>  </p><p><strong>防止sql注入和跨站攻击</strong>  </p><p> 不要把数据库或者程序的任何报错信息显示在页面上。  </p><p> 数据库中设计到操作权限的表名和字段名不要使用过于通俗易懂的命名，尤其是用户和密码之类的信息，禁止使用明文存储密码  </p><p> 页面回显的input text, input hidden中的文本内容需过滤 “ &lt;、 &gt;、 ”、 ’等字符（半角转换为全角或者删除掉），防止 Javascript 的跨站攻击  </p><p><strong>预防方法：</strong>   </p><p> 开发：出错的时候使用错误处理页面，建立标准的过滤关键字程序，统一数据库设计命名规范将敏感的表名做特殊命名处理，密码使用Md5或其他加密方式保存  </p><p> 测试：验证所有页面不会暴露系统的任何出错信息使用安全工具appscan 或其他工具扫描系统的sql注入漏洞和跨站攻击漏洞  </p><p><strong>15</strong>   </p><p><strong>关于cookie</strong>  </p><p>Cookie没有设定过期时间IE不支持Cookie的时候没有任何提示信息Cookie中的敏感信息没有进行加密  </p><p><strong>预防方法：</strong>  </p><p> 开发：明确cookie生存期，并对生成的cookie进行检查，建立标准的检查浏览器对cookie支持的程序函数  </p><p> 测试：检查cookie的生存周期，以及是否存在敏感内容  </p><p><strong>16</strong>  </p><p><strong>各种资源链接的释放</strong>  </p><p>有的时候，系统莫名访问不了，有可能是数据库连接没有释放压力测试的时候，连接释放如果效率不高，则有可能出现大量连接超时失败内存泄露，长时间工作内存被占满了。  </p><p><strong>预防方法：</strong>  </p><p> 开发：系统资源的释放过程，最好通过代码review的方式来互相监督  </p><p> 测试：进行稳定性测试，验证长时间工作情况下的资源是否可以释放  </p><p><strong>关于keepalive的设置：</strong>  </p><p>如果需要在一个连接同时获取多个资源，则需要打开apache或者resin的Keepalive参数为On，来提高系统的处理能力，减少多次建立连接所消耗的资源。如果大量的处理只是一次性连接，则不要打开Keepalive设置。在实际工作中，需要将keepalive分别设置On或者Off来验证哪个设置的性能更好。  </p><p><strong>17</strong>  </p><p><strong>系统上线的log配置</strong>  </p><p>上线以后，要关闭无用大量调试log信息不要打开过多的log  </p><p><strong>预防方法：</strong>  </p><p>运维和开发：系统管理员对所有打开log级别进行确认，并群发相关人确认  </p><p><strong>18</strong>  </p><p><strong>用户易用性</strong>  </p><p>用户删除某个数据前，要明确提示用户是否要删除，默认把焦点选择为“否”。  </p><p><strong>预防方法：</strong>  </p><p> 开发：按照上述要求进行焦点设定  </p><p> 测试：进行测试确认  </p><p><strong>19</strong>  </p><p><strong>文档</strong>  </p><p>程序实现和接口文档描述不一致  </p><p><strong>预防方法：</strong>  </p><p> 开发：团队中专人定期对接口文档进行审核和更新，保证文档、需求变更和程序实现保持一致  </p><p> 测试：仅参照文档进行测试  </p><p><strong>20</strong>  </p><p><strong>多表操作</strong>  </p><p>详细设计文档缺失，接口对多表进行操作时候，经常会发生有些表的数据没有被更新的情况  </p><p><strong>预防方法：</strong>  </p><p> 开发：审核设计文档是否覆盖必要的逻辑，加强代码审查   </p><p> 测试：通过查询接口判断所有插入接口的数据库操作是否正确  </p><p>等等，这些我们完全可以在不断测试过程中进行总结和积累，可以给开发进行培训，让他们了解这些常见的问题，在自测时注意这些问题，提高送测产品的质量。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系   </p><p>[TOC]  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（八: Bug预防体系）</title>
    <link href="http://wysh.site/2016/10/13/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%85%ABBug%E9%A2%84%E9%98%B2%E4%BD%93%E7%B3%BB/"/>
    <id>http://wysh.site/2016/10/13/产品测试规范八Bug预防体系/</id>
    <published>2016-10-13T01:38:02.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-10-Bug预防体系"><a href="#1-10-Bug预防体系" class="headerlink" title="1.10 Bug预防体系"></a>1.10 Bug预防体系</h2><h3 id="1-10-1-web常见产品问题及预防"><a href="#1-10-1-web常见产品问题及预防" class="headerlink" title="1.10.1 web常见产品问题及预防"></a>1.10.1 web常见产品问题及预防</h3><p>测试人员在每次版本迭代中，会对项目的整体质量有一个把控，对于项目常见的问题，开发经常犯的错误都会有所了解，为了避免或者减少这样的错误或不规范的事情在发生，测试人员可以整理构建属于产品的bug预防体系，总结项目经常出现bug的种类、位置、以及可以提出针对性的规避措施，提高产品质量。  </p><p><strong>1F</strong>  </p><p><strong>分辨率兼容性</strong>  </p><p>产品的网页通常保证在1024<em>768的分辨率下显示正常，但是常常忽略800</em>600分辨率下的显示情况，还有其他特殊要求的分辨率  </p><p>如果页面设计明确只考虑1024<em>768的需求，则只在1024</em>768下验证各个产品页面的显示正确无误  </p><p><strong>预防方法：</strong>  </p><ul><li><p>产品：需要明确产品需要兼容的常见屏幕分辨率</p></li><li><p>开发：网页页面的设计需要针对多种屏幕分辨率制定设计规范，并依据设计规范进行开发</p></li><li><p>测试：在不同分辨率下验证页面显示的兼容正确性</p></li></ul><p><strong>2F</strong>  </p><p><strong>浏览器兼容性</strong>  </p><p>目前市场上的主流浏览器如下：  </p><p><strong>a. IE 6.0-11</strong>  </p><p><strong>b. 360 浏览器</strong>  </p><p><strong>c. 猎豹浏览器</strong>  </p><p><strong>d. QQ 浏览器</strong>  </p><p><strong>e. Chrome 浏览器</strong>  </p><p><strong>f. FireFox 浏览器</strong>  </p><p>通常情况下要保证IE 6-11和360  </p><p>浏览器下的兼容性，需要保证页面不变型，Js执行均正确  </p><p><strong>预防方法：</strong>  </p><ul><li><p>产品：依据主流的浏览器市场占比，评估你需要兼容的浏览器</p></li><li><p>开发：针对需要兼容的浏览器类型和版本，指定浏览器兼容设计开发规（ CSS和Js 为主），并不断总结兼容性的经验教训</p></li><li><p>测试：在产品要求兼容的浏览器类型和版本下，进行兼容性测试</p></li></ul><p><strong>3F</strong>  </p><p><strong>Link问题</strong>  </p><p>所有链接是否按指示那样确实链接到了该链接的页面  </p><p>    所链接的页面是否存在  </p><p>    保证Web应用系统上没有孤立的页面，所谓孤立页面是指没有链接指向该页面  </p><p>    链接的打开方式是否合理（在当前窗口中打开、打开新窗口）  </p><p>    有死链  </p><p><strong>预防方法：</strong>   </p><p>    产品：提供的需求中明确是否需要链接以及链接的位置以及链接的打  </p><p><strong>开方式</strong>   </p><p>    测试：死链测试可以采用工具自动进行  </p><p><strong>4F</strong>  </p><p><strong>快捷键和焦点</strong>  </p><p>Tab键和焦点的切换：在测试的页面中使用Tab键可以在全页面的所有元素进行焦点切换、并且要将相邻元素的 tab键切换顺序做到关联。<br>如：  </p><p>a. 用户打开登录首页，则焦点应该默认显示在用户名输入框中  </p><p>b. 在用户名输入框输入用户名之后，按下tab  键后，焦点应该切换到密码输入框中，而不是切换到其他元素上。  </p><p>c. 输入密码后，按下tab键可将焦点切换到“保存密码”的复选框或者登录按钮以上操作，均对偏好使用快捷键的用户给于更友好的支持。<br><strong>预防方法：</strong>  </p><p>    产品：考虑页面的默认焦点设定位置，设定tab键在界面上切换焦点的顺序  </p><p>    开发：依据产品人员的要求实现默认焦点位置，和tab键的切换顺序  </p><p>    测试：验证默认焦点位置和tab切换的顺序  </p><p><strong>5F</strong>  </p><p><strong>前进、后退和刷新</strong>  </p><p>IE 有一个特性：就是允许前进、后退到某一个页面或在当前页面刷新，在某些特殊业务场景的要求下，用户进行前进、后退和刷新当前页面的操作，会造成数据不完整、校验失败或者重复提交的情况。  </p><p><strong>预防方法：</strong>  </p><p>    产品：明确哪些敏感页面不允许前进、后退和刷新，一般情况下充值和支付等相关的页面或者其他数据提交页面禁止后退和刷新后提交。  </p><p>    开发：从技术层面考虑后退和前进操作是否会造成系统漏洞，让用户重复充值或者支付。如果用户尝试后退，则让页面强制失效或者禁止后退。  </p><p>    测试：和产品确认禁止后退的操作限制页面，进行针对性测试  </p><p><strong>6F</strong>  </p><p>页面/JS/程序提示语言  </p><p>通常情况下，产品人员并不会将产品需求细化到某句话应该如何提示用户，所以不同的程序员会根据自己的语言特点来提示用户，这就造成了不同程序员提示的语言风格完全不一样，造成产品友好度下降。  </p><p><strong>预防方法：</strong>  </p><p>    产品：产品人员和开发人员一起制定尽可能大而全的产品提示语言规范，并且作为规范说明提供给开发人员进行使用。  </p><p>    开发：遵守语言说明规范，并且针对各种系统的要求不断补充和规范提示  </p><p>    测试：测试过程中，验证语言是否符合指定的语言规范  </p><p><strong>语言文字提示：</strong>  </p><p>a. 全角字符和半角字符都要使用一个空格分开  </p><p>b. 英文和数字之间要有空格分开  </p><p>c. 汉字和英文、数字要有空格分开  </p><p>d. 带有汉字的话要使用全角字符  </p><p>e. 语言中不要混用全角和半角标点  </p><p>f. 在语言中，永远不要用“你”这个字，要做一些操作步骤描述的时候，要多用“请”字  </p><p><strong>7F</strong>  </p><p><strong>文字缩略和折行</strong>   </p><p>输入框提交很长的纯英文字母或者数字（不带任何全角字符和中文），并且不换行，则提交数据后，页面可能被此相关字符拉伸的特别长。  </p><p><strong>预防方法：</strong>  </p><p>    开发：提交公共处理字符的程序，解决上述问题，在所有输入框中增加相关处理  </p><p>    测试：所有输入框需要进行此输入测试，保证页面不会被用户的恶意输入拉长  </p><p><strong>8F</strong>  </p><p><strong>图片的显示和链接</strong>  </p><p>图片是否增加链接通常会被开发人员忽略掉图片的显示位置通常会显示不同像素大小和比例的图，所以需要明确定义大图片如何缩减成为小图片的策略，以及小图片如何拉伸显示为大的图片。  </p><p><strong>预防方法：</strong>  </p><p>    产品：提供的需求中明确图片是否需要链接以及链接的url地址以及点击后实在当前页打开，还是弹出新页面打开。明确用户上传图片的显示方法，采用等比缩放，还是原大小显示，还是自适应显示  </p><p>    开发： 按照产品要求进行开发，针对图像的显示开发统一显示模块  </p><p>    测试：点击图片链接，验证图片链接的正确性和打开方式是否符合产品设计要求。传不同格式的图片（长方形图、正方形的图、原型图、超大图和超小图)，验证图片显示策略符合产品  </p><p><strong>9F</strong>  </p><p><strong>重复提交</strong>  </p><p>用户提交数据页面，用户有可能连续多次点击提交按钮，造成数据的重复提交。  </p><p>黑客或者不良用户通过抓包可以获取提交的url，进行尝试重复提交。  </p><p><strong>预防方法：</strong>  </p><p>    开发：点击“提交”后，将按钮变为Disable状态，禁止用户再次点击。针对每条提交的数据需要增加校验参数，方式不良用户通过其他工具恶意提交。  </p><p>    测试：通过页面验证按钮点击后的状态，通过工具发送重复提交的请求，验证系统是否可以处理重复提交的问题（金融系统需重点测试）  </p><p><strong>10F</strong>  </p><p><strong>输入判断问题</strong>  </p><p> 所有键盘输入的特殊字符，均可以正常保存  </p><p> 需要特别处理英文单引号、英文双引号等引起程序错误的问题  </p><p> 需要处理“ &lt;”、“ /”和“ \”等容易保存出错的字符  </p><p> 数字框只能输入数字的内容  </p><p> 日期框需要判断日期是否合法  </p><p> 文本框需要判断字段长是否限制了  </p><p> 对于空格的处理，如果系统想trim掉字符串最开头和最后的空格，则需要整个儿系统都使用此策略，否则会造成数据传递不一致的问题  </p><p> 需要前台页面使用js来判断输入的合法性，同时后台逻辑也要添加判断输入合  </p><p><strong>预防方法：</strong>  </p><p> 开发：开发公共处理特殊字符的模块，在系统中进行规范应用  </p><p> 测试：对所有输入字段，进行输入判断测试，超长、空、特殊字符、 utf8字符等，并验证其他页面输入有效性，验证前台和后台均加有输入判断逻辑  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>[TOC]  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（七:测试结果分析）</title>
    <link href="http://wysh.site/2016/10/02/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B8%83%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/"/>
    <id>http://wysh.site/2016/10/02/产品测试规范七测试结果分析/</id>
    <published>2016-10-02T08:47:35.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-7-测试结果分析"><a href="#1-7-测试结果分析" class="headerlink" title="1.7 测试结果分析"></a>1.7 测试结果分析</h2><h3 id="1-7-1-结果收集"><a href="#1-7-1-结果收集" class="headerlink" title="1.7.1 结果收集"></a>1.7.1 结果收集</h3><p>包括测试脚本测试结果，测试用例执行结果、服务器操作系统资源监控结果、数据库资源监控、web服务器监控、中间件服务器监控等结果的收集，如：功能测试测试用例数目，成功失败数，性能测试结果，各服务器资源监控结果，磁盘，io，内存消耗进程图等。  </p><p>这些收集的结果能帮助测试、产品进行测试结果的分析，哪些问题放到下一个版本中进行解决也可以通过这个来进行规划。  </p><h3 id="1-7-2-结果分析"><a href="#1-7-2-结果分析" class="headerlink" title="1.7.2 结果分析"></a>1.7.2 结果分析</h3><p>根据收集的测试结果，分析系统的稳定性，健壮性，功能测试可以通过结果分析得到版本的bug率，严重bug数、bug返工率等，对于系统后续优化有很大帮助；性能测试通过结果分析知道系统的性能指标，来判断本次系统迭代性能是否有提高，或者对于一个从无到有的系统来说，能预估系统在未来的某段时间能否承受住那么大的业务量。  </p><h3 id="1-7-3-测试分析报告"><a href="#1-7-3-测试分析报告" class="headerlink" title="1.7.3 测试分析报告"></a>1.7.3 测试分析报告</h3><p>根据分析的结果，生成测试分析报告，给定系统的稳定性指标，让系统相关人员知道该版本的质量情况，提供项目上线的风险评估，如果技术可以，还可以提供针对项目问题的改进计划，帮助提高产品质量。如果系统的性能不达标还需考虑后续系统的调优工作，可以找项目相关负责人，dba等相关专家，一起来做性能调优工作，因为性能调优是一项复杂的工作，仅靠测试人员自己之力一般很难做好调优工作，所以可以借助集体的力量共同完成，调优工作完成后，还需回环在进行一次测试工作，验证调优的效果。  </p><h2 id="1-8-上线准备"><a href="#1-8-上线准备" class="headerlink" title="1.8 上线准备"></a>1.8 上线准备</h2><h3 id="1-8-1-版本发布"><a href="#1-8-1-版本发布" class="headerlink" title="1.8.1 版本发布"></a>1.8.1 版本发布</h3><p>测试合格的代码可以进行版本发布工作，版本发布需要给出：发布包、发布文档、数据库脚本等材料，发布文档包括：用户手册、管理员手册、版本发布说明、对于首次发布还需提供产品发布说明、部署手册、测试分析报告等相关文档，这样每次的版本迭代都有相应的文档等材料一一对应，为项目更长远的发展打下基础。</p><h3 id="1-8-2-数据准备"><a href="#1-8-2-数据准备" class="headerlink" title="1.8.2 数据准备"></a>1.8.2 数据准备</h3><p>上线测试跟踪需要做好测试的准备工作，如线上数据准备，版本回退方案准备等，所有测试可能用到的脚本都应提前准备好，避免测试时手忙脚乱，影响效率。</p><h2 id="1-9-上线测试跟踪"><a href="#1-9-上线测试跟踪" class="headerlink" title="1.9 上线测试跟踪"></a>1.9 上线测试跟踪</h2><h3 id="1-9-1-跟踪测试"><a href="#1-9-1-跟踪测试" class="headerlink" title="1.9.1 跟踪测试"></a>1.9.1 跟踪测试</h3><p>系统上线后，可以做接口自动化的快速轮询测试，保证系统常用接口功能正常；对于版本迭代的功能要进行局部功能重点验证，看功能是否正常；常规的测试可以按照探索式测试+传统测试用例测试来进行，更全面的检查系统功能点；在跟踪测试过程中应该做好bug的记录工作，对于严重性bug需要开发修改后进行在一轮的验证测试，对于业务影响不大，如界面某个友好性提示问题，需做好问题记录，务必在下一次版本中优化掉，提高用户体验度的同时兼顾项目的实际情况。  </p><p>可能用到的脚本都应提前准备好，避免测试时手忙脚乱，影响效率。  </p><h2 id="1-10-Bug预防体系"><a href="#1-10-Bug预防体系" class="headerlink" title="1.10 Bug预防体系"></a>1.10 Bug预防体系</h2><h3 id="1-10-1-web常见产品问题及预防"><a href="#1-10-1-web常见产品问题及预防" class="headerlink" title="1.10.1 web常见产品问题及预防"></a>1.10.1 web常见产品问题及预防</h3><p>测试人员在每次版本迭代中，会对项目的整体质量有一个把控，对于项目常见的问题，开发经常犯的错误都会有所了解，为了避免或者减少这样的错误或不规范的事情在发生，测试人员可以整理构建属于产品的bug预防体系，总结项目经常出现bug的种类、位置、以及可以提出针对性的规避措施，提高产品质量。  </p><p><strong>1F</strong>  </p><p><strong>分辨率兼容性</strong>  </p><ul><li><p>产品的网页通常保证在1024<em>768的分辨率下显示正常，但是常常忽略800</em>600分辨率下的显示情况，还有其他特殊要求的分辨率</p></li><li><p>如果页面设计明确只考虑1024<em>768的需求，则只在1024</em>768下验证各个产品页面的显示正确无误  </p></li></ul><p><strong>预防方法</strong>：</p><ul><li><p>产品：需要明确产品需要兼容的常见屏幕分辨率</p></li><li><p>开发：网页页面的设计需要针对多种屏幕分辨率制定设计规范，并依据设计规范进行开发</p></li><li><p>测试：在不同分辨率下验证页面显示的兼容正确性</p></li></ul><p><strong>2F</strong>  </p><p><strong>浏览器兼容性</strong>  </p><p>目前市场上的主流浏览器如下：  </p><p><strong>a. IE 6.0-11</strong>  </p><p><strong>b. 360 浏览器</strong>  </p><p><strong>c. 猎豹浏览器</strong>  </p><p><strong>d. QQ 浏览器</strong>  </p><p><strong>e. Chrome 浏览器</strong>  </p><p><strong>f. FireFox 浏览器</strong>  </p><p>通常情况下要保证IE 6-11和360 浏览器下的兼容性，需要保证页面不变型，Js执行均正确</p><p><strong>预防方法：</strong></p><ul><li><p>产品：依据主流的浏览器市场占比，评估你需要兼容的浏览器</p></li><li><p>开发：针对需要兼容的浏览器类型和版本，指定浏览器兼容设计开发规（ CSS和Js 为主），并不断总结兼容性的经验教训</p></li><li><p>测试：在产品要求兼容的浏览器类型和版本下，进行兼容性测试</p></li></ul><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试 </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>[TOC]  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（六: 测试执行）</title>
    <link href="http://wysh.site/2016/09/19/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%85%AD%E6%B5%8B%E8%AF%95%E6%89%A7%E8%A1%8C/"/>
    <id>http://wysh.site/2016/09/19/产品测试规范六测试执行/</id>
    <published>2016-09-19T00:27:52.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-6-测试执行"><a href="#1-6-测试执行" class="headerlink" title="1.6 测试执行"></a>1.6 测试执行</h2><h3 id="1-6-1-接口自动化测试"><a href="#1-6-1-接口自动化测试" class="headerlink" title="1.6.1 接口自动化测试"></a>1.6.1 接口自动化测试</h3><p>搭建好的接口自动化流程，可以方便快速构建一次接口测试，这样能很快定位版本接口是不是基本没有问题，提高版本质量。  </p><p>目前接口自动化测试在测试工具选取中也谈到了，主要有：jmeter、robotframework、自定义框架等，自动化测试的执行可以版本上线后手动触发执行，也可以用定时任务自动触发，或者用工具来进行自动化构建，不变的初衷是用程序或者工具来替代掉一部分的人力操作，让节省出来的人力更好的投入到测试当中。  </p><p>如：一套自定义的测试框架，java+testng+maven+jenkins，版本测试时，Jenkins自动构建运行java+testng+maven框架脚本，去运行事先编写好的接口脚本，生成测试报告，对于测试接口异常的点进行邮件或者短信告警等，这样运维人员能在第一时间知道版本的质量，异常的接口是哪些，减少人工去一个一个核查接口正确性的时间消耗，有更快或更多的时间去处理异常和维护接口。而且一般项目对于接口的变动不会太大，不会全盘重构一般都是新增某些接口，或者修改一些接口，这样接口脚本只需跟着稍微调整即可，复用性很强，在很多项目上的实验都证明接口自动化测试带来的收益很大。  </p><h3 id="1-6-2-探索式测试"><a href="#1-6-2-探索式测试" class="headerlink" title="1.6.2 探索式测试"></a>1.6.2 探索式测试</h3><p>探索性测试强调测试人员的主观能动性，抛弃繁杂的测试计划和测试用例设计过程，没有很多实际的测试方法、技术和工具，强调在碰到问题时及时改变测试策略。  </p><p>探索性测试强调测试设计和测试执行同时性，完全抛开测试用例，使用定义的比较笼统的测试用例，则称之为探索式测试。  </p><p>测试人员可以根据收集到的信息，天马行空，自由发挥；测试结果、测试实例和测试文档在测试执行时创建；探索式测试适用于“敏捷开发过程”。  </p><p>在用传统的测试用例执行测试的同时，可以使用探索性测试来让测试用例更加的丰富和富有变化，提高测试代码的覆盖率，发现产品更多的问题。  </p><h3 id="1-6-3-传统测试用例测试"><a href="#1-6-3-传统测试用例测试" class="headerlink" title="1.6.3 传统测试用例测试"></a>1.6.3 传统测试用例测试</h3><p>传统用例的设计方式有：等价类划分法、边界值、正交实验、因果图、功能图、场景法、错误推测、随机测试、对象属性分析测试等方法，根据这些方法可以选取一种或者多种适合系统的设计方法来编写和设计我们的测试用例，让自己的测试有条理，尽可能多的覆盖测试点，提高产品的质量。  </p><p>这里给出一个等价类划分法结合边界值方法的测试用例设计例子：  </p><p>某报表处理系统要求用户输入处理报表的日期，日期限制在2001年1月至2008年12月，即系统只能对该段期间内的报表进行处理，如日期不在此范围内，则显示输入错误信息。系统日期规定由年、月的6位数字字符组成，前四位代表年，后两位代表月：  </p><p>分析输入条件有：200101到200812；6位；数字  </p><p>等价类表：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdM0awp8Mlia2576uzc1Cerwia5P3pRSuJUqEMULjiciczJSibMMDEztHTQjO6Pfb0QOcXiaowTV9ib3nKtyw/0?wx_fmt=png" alt="image"></p><p>测试用例：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdM0awp8Mlia2576uzc1CerwiaxjZMrtJtyPFXx0N861vcJTlSah97oGO4Wy6iaL2DsXYwIYlB6WicUekw/0?wx_fmt=png" alt="image">  </p><p>那么根据这些测试用例我们就能很好的测试这个“用户输入处理报表的日期”的功能，其他的功能点类推，我们根据1.4中准备好的功能测试框架进行套用，每个模块都按预期设计的方案来进行测试，这样就能保证一些常规部分的功能点更多的被覆盖到。  </p><h3 id="1-6-4-Bug跟踪"><a href="#1-6-4-Bug跟踪" class="headerlink" title="1.6.4 Bug跟踪"></a>1.6.4 Bug跟踪</h3><p>测试人员在测试过程中对于遇到的bug需要进行记录和跟踪，不要觉得不严重的bug口头上说一声或者其他形式表达一下就可以不用记录了，因为bug的记录有利于产品领导了解产品的质量情况，有很多bug管理工具，如：readmine、禅道等，从测试用例到bug生成，指派给开发，返工次数，每次解决的理由到最后关闭即整个的bug生命周期都能做到很好的管控，帮助产品经理或项目经理进行下一步的产品优化、以及对产品质量做一个把控。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>[TOC]</p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（五: 测试用例编写-功能测试框架）</title>
    <link href="http://wysh.site/2016/09/12/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%BA%94%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99-%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://wysh.site/2016/09/12/产品测试规范五测试用例编写-功能测试框架/</id>
    <published>2016-09-11T23:57:16.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>功能测试框架可以包括：界面友好性测试、功能测试、链接测试、容错测试、稳定性测试、常规性能测试、配置测试、算法测试等等。</strong>  </p><h3 id="1-5-6-稳定性测试"><a href="#1-5-6-稳定性测试" class="headerlink" title="1.5.6 稳定性测试"></a>1.5.6 稳定性测试</h3><ol><li><p>系统不间断运行（7*24），验证是否内存泄露、系统其他资源是否存在泄露</p></li><li><p>如果很紧急上线，可以跑一晚上或者周末跑两天。</p></li></ol><p>一般压力很大的情况下，数据库连接数问题、内存泄露问题会曝露的比较快但是死锁可能不能体现，所以要看系统重要性，如12306稳定性则最好7*24小时</p><h3 id="1-5-7-常规性能测试"><a href="#1-5-7-常规性能测试" class="headerlink" title="1.5.7 常规性能测试"></a>1.5.7 常规性能测试</h3><ol><li><strong>连接速度测试</strong></li></ol><p>用户连接到Web应用系统的速度根据上网方式的变化而变化，他们或许是电话拨号，或是宽带上网。当下载一个程序时，用户可以等较长的时间，但如果仅仅访问一个页面就不会这样。如果Web系统响应时间太长（例如超过5秒钟），用户就会因没有耐心等待而离开。  </p><p>另外，有些页面有超时的限制，如果响应速度太慢，用户可能还没来得及浏览内容，就需要重新登陆了。而且，连接速度太慢，还可能引起数据丢失，使用户得不到真实的页面。</p><ol start="2"><li><strong>负载测试</strong></li></ol><p>负载测试是为了测量Web系统在某一负载级别上的性能，以保证Web系统在需求范围内能正常工作。负载级别可以是某个时刻同时访问Web系统的用户数量，也可以是在线数据处理的数量。例如：Web应用系统能允许多少个用户同时在线？如果超过了这个数量，会出现什么现象？Web应用系统能否处理大量用户对同一个页面的请求？</p><ol start="3"><li><strong>压力测试</strong></li></ol><p>负载测试应该安排在Web系统发布以后，在实际的网络环境中进行测试。因为一个企业内部员工，特别是项目组人员总是有限的，而一个Web系统能同时处理的请求数量将远远超出这个限度，所以，只有放在Internet上，接受负载测试，其结果才是正确可信的。</p><p>进行压力测试是指实际破坏一个Web应用系统，测试系统的反映。压力测试是测试系统的限制和故障恢复能力，也就是测试Web应用系统会不会崩溃，在什么情况下会崩溃。黑客常常提供错误的数据负载，直到Web应用系统崩溃，接着当系统重新启动时获得存取权。</p><p>压力测试的区域包括表单、登陆和其他信息传输页面等。</p><h3 id="1-5-8-易用性测试"><a href="#1-5-8-易用性测试" class="headerlink" title="1.5.8 易用性测试"></a>1.5.8 易用性测试</h3><ol><li><p>系统界面的控件是否可以通过tab键遍历，并且顺序合理</p></li><li><p>主要功能的入口和操作是否易于理解</p></li><li><p>界面是否布局合理，功能是否易于查找和使用</p></li><li><p>操作步骤</p></li><li><p>操作习惯</p></li><li><p>有足够的提示信息，且信息文字描述准确</p></li></ol><h3 id="1-5-9-兼容性测试"><a href="#1-5-9-兼容性测试" class="headerlink" title="1.5.9 兼容性测试"></a>1.5.9 兼容性测试</h3><p>兼容性测试不只是指界面在不同操作系统或浏览器下的兼容，有些功能方面的测试，也要考虑到兼容性，包括操作系统兼容和应用软件兼容，可能还包括硬件兼容。  </p><p>比如涉及到ajax、jquery、javascript等技术的，都要考虑到不同浏览器下的兼容性问题。  </p><p>除了上面所说的这些测试以外，还有算法测试、配置测试、安全性测试等等，在工作中不断总结和分析，形成自己的功能测试框架，当你把这份工作做起来以后，对于你自己对于测试团队而言都是一份很有价值的事情，你的测试思路也会变得更全面。  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>[TOC]</p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（四：测试用例编写-功能测试框架）</title>
    <link href="http://wysh.site/2016/08/15/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E5%9B%9B%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%BC%96%E5%86%99-%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>http://wysh.site/2016/08/15/产品测试规范四测试用例编写-功能测试框架/</id>
    <published>2016-08-15T09:37:49.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>功能测试框架可以包括：界面友好性测试、功能测试、链接测试、容错测试、稳定性测试、常规性能测试、配置测试、算法测试等等。</strong>  </p><h3 id="1-5-2-功能测试"><a href="#1-5-2-功能测试" class="headerlink" title="1.5.2 功能测试"></a>1.5.2 功能测试</h3><ol><li><p>使用所有默认值进行测试</p></li><li><p>根据所有产品文档、帮助文档中描述的内容要进行遍历测试</p></li><li><p>输入判断</p></li><li><p>所有界面出现是和否的逻辑，要测试</p></li><li><p>异常处理</p></li><li><p>敏感词</p></li><li><p>根据需求文档的流程图遍历所有流程图路径</p></li><li><p>根据程序内容，遍历if elif else switch的逻辑点要遍历</p></li><li><p>界面各种控件测试</p></li></ol><p><strong>如对于输入框测试</strong>：</p><p><strong>字符型输入框：</strong></p><ol><li><p><strong>字符型输入框：</strong> 英文全角、英文半角、数字、空或者空格、特殊字符“~！@#￥%……&amp;*？[]{}”特别要注意单引号和&amp;符号。禁止直接输入特殊字符时，使用“粘贴、拷贝”功能尝试输入。</p></li><li><p><strong>长度检查：</strong> 最小长度、最大长度、最小长度-1、最大长度+1、输入超工字符比如把整个文章拷贝过去。</p></li><li><p><strong>空格检查：</strong>   输入的字符间有空格、字符前有空格、字符后有空格、字符前后有空格</p></li><li><p><strong>多行文本框输入：</strong> 允许回车换行、保存后再显示能够保存输入的格式、仅输入回车换行，检查能否正确保存（若能，检查保存结果，若不能，查看是否有正常提示）、</p></li><li><p><strong>安全性检查：</strong> 输入特殊字符串</p></li></ol><p>（null,NULL, ,javascript,,</p><p><strong>数值型输入框：</strong></p><ol><li><p><strong>边界值：</strong> 最大值、最小值、最大值+1、最小值-1</p></li><li><p><strong>位数：</strong> 最小位数、最大位数、最小位数-1最大位数+1、输入超长值、输入整数</p></li><li><p><strong>异常值、特殊字符：</strong> 输入空白（NULL）、空格或”~!@#$%^&amp;*()_+{}|[]\:”&lt;&gt;?;’,./?;:’-=等可能导致系统错误的字符、禁止直接输入特殊字符时，尝试使用粘贴拷贝查看是否能正常提交、word中的特殊功能，通过剪贴板拷贝到输入框，分页符，分节符类似公式的上下标等、数值的特殊符号如∑，㏒，㏑，∏，+，-等、<br>输入负整数、负小数、分数、输入字母或汉字、小数（小数前0点舍去的情况，多个小数点的情况）、首位为0的数字如01、02、科学计数法是否支持1.0E2、全角数字与半角数字、数字与字母混合、16进制，8进制数值、货币型输入（允许小数点后面几位）、</p></li><li><p><strong>安全性检查：</strong> 不能直接输入就 copy</p></li></ol><p><strong>日期型输入框：</strong></p><ol><li><strong>合法性检查：</strong> (输入0日、1日、32日)、月输入[1、3、5、7、8、10、12]、日输入[31]、月输入[4、6、9、11]、日输入[30][31]、输入非闰年，月输入[2]，日期输入[28、29]、输入闰年，月输入[2]、日期输入[29、30]、月输入[0、1、12、13]</li></ol><p>考虑开始日期与结束日历的比较，特别是在查询的时候.</p><ol start="2"><li><p><strong>异常值、特殊字符：</strong> 输入空白或NULL、输入~！@#￥%……&amp;*（）{}[]等可能导致系统错误的字符</p></li><li><p><strong>安全性检查：</strong> 不能直接输入，就copy，是否数据检验出错？</p></li></ol><h3 id="1-5-3-业务流程测试-主要功能测试"><a href="#1-5-3-业务流程测试-主要功能测试" class="headerlink" title="1.5.3 业务流程测试(主要功能测试)"></a>1.5.3 业务流程测试(主要功能测试)</h3><p>业务流程，一般会涉及到多个模块的数据，所以在对业务流程测试时，首先要保证单个模块功能的正确性，其次就要对各个模块间传递的数据进行测试，这往往是容易出现问题的地方，测试时一定要设计不同的数据进行测试。  </p><p>如某一功能模块具有最基本的增删改查功能，则需要进行以下测试：  </p><ol><li><p>单项功能测试（增加、修改、查询、删除）</p></li><li><p>增加——&gt;增加——&gt;增加 （连续增加测试）</p></li><li><p>增加——&gt;删除</p></li><li><p>增加——&gt;删除——&gt;增加 （新增加的内容与删除内容一致）</p></li><li><p>增加——&gt;修改——&gt;删除</p></li><li><p>修改——&gt;修改——&gt;修改 （连续修改测试）</p></li><li><p>修改——&gt;增加（新增加的内容与修改前内容一致）</p></li><li><p>修改——&gt;删除</p></li><li><p>修改——&gt;删除——&gt;增加 （新增加的内容与删除内容一致）</p></li><li><p>删除——&gt;删除——&gt;删除 （连续删除测试）</p></li></ol><h3 id="1-5-4-链接测试"><a href="#1-5-4-链接测试" class="headerlink" title="1.5.4 链接测试"></a>1.5.4 链接测试</h3><p>主要是保证链接的可用性和正确性，它也是网站测试中比较重要的一个方面。  </p><p>可以使用特定的工具如XENU来进行链接测试。  </p><h3 id="1-5-5-容错测试"><a href="#1-5-5-容错测试" class="headerlink" title="1.5.5 容错测试"></a>1.5.5 容错测试</h3><ol><li><p>输入系统不允许的数据作为输入  </p></li><li><p>把某个相关模块或者子系统停掉，验证对当前系统的影响</p></li><li><p>配置文件删除或者配置错误</p></li><li><p>数据库注入错误数据</p></li></ol><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)   </p><p>1.5.1 界面友好性测试  </p><p>[TOC]</p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（三：测试准备）</title>
    <link href="http://wysh.site/2016/08/15/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B8%89%E6%B5%8B%E8%AF%95%E5%87%86%E5%A4%87%EF%BC%89/"/>
    <id>http://wysh.site/2016/08/15/产品测试规范三测试准备）/</id>
    <published>2016-08-15T09:37:47.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-4-测试准备"><a href="#1-4-测试准备" class="headerlink" title="1.4 测试准备"></a>1.4 测试准备</h2><h3 id="1-4-1-代码管理"><a href="#1-4-1-代码管理" class="headerlink" title="1.4.1 代码管理"></a>1.4.1 代码管理</h3><p>所有的产品代码应该统一管理起来，开发人员提交代码应与测试代码地址进行分离，做到高效管理代码，当开发人员提交代码到开发的代码库中，需要进行测试时，测试人员可去开发的代码中进行提取代码到测试基线库中，每提取一次就建立一个测试基线，直到此次版本测试合格，在把合格的测试基线提取到正式基线中用于版本发布，这样每个版本都有清晰的界限和记录，使得产品代码清晰一目了然，可以借助代码管理工具，如svn创建基线来帮助管理产品代码：  </p><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOM5QXSibRNPyNA2S3C5emqK2SyJZzwzCeDgr4XZ2UF63Ba8VcJwxPsOPwZB0icWQO4Hwfd4nFBljZg/0?wx_fmt=png" alt="image"></p><h3 id="1-4-2-测试环境搭建"><a href="#1-4-2-测试环境搭建" class="headerlink" title="1.4.2 测试环境搭建"></a>1.4.2 测试环境搭建</h3><p>这个需要配合1.3测试计划的1.3.4测试环境梳理文档和部署文档来进行，根据事先规划好的服务器部署应用策略来搭建测试环境，能让你搭建思路更加清晰，以后维护环境也更加方便。</p><p>接触很多公司的测试关于环境这块的梳理工作，有的是有专门的服务器管理人员来管理这些环境，有的是由测试人员自己管理，但需要保证的是测试环境应当与开发环境分离开，让测试更加规范减少不必要的麻烦，遇到一些事情如：开发人员很懒，功能开发完成后让他在服务器上验证一下是不是对的，因为开发环境没人去管理部署上去弄得不好应用就报错无法进行调试，所以有的开发就会为方便起见把自己的验证测试直接弄到测试环境上进行，这样带来一个后果就是，你也来部署一个应用，他也来部署一个应用，久而久之测试环境就会特别乱，对测试人员梳理该环境增加不必要的负担，所以建议测试环境的账号应当只有dba或者测试人员自己知道，与开发环境进行分离。</p><h3 id="1-4-3-测试数据脚本编写"><a href="#1-4-3-测试数据脚本编写" class="headerlink" title="1.4.3 测试数据脚本编写"></a>1.4.3 测试数据脚本编写</h3><p>功能性测试数据脚本一般为辅助性测试脚本，如：为了验证分页功能，写一个造数据的脚本让界面出现分页效果，帮助自己测试，减少手动一条一条增加数据的时间。  </p><p>接口测试需要编写接口测试脚本，目前<strong>接口测试比较受欢迎的几款工具有：postman、loadrunner、jmeter、soupui、自定义框架</strong>，postman工具可以模拟发送http请求，用来做一些简单的接口验证测试比较方便，测试结果需要人眼去核查是否正确；loadrunner和jmeter工具更加智能化，接口测试支持断言/检查点设置，工具自己校验测试结果，支持参数化以及请求间参数关联，可以做一些复杂的场景流程测试；自定义框架可以结合项目适合进行扩展，比工具要灵活，但是需要测试人员有一定的代码基础才能开发出适合项目的<strong>接口自动化框架</strong>，如：<strong>unittest、testng</strong>技术等。  </p><p>性能测试需要编写性能测试脚本，如<strong>loadrunner脚本</strong>、<strong>jmeter脚本</strong>等，脚本涉及参数化的地方也需提前构建好，如果系统并发登录需要大量的登录账户，则需要提前造好数据，可以让用户按规则进行，这样脚本中用户就可以用正则编写一定吻合的规则即可，省去大数据参数化的性能损耗。  </p><p>测试工具层出不穷，在学习各种测试工具、测试技术的同时，不要忘记基本功，编程能力的提升才是重中之重。  </p><h2 id="1-5-测试用例编写-功能测试框架"><a href="#1-5-测试用例编写-功能测试框架" class="headerlink" title="1.5 测试用例编写(功能测试框架)"></a>1.5 测试用例编写(功能测试框架)</h2><p>测试用例的编写需要按照一定的思路进行，而不是想到哪写到哪，一般测试机制成熟的公司都会有公司自己自定义的测试用例模板，以及一整套的测试流程关注点，当然我们自己在测试生涯中也应当积累一套自己的测试框架，所有功能性的测试都可以依据框架的思路来进行，达到事半功倍的效果。  </p><p><strong>功能测试框架可以包括：界面友好性测试、功能测试、链接测试、容错测试、稳定性测试、常规性能测试、配置测试、算法测试等等。</strong></p><h3 id="1-5-1-界面友好性测试"><a href="#1-5-1-界面友好性测试" class="headerlink" title="1.5.1 界面友好性测试"></a>1.5.1 界面友好性测试</h3><ol><li><p>风格、样式、颜色是否协调</p></li><li><p>界面布局是否整齐、协调（保证全部显示出来的，尽量不要使用滚动条</p></li><li><p>界面操作、标题描述是否恰当（描述有歧义、注意是否有错别字）</p></li><li><p>操作是否符合人们的常规习惯（有没有把相似的功能的控件放在一起，方便操作）</p></li><li><p>提示界面是否符合规范（不应该显示英文的cancel、ok，应该显示中文的确定等）</p></li><li><p>界面中各个控件是否对齐</p></li><li><p>日期控件是否可编辑</p></li><li><p>日期控件的长度是否合理，以修改时可以把时间全部显示出来为准</p></li><li><p>查询结果列表列宽是否合理、标签描述是否合理</p></li><li><p>查询结果列表太宽没有横向滚动提示</p></li><li><p>对于信息比较长的文本，文本框有没有提供自动竖直滚动条</p></li><li><p>数据录入控件是否方便</p></li><li><p>有没有支持Tab键，键的顺序要有条理，不乱跳</p></li><li><p>有没有提供相关的热键</p></li><li><p>控件的提示语描述是否正确</p></li><li><p>模块调用是否统一，相同的模块是否调用同一个界面</p></li><li><p>用滚动条移动页面时，页面的控件是否显示正常</p></li><li><p>日期的正确格式应该是XXXX-XX-XX或XXXX-XX-XX XX:XX:XX</p></li><li><p>页面是否有多余按钮或标签</p></li><li><p>窗口标题或图标是否与菜单栏的统一</p></li><li><p>窗口的最大化、最小化是否能正确切换</p></li><li><p>对于正常的功能，用户可以不必阅读用户手册就能使用</p></li><li><p>执行风险操作时，有确认、删除等提示吗</p></li><li><p>操作顺序是否合理</p></li><li><p>正确性检查：检查页面上的form, button, table, essay-header, footer,提示信息，还有其他文字拼写，句子的语法等是否正确。</p></li><li><p>系统应该在用户执行错误的操作之前提出警告，提示信息.</p></li><li><p>页面分辨率检查，在各种分辨率浏览系统检查系统界面友好性。</p></li><li><p>合理性检查：做delete, update, add, cancel, back等操作后，查看信息回到的页面是否合理。</p></li><li><p>检查本地化是否通过：英文版不应该有中文信息，英文翻译准确，专业。</p></li><li><p>背景灰度冻结</p></li></ol><p>产品测试规范纲要</p><p><strong><em>目录</em></strong> </p><p>第1章 产品测试规范  </p><p>1.1 产品测试流程  </p><p>1.1.1 测试流程图  </p><p>1.1.2 测试流程说明  </p><p>1.2 需求梳理 </p><p>1.2.1 需求梳理 </p><p>1.3 测试计划 </p><p>1.3.1 测试工具选取 </p><p>1.3.2 测试人员分配 </p><p>1.3.3 测试业务场景选取</p><p>1.3.4 测试环境梳理 </p><p>1.3.5 测试数据梳理 </p><p>[TOC]</p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>产品测试规范（一：测试流程）</title>
    <link href="http://wysh.site/2016/08/09/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E8%A7%84%E8%8C%83%E4%B8%80%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%EF%BC%89/"/>
    <id>http://wysh.site/2016/08/09/产品测试规范一测试流程）/</id>
    <published>2016-08-09T07:46:19.000Z</published>
    <updated>2018-09-16T18:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第1章-产品测试规范"><a href="#第1章-产品测试规范" class="headerlink" title="第1章 产品测试规范"></a>第1章 产品测试规范</h2><p><strong>产品测试流程</strong></p><h3 id="1-1-1-测试流程图"><a href="#1-1-1-测试流程图" class="headerlink" title="1.1.1 测试流程图"></a>1.1.1 测试流程图</h3><p><img src="http://img.chuansong.me/mmbiz_png/WCT55FM5HdOPx6rUnDXJe3Fia4ZyqEdAVpNgB6YEEUbNx42UTuNCmqFTYAibCHicGjibIFUicLmwxicr1BMNNPYDYPOQ/0?wx_fmt=png" alt="image">  </p><h3 id="1-1-2-测试流程说明"><a href="#1-1-2-测试流程说明" class="headerlink" title="1.1.2 测试流程说明"></a>1.1.2 测试流程说明</h3><ol><li>需求阶段：</li></ol><p>测试人员了解项目需求及需求变更，包括需求规格说明书、功能结构及模块划分，根据需求梳理测试点。  </p><ol start="2"><li>测试计划阶段：</li></ol><p>测试计划环节需要考虑测试工具选取，考虑需要测试的业务点，涉及到多业务量测试团队测试，需考虑人员分配问题，如：哪些人准备测试执行，哪些人准备测试过程中数据的收集与整理为后面统一分析做准备。  </p><p>测试环境梳理为测试需要部署哪些应用，应用是单节点部署还是分布式部署，每个应用分配几台机器进行部署，以及测试工具及监控工具的部署等。  </p><p>测试数据梳理为测试过程中需要考虑可能用到哪些数据如同时登陆的场景需要不同的用户，测试翻页功能需要的数据量，通过测试数据梳理能够理清可能需要编写哪些辅助脚本来进行测试。  </p><p>测试场景梳理为根据选取的测试业务点来设计需要测试的场景。  </p><ol start="3"><li>测试准备阶段：</li></ol><p>代码管理为分为开发代码、测试基线、正式基线等，测试代码应在测试基线中进行即与开发的代码管理库分离，测试合格的代码才可以分支到正式基线中。  </p><p>测试环境的搭建工作也需要进行管理，哪些服务器用来搭建哪些应用应当有对应的部署文档以及部署架构图，即测试环境需心中有数且有文档记录，让人一目了然。  </p><p>测试用例编写可以根据功能测试框架来进行，覆盖到所需测试的模块以及需求中指出的测试点。  </p><p>测试数据准备为在系统正式测试前就准备好测试时需要的数据，如移动查单需提前准备好手机号码用来测试查询。  </p><p>测试脚本准备为测试过程中通过手工无法进行或者效率很低可以通过代码来实现的环节，如：登录用户的准备，千万条用户性能测试同时登录系统，需要编写sql脚本来批量生成用户账号数据，又如：接口测试根据接口测试文档预先编写好所有的接口测试脚本。  </p><ol start="4"><li>测试执行阶段：</li></ol><p>功能测试可以通过传统测试用例测试+探索式测试一起执行，提高测试产品的质量，性能测试将测试准备阶段准备好的脚本和数据以及部署好的工具，按照写好的测试方案来进行测试，接口测试按照接口测试方案来运行已编写好的脚本。即让所有的测试有条不紊的运行，不是想到哪是哪，而且所有的测试不是一蹴而就的，测试过程中需要进行bug的跟踪，指派给对应的负责人，把握项目的测试进度。  </p><ol start="5"><li>测试结果分析阶段：</li></ol><p>根据测试的结果、日志收集结果、资源收集结果、异常跟踪结果等汇总分析生成测试分析报告并给出可行性的建议，如果涉及到调优工作，还需对调优结果进行验证，需要对上线的风险进行评估。  </p><ol start="6"><li>上线准备阶段：</li></ol><p>测试人员需要准备线上测试需要用到的数据，需结合生产环境进行，如系统生成订单测试环境是不需要uim卡号的，但是真实的线上环境需要用到uim卡号，这就需要提前准备好线上测试的数据。  </p><p>上线准备需要提供测试合格的发布资料(包括：发布包、数据库脚本、用户手册、部署文档、维护手册等)、还需要考虑好回滚方案。  </p><ol start="7"><li>上线后测试跟踪阶段：</li></ol><p>可以持续构建接口自动化，快速进行一轮接口测试，保证常规接口正常运行，功能测试可以根据测试用例+探索式测试来进行，如果是更新补丁等，需要重点对上线更新的功能进行验证测试，当然测试过程中必不可少要进行bug的跟踪。  </p><ol start="8"><li>项目总结阶段：</li></ol><p>对于项目整体的质量做总结分析，给出总结报告，测试人员需要根据每次的测试、上线等积累符合项目的bug预防体系，总结项目经常出现bug的种类、位置、以及可以提出针对性的规避措施，提高产品质量。（待续）  </p><p>产品测试规范纲要</p><p><strong><em>目录</em></strong>  </p><p>[TOC] </p><p>1.2 需求梳理   </p><p>1.2.1 需求梳理  </p><p>1.3 测试计划  </p><p>1.3.1 测试工具选取  </p><p>1.3.2 测试人员分配  </p><p>1.3.3 测试业务场景选取  </p><p>1.3.4 测试环境梳理  </p><p>1.3.5 测试数据梳理  </p><p>1.4 测试准备  </p><p>1.4.1 代码管理  </p><p>1.4.2 测试环境搭建  </p><p>1.4.3 测试数据脚本编写  </p><p>1.5 测试用例编写(功能测试框架)  </p><p>1.5.1 界面友好性测试  </p><p>1.5.2 功能测试  </p><p>1.5.3 业务流程测试(主要功能测试)  </p><p>1.5.4 链接测试  </p><p>1.5.5 容错测试  </p><p>1.5.6 稳定性测试  </p><p>1.5.7 常规性能测试  </p><p>1.5.8 易用性测试  </p><p>1.5.9 兼容性测试  </p><p>1.6 测试执行  </p><p>1.6.1 接口自动化测试  </p><p>1.6.2 探索式测试  </p><p>1.6.3 传统测试用例测试  </p><p>1.6.4 Bug跟踪  </p><p>1.7 测试结果分析  </p><p>1.7.1 结果收集  </p><p>1.7.2 结果分析  </p><p>1.7.3 测试分析报告  </p><p>1.8 上线准备  </p><p>1.8.1 版本发布  </p><p>1.8.2 数据准备  </p><p>1.9 上线测试跟踪  </p><p>1.9.1 跟踪测试  </p><p>1.10 BUG预防体系  </p><p>1.10.1 web常见产品问题及预防  </p><p>1.10.2 app常见产品问题及预防  </p><p>1.11 BUG管理规范  </p><p>1.11.1 bug提交规范  </p><p>1.11.2 bug级别定义  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="产品测试" scheme="http://wysh.site/categories/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="产品测试" scheme="http://wysh.site/tags/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
